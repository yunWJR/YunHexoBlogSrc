{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"9261f3d0c5ccb9213de4cc8bb721a2fcd5fc73fa","modified":1539159438000},{"_id":"themes/next/.DS_Store","hash":"434ffc751fc6720c1b133a9823cb5df9b54306cb","modified":1536884605000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1535810184000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1535810184000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1535810184000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1535810184000},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1535810184000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1535810184000},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1535810184000},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1535810184000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1535810184000},{"_id":"themes/next/README.md","hash":"c1d6d1c6b75736b892e179865833ea58da5ca9d2","modified":1535810184000},{"_id":"themes/next/bower.json","hash":"5391684ba84fe633bc7877ab711a7d8a0072ceda","modified":1535810184000},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1535810184000},{"_id":"themes/next/package.json","hash":"9acf6b8c8194f8a366025c8aab64d236908e62a1","modified":1535810184000},{"_id":"themes/next/_config.yml","hash":"f20489a8919ca87f184a363df164857a127008e4","modified":1536884933000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1537952340000},{"_id":"source/_posts/iOS-Sol-circular-reference.md","hash":"53f08924b9c0b490a34befcd8e869ed2612555f2","modified":1526895591000},{"_id":"source/_posts/hackintosh-summary.md","hash":"46287d2025d3750312d394ebf99b1e7a067537ee","modified":1537953694000},{"_id":"source/_posts/iOS-adjust-iOS11.md","hash":"e0af00714851e0043333154a1fa52f4bfff11a95","modified":1537952622000},{"_id":"source/_posts/iOS-book-EffectiveObjective-C2.0-chap1.md","hash":"d76d38f05feaab942b40947b9c8154009c4d3ac9","modified":1539160543000},{"_id":"source/_posts/iOS-distribution-ips-on-net.md","hash":"ca58234047c4e301c4e014761c8b71e89a341c7f","modified":1539159660000},{"_id":"source/_posts/iOS-exception-img-on-iOS9.md","hash":"48f8abefdeca34dcafb61cf05ede15fe57250617","modified":1537953604000},{"_id":"source/_posts/iOS-kit-vc-life.md","hash":"e0a8b1ecc433a38e17b6ef523ac17445ab53b3e0","modified":1539159404000},{"_id":"source/_posts/iOS-oc-base-property.md","hash":"2c78213e260404ba788b9e3c4d16f5e65b4fac71","modified":1537952487000},{"_id":"source/_posts/mac-add-shell.md","hash":"26f63e56c8bf828b1e2b3fbaf9ee56e83015da11","modified":1537953653000},{"_id":"source/_posts/iOS-book-EffectiveObjective-C2.0-chap2.md","hash":"4c96b566cf8d6e20084d2a76ca54ddf07f07ee87","modified":1539162024000},{"_id":"source/categories/index.md","hash":"45ac2fcad8887a9a9f0180b73fe6317fc19d095b","modified":1523841434000},{"_id":"source/tags/index.md","hash":"d49af087c04a9a49906689612fdd09fd8189b93f","modified":1523841438000},{"_id":"source/_posts/tool-up-img-to-qiniu-by-alfred.md","hash":"b049ead26711af48f953beee09a3247ad39f0d82","modified":1539159506000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1535810184000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1535810184000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1535810184000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"a5335a99377069ae76fd993d488bc3eaf48f3a05","modified":1535810184000},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1535810184000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1535810184000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1535810184000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1535810184000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1535810184000},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1535810184000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1535810184000},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1535810184000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1535810184000},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1535810184000},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1535810184000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1535810184000},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1535810184000},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1535810184000},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1535810184000},{"_id":"themes/next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1535810184000},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1535810184000},{"_id":"themes/next/languages/ja.yml","hash":"e331b15b1fda0f2285d25853f834682ab8dc3c39","modified":1535810184000},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1535810184000},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1535810184000},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1535810184000},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1535810184000},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1535810184000},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1535810184000},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1535810184000},{"_id":"themes/next/layout/_layout.swig","hash":"1b59036ccb2ad571503b94587f458fad46775642","modified":1535810184000},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1535810184000},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1535810184000},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1535810184000},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1535810184000},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1535810184000},{"_id":"themes/next/layout/post.swig","hash":"318249db246a57e9422875a2457c6acfce974ba5","modified":1535810184000},{"_id":"themes/next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1535810184000},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1535810184000},{"_id":"themes/next/scripts/helpers.js","hash":"a70bfad3efda76738dab12e28e8b75e3989ee3da","modified":1535810184000},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1535810184000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1535810184000},{"_id":"themes/next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1535810184000},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1535810184000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1535810184000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1535810184000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1535810184000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535810184000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1535810184000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1535810184000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1535810184000},{"_id":"themes/next/docs/ru/README.md","hash":"edfe0cfb8b2c9f0effd3beb868af9bfd0fabb3a6","modified":1535810184000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1535810184000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1535810184000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1535810184000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bd2c955d9b7b1b45bd74a4536717d547e03fcde3","modified":1535810184000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1535810184000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1535810184000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1535810184000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1535810184000},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1535810184000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1535810184000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1535810184000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"46b264623af21211a0a9c4ba0cf1318a80eeb9fb","modified":1535810184000},{"_id":"themes/next/layout/_macro/post.swig","hash":"27922af64ecb9db9a28bcf1c98fb68b26bf0b67a","modified":1535810184000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1535810184000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1535810184000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0790ddbc349508d7ece45a9a4391d0a1cd7263cc","modified":1535810184000},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1535810184000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"eafff2d623af8991844f34819a60e37ac11ef245","modified":1535810184000},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1535810184000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1535810184000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1535810184000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1535810184000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1535810184000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1535810184000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1535810184000},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1535810184000},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1535810184000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1535810184000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1535810184000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1535810184000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"05cdaf9b6cb32afd442b228cd247aaf9468a31ed","modified":1535810184000},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1535810184000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1535810184000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1535810184000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1535810184000},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1535810184000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1535810184000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"1412ce2ef59fa4137b697a507fd759ff067a2398","modified":1535810184000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1535810184000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1d59b968af4b8d147f8bc9bc295d596e41be8348","modified":1535810184000},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1535810184000},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1535810184000},{"_id":"themes/next/scripts/tags/note.js","hash":"adb945ba93ac487d46b969ca4e59d3681b8f8d1c","modified":1535810184000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e37761253d68a29593fe9ed2fe403f49b6e971de","modified":1535810184000},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1535810184000},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1535810184000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1535810184000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1535810184000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1535810184000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1535810184000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1535810184000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1535810184000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1535810184000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1535810184000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1535810184000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1535810184000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1535810184000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1535810184000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1535810184000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535810184000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535810184000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1535810184000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1535810184000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1535810184000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1535810184000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535810184000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535810184000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535810184000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535810184000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535810184000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535810184000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535810184000},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1535810184000},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1535810184000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1535810184000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1535810184000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1535810184000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1535810184000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1535810184000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1535810184000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1535810184000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1535810184000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1535810184000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1535810184000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1535810184000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1535810184000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1535810184000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1535810184000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1535810184000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1535810184000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1535810184000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1535810184000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1535810184000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1535810184000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1535810184000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1535810184000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1535810184000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1535810184000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1535810184000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c28f3f4aa31d7f996d26a97df6cd7ffa9bfd2cec","modified":1535810184000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1535810184000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1535810184000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1535810184000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1535810184000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"8878241797f8494a70968756c57cacdfc77b61c7","modified":1535810184000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1535810184000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"03e83f1311faafb7dddc2899042ed1cacd5c995e","modified":1535810184000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"2c74a96dd314e804d801f8773ac1b2e0a970fce3","modified":1535810184000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"34421679cae6581697cd3ab7c3729eb220e3e3f5","modified":1535810184000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1535810184000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1535810184000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1535810184000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1535810184000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1535810184000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1535810184000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1535810184000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1535810184000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1535810184000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1535810184000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1535810184000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"51c2907e5c50c2614419b670fbdec183ae7f7f5d","modified":1535810184000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e1f6f59ad6e562dfe640ee4ed5d1ac9b6aba4114","modified":1535810184000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c167eeb6b736f7b021fba98c38c2c21032ee1255","modified":1535810184000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0b43ddd92e395342703550f629699c5e591fd68b","modified":1535810184000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1535810184000},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1535810184000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1535810184000},{"_id":"themes/next/source/js/src/motion.js","hash":"52fd093cb96b68229b38436c9b8ebcefc7e12cb2","modified":1535810184000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1535810184000},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1535810184000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1535810184000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1535810184000},{"_id":"themes/next/source/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1535810184000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1535810184000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1535810184000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1535810184000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1535810184000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1535810184000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1535810184000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1535810184000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1535810184000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1535810184000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1535810184000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1535810184000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1535810184000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1535810184000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"aebbd86500d819c4532ab290c62b6f432bc2f878","modified":1535810184000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1535810184000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1535810184000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1535810184000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1535810184000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fca5320e2644edcd663888863899d1b80352439b","modified":1535810184000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"876b5d99061025cf485a3cac440624ded5734319","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1535810184000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1535810184000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1535810184000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1535810184000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1535810184000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1535810184000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1535810184000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1535810184000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"ed9608d2740a33664eb703f806c218a4fc520087","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"e18b90c97aaff027e795f5a0cb10476a71bf1c3a","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"549a8a0b5301d32acd86a97f17340cdfcd46fb63","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"578bb2d5f24cad39205bbafb4c39c7e9962b9fa9","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"cf2185a0ea170fd8450f592e859a6c941141e5ee","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c18c91ab3c60169ebe654c80c968fd8458786a3","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1535810184000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1535810184000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1535810184000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1535810184000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1535810184000},{"_id":"public/categories/index.html","hash":"35830966fb4685eb46ca2b8bbe8931ec8449ec07","modified":1539162056315},{"_id":"public/tags/index.html","hash":"9f77d59a1ebb98dccacbc04b5bbeff3c984ed729","modified":1539162056316},{"_id":"public/archives/page/2/index.html","hash":"fde78e85c82389cdb3c4cc8d03c35a64d4447ada","modified":1539162056316},{"_id":"public/archives/2018/page/2/index.html","hash":"4e48ea398e1d85a694e54d7164cb6977f54c594f","modified":1539162056316},{"_id":"public/archives/2018/03/index.html","hash":"03c933793d364b0446fc63a205a6ee06dd9b3365","modified":1539162056316},{"_id":"public/archives/2018/04/index.html","hash":"7b8a9e12f1b4cd2be8e375f0c9fd959ff58dbba3","modified":1539162056316},{"_id":"public/archives/2018/05/index.html","hash":"144a06142d8afdb0b200270cad42d457cd63ef2c","modified":1539162056316},{"_id":"public/archives/2018/06/index.html","hash":"b02f3ef6864d1f5271442a8b4b1cf0ad14813574","modified":1539162056316},{"_id":"public/archives/2018/09/index.html","hash":"7d3e359ffc9ec9ce688c596cd167d8fbefa45283","modified":1539162056316},{"_id":"public/categories/iOS/index.html","hash":"f068b86f0a542fc2f40e381cab0b55b0d3455321","modified":1539162056316},{"_id":"public/categories/Hackintosh/index.html","hash":"75132db2361c62eea7997fc3561864b0eeb7c7d1","modified":1539162056316},{"_id":"public/categories/Mac/index.html","hash":"c7e3be9bd99c417e41f60423c6cb36a70b89a488","modified":1539162056316},{"_id":"public/categories/Tool/index.html","hash":"5b59788c140110390b80aa4d455855c4f1e584c8","modified":1539162056316},{"_id":"public/page/2/index.html","hash":"1c9ac528672631325c8331a5e32f3aac6d77294e","modified":1539162056316},{"_id":"public/tags/iOS/index.html","hash":"3984ef54bd3c74aa9d7dcf54834113f0ce0c6671","modified":1539162056316},{"_id":"public/tags/Objective-C/index.html","hash":"212208d0a1204c916b2c6f3a3194e2ae3d0bb0bc","modified":1539162056316},{"_id":"public/tags/总结/index.html","hash":"ab18f7e9e782f7073a3c9ff8edd0c06bdfcacfa5","modified":1539162056316},{"_id":"public/tags/Hackintosh/index.html","hash":"c72ffda374d2896c4a78d2ad65ecd2363a1316d2","modified":1539162056316},{"_id":"public/tags/黑苹果/index.html","hash":"6fa967932af24da6c45911a15511553a29b2e318","modified":1539162056316},{"_id":"public/tags/Effective-Objective-C-2-0/index.html","hash":"efa5a41cfc1b8ff4bac5466726a78ab5a2b46510","modified":1539162056316},{"_id":"public/tags/异常/index.html","hash":"7727e5d55b40d9f719c30ce910dde96ef363a8b6","modified":1539162056317},{"_id":"public/tags/UIKit/index.html","hash":"52a62ce8cf33d62770f2f7d0cd3d4042a77df849","modified":1539162056317},{"_id":"public/tags/Mac/index.html","hash":"6b2712b82a0750e9ddb680b1dcd29a53152de9b9","modified":1539162056317},{"_id":"public/tags/shell/index.html","hash":"521df45b2e898d942920231c0b8b8df186a8bdd4","modified":1539162056317},{"_id":"public/tags/Tool/index.html","hash":"435093a0c7d0530b4d4a207347ef90acd84f626c","modified":1539162056317},{"_id":"public/tags/Alfred/index.html","hash":"2da02c461abd9123f8247d847d8045d0586feb4e","modified":1539162056317},{"_id":"public/tags/QiNiu/index.html","hash":"4d43355e823c7831e739c5ec042f4ec10722b20a","modified":1539162056317},{"_id":"public/2018/09/13/hackintosh-summary/index.html","hash":"414d19147061160b206a661615146a084f482696","modified":1539162056317},{"_id":"public/2018/06/18/iOS-book-EffectiveObjective-C2.0-chap2/index.html","hash":"fd7298072c2c426477e830c8b75e9eb83a628a3b","modified":1539162056317},{"_id":"public/2018/06/16/iOS-book-EffectiveObjective-C2.0-chap1/index.html","hash":"addc6d156a52b5a76344266d34ef0a68a53ea330","modified":1539162056317},{"_id":"public/2018/05/21/iOS-exception-img-on-iOS9/index.html","hash":"ea7c90779b6ed79b12a9f4f15a228283d133e037","modified":1539162056317},{"_id":"public/2018/05/21/iOS-distribution-ips-on-net/index.html","hash":"2b369ceb0e597b7171f7f777a5a50ab55680c82e","modified":1539162056317},{"_id":"public/2018/04/20/iOS-Sol-circular-reference/index.html","hash":"6fca0185434250e0767a391868258538e016d3af","modified":1539162056317},{"_id":"public/2018/04/19/tool-up-img-to-qiniu-by-alfred/index.html","hash":"4d54f7333366d0ceafdf4ebdefc8618e81f26a5d","modified":1539162056317},{"_id":"public/2018/04/18/iOS-kit-vc-life/index.html","hash":"8c422c8b287e7b0ec9c99e402c2689cb3febc617","modified":1539162056317},{"_id":"public/2018/04/17/iOS-adjust-iOS11/index.html","hash":"c7458add031ec83a9959a2c49563b98c829013d8","modified":1539162056317},{"_id":"public/2018/04/16/iOS-oc-base-property/index.html","hash":"d9e8700cd3df08ac80def82aa0e91330e95b9f6a","modified":1539162056317},{"_id":"public/2018/03/29/mac-add-shell/index.html","hash":"099ce4846097b5d2fe21c2baec89039c762bbfc2","modified":1539162056317},{"_id":"public/archives/index.html","hash":"74550f01619b3a7e1b583dddf9e71acc051a59d3","modified":1539162056317},{"_id":"public/archives/2018/index.html","hash":"9308edfa2d231181952f0f2e372a4fb19c46f99c","modified":1539162056317},{"_id":"public/index.html","hash":"7a2b646d0f6912df0859eaef33a93f26a912d583","modified":1539162056317}],"Category":[{"name":"iOS","_id":"cjn2x9ah80004pb6z8xovlozq"},{"name":"Hackintosh","_id":"cjn2x9ahb0009pb6zqruxlgaq"},{"name":"Mac","_id":"cjn2x9ahi000opb6z6ddchez6"},{"name":"Tool","_id":"cjn2x9ahk000wpb6zh3etclsd"}],"Data":[],"Page":[{"title":"分类","date":"2018-04-16T01:16:48.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-04-16 09:16:48\ntype: \"categories\"\n---\n","updated":"2018-04-16T01:17:14.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjn2x9ah50001pb6z575trqzi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-04-16T01:15:01.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-04-16 09:15:01\ntype: \"tags\"\n---\n","updated":"2018-04-16T01:17:18.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjn2x9ah70003pb6z34d8f43c","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"iOS中的循环引用","date":"2018-04-20T01:17:29.000Z","_content":"\n# iOS中的循环引用\n\n## 1. 概述\n\niOS内存中的分区有：堆、栈、静态区。其中，栈和静态区是操作系统自己管理回收，不会造成循环引用。在堆中的相互引用无法回收，有可能造成循环引用。\n\n> 循环引用的实质：多个对象相互之间有强引用，不能施放让系统回收。\n\n> 解决循环引用一般是将 strong 引用改为 weak 引用。\n\n## 2. 循环引用场景分析及解决方法\n\n### 1）父类与子类\n\n> 如：在使用UITableView 的时候，将 UITableView 给 Cell 使用，cell 中的 strong 引用会造成循环引用。\n\n```\n// controller\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n    TestTableViewCell *cell =[tableView dequeueReusableCellWithIdentifier:@\"UITableViewCellId\" forIndexPath:indexPath];\n    cell.tableView = tableView;\n    return cell;\n}\n\n// cell\n@interface TestTableViewCell : UITableViewCell\n@property (nonatomic, strong) UITableView *tableView; // strong 造成循环引用\n@end\n```\n\n> 解决：strong 改为 weak\n\n```\n// cell\n@interface TestTableViewCell : UITableViewCell\n@property (nonatomic, weak) UITableView *tableView; // strong 改为 weak\n@end\n```\n\n### 2）block\n\n> block在copy时都会对block内部用到的对象进行强引用的。\n\n```\nself.testObject.testCircleBlock = ^{\n   [self doSomething];\n};\n```\n\nself将block作为自己的属性变量，而在block的方法体里面又引用了 self 本身，此时就很简单的形成了一个循环引用。\n\n应该将 self 改为弱引用\n\n```\n__weak typeof(self) weakSelf = self;\n self.testObject.testCircleBlock = ^{\n      __strong typeof (weakSelf) strongSelf = weakSelf;\n      [strongSelf doSomething];\n};\n```\n\n> 在 ARC 中，在被拷贝的 block 中无论是直接引用 self 还是通过引用 self 的成员变量间接引用 self，该 block 都会 retain self。\n\n- **快速定义宏**\n\n```\n    // weak obj\n    /#define WEAK_OBJ(type)  __weak typeof(type) weak##type = type;\n\n    // strong obj\n    /#define STRONG_OBJ(type)  __strong typeof(type) str##type = weak##type;\n```\n\n### 3）Delegate\n\ndelegate 属性的声明如下：\n```\n@property (nonatomic, weak) id <TestDelegate> delegate;\n```\n\n如果将 weak 改为 strong，则会造成循环引用\n\n```\n// self -> AViewController\nBViewController *bVc = [BViewController new];\nbVc = self; \n[self.navigationController pushViewController: bVc animated:YES];\n\n   // 假如是 strong 的情况\n   // bVc.delegate ===> AViewController (也就是 A 的引用计数 + 1)\n   // AViewController 本身又是引用了 <BViewControllerDelegate> ===> delegate 引用计数 + 1\n   // 导致： AViewController <======> Delegate ，也就循环引用啦\n```\n\n### 4）NSTimer\n\nNSTimer 的 target 对传入的参数都是强引用（即使是 weak 对象）\n\n![](http://ot8psglzx.bkt.clouddn.com/784630-28d5d03d2d902860.png?imageMogr2/thumbnail/!70p)\n\n解决办法: 《Effective Objective-C 》中的52条方法\n\n```\n#import <Foundation/Foundation.h>\n\n@interface NSTimer (YPQBlocksSupport)\n\n+ (NSTimer *)ypq_scheduledTimeWithTimeInterval:(NSTimeInterval)interval\n                                         block:(void(^)())block\n                                       repeats:(BOOL)repeats;\n\n@end\n\n\n#import \"NSTimer+YPQBlocksSupport.h\"\n\n@implementation NSTimer (YPQBlocksSupport)\n\n\n+ (NSTimer *)ypq_scheduledTimeWithTimeInterval:(NSTimeInterval)interval\n                                         block:(void(^)())block\n                                       repeats:(BOOL)repeats\n{\n    return [self scheduledTimerWithTimeInterval:interval\n                                         target:self\n                                       selector:@selector(ypq_blockInvoke:) userInfo:[block copy]\n                                        repeats:repeats];\n}\n\n- (void)ypq_blockInvoke:(NSTimer *)timer\n{\n    void (^block)() = timer.userInfo;\n    if(block)\n    {\n        block();\n    }\n}\n\n@end\n```\n\n使用方式：\n\n```\n__weak ViewController * weakSelf = self;\n[NSTimer ypq_scheduledTimeWithTimeInterval:4.0f\n                                     block:^{\n                                         ViewController * strongSelf = weakSelf;\n                                         [strongSelf afterThreeSecondBeginAction];\n                                     }\n                                   repeats:YES];\n```\n\n> 计时器保留其目标对象，反复执行任务导致的循环，确实要注意，另外在dealloc的时候，不要忘了调用计时器中的 invalidate方法。","source":"_posts/iOS-Sol-circular-reference.md","raw":"---\ntitle: iOS中的循环引用\ndate: 2018-04-20 09:17:29\ncategories: iOS\ntags: [iOS,Objective-C,总结]\n---\n\n# iOS中的循环引用\n\n## 1. 概述\n\niOS内存中的分区有：堆、栈、静态区。其中，栈和静态区是操作系统自己管理回收，不会造成循环引用。在堆中的相互引用无法回收，有可能造成循环引用。\n\n> 循环引用的实质：多个对象相互之间有强引用，不能施放让系统回收。\n\n> 解决循环引用一般是将 strong 引用改为 weak 引用。\n\n## 2. 循环引用场景分析及解决方法\n\n### 1）父类与子类\n\n> 如：在使用UITableView 的时候，将 UITableView 给 Cell 使用，cell 中的 strong 引用会造成循环引用。\n\n```\n// controller\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n    TestTableViewCell *cell =[tableView dequeueReusableCellWithIdentifier:@\"UITableViewCellId\" forIndexPath:indexPath];\n    cell.tableView = tableView;\n    return cell;\n}\n\n// cell\n@interface TestTableViewCell : UITableViewCell\n@property (nonatomic, strong) UITableView *tableView; // strong 造成循环引用\n@end\n```\n\n> 解决：strong 改为 weak\n\n```\n// cell\n@interface TestTableViewCell : UITableViewCell\n@property (nonatomic, weak) UITableView *tableView; // strong 改为 weak\n@end\n```\n\n### 2）block\n\n> block在copy时都会对block内部用到的对象进行强引用的。\n\n```\nself.testObject.testCircleBlock = ^{\n   [self doSomething];\n};\n```\n\nself将block作为自己的属性变量，而在block的方法体里面又引用了 self 本身，此时就很简单的形成了一个循环引用。\n\n应该将 self 改为弱引用\n\n```\n__weak typeof(self) weakSelf = self;\n self.testObject.testCircleBlock = ^{\n      __strong typeof (weakSelf) strongSelf = weakSelf;\n      [strongSelf doSomething];\n};\n```\n\n> 在 ARC 中，在被拷贝的 block 中无论是直接引用 self 还是通过引用 self 的成员变量间接引用 self，该 block 都会 retain self。\n\n- **快速定义宏**\n\n```\n    // weak obj\n    /#define WEAK_OBJ(type)  __weak typeof(type) weak##type = type;\n\n    // strong obj\n    /#define STRONG_OBJ(type)  __strong typeof(type) str##type = weak##type;\n```\n\n### 3）Delegate\n\ndelegate 属性的声明如下：\n```\n@property (nonatomic, weak) id <TestDelegate> delegate;\n```\n\n如果将 weak 改为 strong，则会造成循环引用\n\n```\n// self -> AViewController\nBViewController *bVc = [BViewController new];\nbVc = self; \n[self.navigationController pushViewController: bVc animated:YES];\n\n   // 假如是 strong 的情况\n   // bVc.delegate ===> AViewController (也就是 A 的引用计数 + 1)\n   // AViewController 本身又是引用了 <BViewControllerDelegate> ===> delegate 引用计数 + 1\n   // 导致： AViewController <======> Delegate ，也就循环引用啦\n```\n\n### 4）NSTimer\n\nNSTimer 的 target 对传入的参数都是强引用（即使是 weak 对象）\n\n![](http://ot8psglzx.bkt.clouddn.com/784630-28d5d03d2d902860.png?imageMogr2/thumbnail/!70p)\n\n解决办法: 《Effective Objective-C 》中的52条方法\n\n```\n#import <Foundation/Foundation.h>\n\n@interface NSTimer (YPQBlocksSupport)\n\n+ (NSTimer *)ypq_scheduledTimeWithTimeInterval:(NSTimeInterval)interval\n                                         block:(void(^)())block\n                                       repeats:(BOOL)repeats;\n\n@end\n\n\n#import \"NSTimer+YPQBlocksSupport.h\"\n\n@implementation NSTimer (YPQBlocksSupport)\n\n\n+ (NSTimer *)ypq_scheduledTimeWithTimeInterval:(NSTimeInterval)interval\n                                         block:(void(^)())block\n                                       repeats:(BOOL)repeats\n{\n    return [self scheduledTimerWithTimeInterval:interval\n                                         target:self\n                                       selector:@selector(ypq_blockInvoke:) userInfo:[block copy]\n                                        repeats:repeats];\n}\n\n- (void)ypq_blockInvoke:(NSTimer *)timer\n{\n    void (^block)() = timer.userInfo;\n    if(block)\n    {\n        block();\n    }\n}\n\n@end\n```\n\n使用方式：\n\n```\n__weak ViewController * weakSelf = self;\n[NSTimer ypq_scheduledTimeWithTimeInterval:4.0f\n                                     block:^{\n                                         ViewController * strongSelf = weakSelf;\n                                         [strongSelf afterThreeSecondBeginAction];\n                                     }\n                                   repeats:YES];\n```\n\n> 计时器保留其目标对象，反复执行任务导致的循环，确实要注意，另外在dealloc的时候，不要忘了调用计时器中的 invalidate方法。","slug":"iOS-Sol-circular-reference","published":1,"updated":"2018-05-21T09:39:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn2x9ah30000pb6z6zojubzs","content":"<h1 id=\"iOS中的循环引用\"><a href=\"#iOS中的循环引用\" class=\"headerlink\" title=\"iOS中的循环引用\"></a>iOS中的循环引用</h1><h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h2><p>iOS内存中的分区有：堆、栈、静态区。其中，栈和静态区是操作系统自己管理回收，不会造成循环引用。在堆中的相互引用无法回收，有可能造成循环引用。</p>\n<blockquote>\n<p>循环引用的实质：多个对象相互之间有强引用，不能施放让系统回收。</p>\n</blockquote>\n<blockquote>\n<p>解决循环引用一般是将 strong 引用改为 weak 引用。</p>\n</blockquote>\n<h2 id=\"2-循环引用场景分析及解决方法\"><a href=\"#2-循环引用场景分析及解决方法\" class=\"headerlink\" title=\"2. 循环引用场景分析及解决方法\"></a>2. 循环引用场景分析及解决方法</h2><h3 id=\"1）父类与子类\"><a href=\"#1）父类与子类\" class=\"headerlink\" title=\"1）父类与子类\"></a>1）父类与子类</h3><blockquote>\n<p>如：在使用UITableView 的时候，将 UITableView 给 Cell 使用，cell 中的 strong 引用会造成循环引用。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// controller</span><br><span class=\"line\">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</span><br><span class=\"line\">    TestTableViewCell *cell =[tableView dequeueReusableCellWithIdentifier:@&quot;UITableViewCellId&quot; forIndexPath:indexPath];</span><br><span class=\"line\">    cell.tableView = tableView;</span><br><span class=\"line\">    return cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// cell</span><br><span class=\"line\">@interface TestTableViewCell : UITableViewCell</span><br><span class=\"line\">@property (nonatomic, strong) UITableView *tableView; // strong 造成循环引用</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>解决：strong 改为 weak</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// cell</span><br><span class=\"line\">@interface TestTableViewCell : UITableViewCell</span><br><span class=\"line\">@property (nonatomic, weak) UITableView *tableView; // strong 改为 weak</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<h3 id=\"2）block\"><a href=\"#2）block\" class=\"headerlink\" title=\"2）block\"></a>2）block</h3><blockquote>\n<p>block在copy时都会对block内部用到的对象进行强引用的。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.testObject.testCircleBlock = ^&#123;</span><br><span class=\"line\">   [self doSomething];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>self将block作为自己的属性变量，而在block的方法体里面又引用了 self 本身，此时就很简单的形成了一个循环引用。</p>\n<p>应该将 self 改为弱引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__weak typeof(self) weakSelf = self;</span><br><span class=\"line\"> self.testObject.testCircleBlock = ^&#123;</span><br><span class=\"line\">      __strong typeof (weakSelf) strongSelf = weakSelf;</span><br><span class=\"line\">      [strongSelf doSomething];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在 ARC 中，在被拷贝的 block 中无论是直接引用 self 还是通过引用 self 的成员变量间接引用 self，该 block 都会 retain self。</p>\n</blockquote>\n<ul>\n<li><strong>快速定义宏</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// weak obj</span><br><span class=\"line\">/#define WEAK_OBJ(type)  __weak typeof(type) weak##type = type;</span><br><span class=\"line\"></span><br><span class=\"line\">// strong obj</span><br><span class=\"line\">/#define STRONG_OBJ(type)  __strong typeof(type) str##type = weak##type;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3）Delegate\"><a href=\"#3）Delegate\" class=\"headerlink\" title=\"3）Delegate\"></a>3）Delegate</h3><p>delegate 属性的声明如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, weak) id &lt;TestDelegate&gt; delegate;</span><br></pre></td></tr></table></figure></p>\n<p>如果将 weak 改为 strong，则会造成循环引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// self -&gt; AViewController</span><br><span class=\"line\">BViewController *bVc = [BViewController new];</span><br><span class=\"line\">bVc = self; </span><br><span class=\"line\">[self.navigationController pushViewController: bVc animated:YES];</span><br><span class=\"line\"></span><br><span class=\"line\">   // 假如是 strong 的情况</span><br><span class=\"line\">   // bVc.delegate ===&gt; AViewController (也就是 A 的引用计数 + 1)</span><br><span class=\"line\">   // AViewController 本身又是引用了 &lt;BViewControllerDelegate&gt; ===&gt; delegate 引用计数 + 1</span><br><span class=\"line\">   // 导致： AViewController &lt;======&gt; Delegate ，也就循环引用啦</span><br></pre></td></tr></table></figure>\n<h3 id=\"4）NSTimer\"><a href=\"#4）NSTimer\" class=\"headerlink\" title=\"4）NSTimer\"></a>4）NSTimer</h3><p>NSTimer 的 target 对传入的参数都是强引用（即使是 weak 对象）</p>\n<p><img src=\"http://ot8psglzx.bkt.clouddn.com/784630-28d5d03d2d902860.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<p>解决办法: 《Effective Objective-C 》中的52条方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface NSTimer (YPQBlocksSupport)</span><br><span class=\"line\"></span><br><span class=\"line\">+ (NSTimer *)ypq_scheduledTimeWithTimeInterval:(NSTimeInterval)interval</span><br><span class=\"line\">                                         block:(void(^)())block</span><br><span class=\"line\">                                       repeats:(BOOL)repeats;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;NSTimer+YPQBlocksSupport.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation NSTimer (YPQBlocksSupport)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+ (NSTimer *)ypq_scheduledTimeWithTimeInterval:(NSTimeInterval)interval</span><br><span class=\"line\">                                         block:(void(^)())block</span><br><span class=\"line\">                                       repeats:(BOOL)repeats</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return [self scheduledTimerWithTimeInterval:interval</span><br><span class=\"line\">                                         target:self</span><br><span class=\"line\">                                       selector:@selector(ypq_blockInvoke:) userInfo:[block copy]</span><br><span class=\"line\">                                        repeats:repeats];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)ypq_blockInvoke:(NSTimer *)timer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    void (^block)() = timer.userInfo;</span><br><span class=\"line\">    if(block)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        block();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>使用方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__weak ViewController * weakSelf = self;</span><br><span class=\"line\">[NSTimer ypq_scheduledTimeWithTimeInterval:4.0f</span><br><span class=\"line\">                                     block:^&#123;</span><br><span class=\"line\">                                         ViewController * strongSelf = weakSelf;</span><br><span class=\"line\">                                         [strongSelf afterThreeSecondBeginAction];</span><br><span class=\"line\">                                     &#125;</span><br><span class=\"line\">                                   repeats:YES];</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>计时器保留其目标对象，反复执行任务导致的循环，确实要注意，另外在dealloc的时候，不要忘了调用计时器中的 invalidate方法。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"iOS中的循环引用\"><a href=\"#iOS中的循环引用\" class=\"headerlink\" title=\"iOS中的循环引用\"></a>iOS中的循环引用</h1><h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h2><p>iOS内存中的分区有：堆、栈、静态区。其中，栈和静态区是操作系统自己管理回收，不会造成循环引用。在堆中的相互引用无法回收，有可能造成循环引用。</p>\n<blockquote>\n<p>循环引用的实质：多个对象相互之间有强引用，不能施放让系统回收。</p>\n</blockquote>\n<blockquote>\n<p>解决循环引用一般是将 strong 引用改为 weak 引用。</p>\n</blockquote>\n<h2 id=\"2-循环引用场景分析及解决方法\"><a href=\"#2-循环引用场景分析及解决方法\" class=\"headerlink\" title=\"2. 循环引用场景分析及解决方法\"></a>2. 循环引用场景分析及解决方法</h2><h3 id=\"1）父类与子类\"><a href=\"#1）父类与子类\" class=\"headerlink\" title=\"1）父类与子类\"></a>1）父类与子类</h3><blockquote>\n<p>如：在使用UITableView 的时候，将 UITableView 给 Cell 使用，cell 中的 strong 引用会造成循环引用。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// controller</span><br><span class=\"line\">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</span><br><span class=\"line\">    TestTableViewCell *cell =[tableView dequeueReusableCellWithIdentifier:@&quot;UITableViewCellId&quot; forIndexPath:indexPath];</span><br><span class=\"line\">    cell.tableView = tableView;</span><br><span class=\"line\">    return cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// cell</span><br><span class=\"line\">@interface TestTableViewCell : UITableViewCell</span><br><span class=\"line\">@property (nonatomic, strong) UITableView *tableView; // strong 造成循环引用</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>解决：strong 改为 weak</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// cell</span><br><span class=\"line\">@interface TestTableViewCell : UITableViewCell</span><br><span class=\"line\">@property (nonatomic, weak) UITableView *tableView; // strong 改为 weak</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<h3 id=\"2）block\"><a href=\"#2）block\" class=\"headerlink\" title=\"2）block\"></a>2）block</h3><blockquote>\n<p>block在copy时都会对block内部用到的对象进行强引用的。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.testObject.testCircleBlock = ^&#123;</span><br><span class=\"line\">   [self doSomething];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>self将block作为自己的属性变量，而在block的方法体里面又引用了 self 本身，此时就很简单的形成了一个循环引用。</p>\n<p>应该将 self 改为弱引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__weak typeof(self) weakSelf = self;</span><br><span class=\"line\"> self.testObject.testCircleBlock = ^&#123;</span><br><span class=\"line\">      __strong typeof (weakSelf) strongSelf = weakSelf;</span><br><span class=\"line\">      [strongSelf doSomething];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在 ARC 中，在被拷贝的 block 中无论是直接引用 self 还是通过引用 self 的成员变量间接引用 self，该 block 都会 retain self。</p>\n</blockquote>\n<ul>\n<li><strong>快速定义宏</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// weak obj</span><br><span class=\"line\">/#define WEAK_OBJ(type)  __weak typeof(type) weak##type = type;</span><br><span class=\"line\"></span><br><span class=\"line\">// strong obj</span><br><span class=\"line\">/#define STRONG_OBJ(type)  __strong typeof(type) str##type = weak##type;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3）Delegate\"><a href=\"#3）Delegate\" class=\"headerlink\" title=\"3）Delegate\"></a>3）Delegate</h3><p>delegate 属性的声明如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, weak) id &lt;TestDelegate&gt; delegate;</span><br></pre></td></tr></table></figure></p>\n<p>如果将 weak 改为 strong，则会造成循环引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// self -&gt; AViewController</span><br><span class=\"line\">BViewController *bVc = [BViewController new];</span><br><span class=\"line\">bVc = self; </span><br><span class=\"line\">[self.navigationController pushViewController: bVc animated:YES];</span><br><span class=\"line\"></span><br><span class=\"line\">   // 假如是 strong 的情况</span><br><span class=\"line\">   // bVc.delegate ===&gt; AViewController (也就是 A 的引用计数 + 1)</span><br><span class=\"line\">   // AViewController 本身又是引用了 &lt;BViewControllerDelegate&gt; ===&gt; delegate 引用计数 + 1</span><br><span class=\"line\">   // 导致： AViewController &lt;======&gt; Delegate ，也就循环引用啦</span><br></pre></td></tr></table></figure>\n<h3 id=\"4）NSTimer\"><a href=\"#4）NSTimer\" class=\"headerlink\" title=\"4）NSTimer\"></a>4）NSTimer</h3><p>NSTimer 的 target 对传入的参数都是强引用（即使是 weak 对象）</p>\n<p><img src=\"http://ot8psglzx.bkt.clouddn.com/784630-28d5d03d2d902860.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<p>解决办法: 《Effective Objective-C 》中的52条方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface NSTimer (YPQBlocksSupport)</span><br><span class=\"line\"></span><br><span class=\"line\">+ (NSTimer *)ypq_scheduledTimeWithTimeInterval:(NSTimeInterval)interval</span><br><span class=\"line\">                                         block:(void(^)())block</span><br><span class=\"line\">                                       repeats:(BOOL)repeats;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;NSTimer+YPQBlocksSupport.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation NSTimer (YPQBlocksSupport)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+ (NSTimer *)ypq_scheduledTimeWithTimeInterval:(NSTimeInterval)interval</span><br><span class=\"line\">                                         block:(void(^)())block</span><br><span class=\"line\">                                       repeats:(BOOL)repeats</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return [self scheduledTimerWithTimeInterval:interval</span><br><span class=\"line\">                                         target:self</span><br><span class=\"line\">                                       selector:@selector(ypq_blockInvoke:) userInfo:[block copy]</span><br><span class=\"line\">                                        repeats:repeats];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)ypq_blockInvoke:(NSTimer *)timer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    void (^block)() = timer.userInfo;</span><br><span class=\"line\">    if(block)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        block();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>使用方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__weak ViewController * weakSelf = self;</span><br><span class=\"line\">[NSTimer ypq_scheduledTimeWithTimeInterval:4.0f</span><br><span class=\"line\">                                     block:^&#123;</span><br><span class=\"line\">                                         ViewController * strongSelf = weakSelf;</span><br><span class=\"line\">                                         [strongSelf afterThreeSecondBeginAction];</span><br><span class=\"line\">                                     &#125;</span><br><span class=\"line\">                                   repeats:YES];</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>计时器保留其目标对象，反复执行任务导致的循环，确实要注意，另外在dealloc的时候，不要忘了调用计时器中的 invalidate方法。</p>\n</blockquote>\n"},{"title":"Hackintosh 黑苹果总结","date":"2018-09-13T10:22:42.000Z","_content":"\n# Hackintosh 黑苹果总结\n\n> 个人用黑苹果开发iOS、java已经有2年多。之所以选择黑苹果，还是因为 Macbook 性能太弱，而且发热严重。2年之久，基本随着 Mac系统更新，也会更新系统（不然无法更新最新的Xcode，纯 java 开发倒是无所谓）。只有一次打开【文件保险箱】功能挂了（下面有说明，千万不要打开该选项），其他时候都没问题。分享其中的一些经验，给愿意尝试黑苹果的朋友。\n\n* 个人黑苹果电脑的配置：\n\n\t电脑一：台式机（i7-87000k 华擎 Z370M-ITX 16G GT750ti）\n\n\t电脑二：台式机（i5-4590 华硕 b85m 8G）\n\n\t电脑三：联想 Y700笔记本（i5-6300 8G GT960M）\n\n* 帮人配的电脑：\n\n\t电脑一：台式机（i7-77000 华擎 deskmini 16G）\n\n\t电脑二：台式机（i5-7500 华硕 B150 8G）\n\n    [EIF 分享-包括以上提到的几种配置机型](https://github.com/yunWJR/Hackintosh_List)\n\n## 一、哪些电脑可以安装黑苹果\n\n### 1、笔记本\n\t\n如何确定笔记本可以安装：\n\t \n1）搜索笔记本型号，看有安装成功的案例没。\n\t\n2）看CPU，如果 CPU 的型号与苹果已经发布的笔记本相同或类似（类似定义为同代 CPU），那么 CPU 应该没问题。\n\n3）看显卡：如果笔记本有独显，那么独显基本是不能使用的，只能使用集显。偶尔少数笔记本有独显，主板不能屏蔽独显，导致无法安装。\n\n4）以上满足的话，可以尝试安装。\n\n### 2、台式机\n\n如何确定台式机可以安装：\n\t \n1）搜索台式机配置，看有安装成功的案例没。\n\t\n2）看CPU，如果CPU的型号与苹果已经发布的笔记本相同或类似（类似定义为同代 CPU），那么 CPU 应该没问题，基本都常见的 intel 台式机 CPU 都可以安装。最新的 AMD 都 CPU 也有大神放出内核，可以安装。\n\n3）看显卡：如果有独显，比较新的 AMD 显卡都可以支持，N 卡一般也支持，有 WebDriver。\n\n4）主板：一般都支持，技嘉的一般支持原生电源管理，比较好。华擎的支持比较到位，曾经几块主板专门出过安装黑苹果的 BIOS，良心。\n\n5）网卡：一般 intel 的有线网卡都支持，无线的话，选择 苹果采用的型号，容易驱动。\n\n### 3、建议\n\n1）如果买新电脑\n\n笔记本可以买没有独显的，因为有也一版用不上。先查下哪些比较好安装的机型，照着买就行。\n\n台式机可以参考 [tonymacx86](https://www.tonymacx86.com/buyersguide/building-a-customac-hackintosh-the-ultimate-buyers-guide/)上的配置，都很容易安装。\n\n2）最好配2块以上硬盘。\n\n一块安装 Mac。另外一块安装 Windows，或者作为备份盘（TimeMachine）。如果作为生成环境使用，建议单独配置一块硬盘作为 TimeMachine 的备份盘。\n\n3）如果要独显，最好选 AMD 的卡，可以很好的原生驱动。\n\n4）如果配无线，最好选 Mac 电脑上用过的型号，容易驱动。\n\n\n\n## 二、安装流程\n\n\n### 最简方式：\n\n1、Mac 上 AppStore 中下载 Mac 系统\n\n2、制作安装镜像到 U 盘，可以借助工具 [DiskMaker](http://diskmakerx.com/)\n\n3、制作 EFI 启动分区，可以制作在 U 盘上，也可以制作在硬盘上。\n\n4、放入 EFI 分区启动文件（kext 和 config 配置文件等）\n\n5、设置好 BIOS 选项\n\n6、从 EFI 启动安装\n\n7、完善安装（各硬件驱动）\n\n8、完善 EFI，可将稳定的 EIF 文件，放入 Mac 分区的 EFI 分区。从 Mac 分区启动。\n\n### 注意事项\n\n1、不要随意升级 Mac 新版本，可能造成 kext 不兼容。\n\n2、最好配一块备份盘，用 TimeMachine 备份。TimeMachine 确实好用。\n\n3、一般不要去动 SLE 下的系统kext，也尽量不要把 kext 放入 SLE 下面，补丁 kext 都可以放在 EFI 下的 kext 中调试。\n\n4、千万不要打开『安全与隐私』中的 【**文件保险箱**】功能，该功能与硬件相关，打开后，黑苹果就GG。\n\n5、config 中的硬件 ID 尽量用同一个（同一台机子），新机子第一次安装时，随机生成一个。频繁更改 ID，会让你重新登录 AppleId。\n\n### 可以参考的网站\n\n[tonymacx86 - 国外很活跃度黑苹果网站，还有配置推荐](https://www.tonymacx86.com/)\n\n[pcbeta - 国内活跃度黑苹果网站](http://bbs.pcbeta.com/forum.php?mod=forumdisplay&fid=558&filter=author&orderby=dateline)\n\n[cloverefiboot - clover项目现在地址](https://sourceforge.net/projects/cloverefiboot/)\n\n[RehabMan bitbucket -  RehabMan的 kext下载](https://bitbucket.org/RehabMan/)\n\n[RehabMan git - RehabMan的 kext下载和一些配置信息](https://github.com/RehabMan)\n\n[acidanthera git - 作者写了很多有用的 kext](https://github.com/acidanthera)\n\n\n\n\n\n\n\n","source":"_posts/hackintosh-summary.md","raw":"---\ntitle: Hackintosh 黑苹果总结\ndate: 2018-09-13 18:22:42\ncategories: Hackintosh\ntags: [Hackintosh,黑苹果]\n---\n\n# Hackintosh 黑苹果总结\n\n> 个人用黑苹果开发iOS、java已经有2年多。之所以选择黑苹果，还是因为 Macbook 性能太弱，而且发热严重。2年之久，基本随着 Mac系统更新，也会更新系统（不然无法更新最新的Xcode，纯 java 开发倒是无所谓）。只有一次打开【文件保险箱】功能挂了（下面有说明，千万不要打开该选项），其他时候都没问题。分享其中的一些经验，给愿意尝试黑苹果的朋友。\n\n* 个人黑苹果电脑的配置：\n\n\t电脑一：台式机（i7-87000k 华擎 Z370M-ITX 16G GT750ti）\n\n\t电脑二：台式机（i5-4590 华硕 b85m 8G）\n\n\t电脑三：联想 Y700笔记本（i5-6300 8G GT960M）\n\n* 帮人配的电脑：\n\n\t电脑一：台式机（i7-77000 华擎 deskmini 16G）\n\n\t电脑二：台式机（i5-7500 华硕 B150 8G）\n\n    [EIF 分享-包括以上提到的几种配置机型](https://github.com/yunWJR/Hackintosh_List)\n\n## 一、哪些电脑可以安装黑苹果\n\n### 1、笔记本\n\t\n如何确定笔记本可以安装：\n\t \n1）搜索笔记本型号，看有安装成功的案例没。\n\t\n2）看CPU，如果 CPU 的型号与苹果已经发布的笔记本相同或类似（类似定义为同代 CPU），那么 CPU 应该没问题。\n\n3）看显卡：如果笔记本有独显，那么独显基本是不能使用的，只能使用集显。偶尔少数笔记本有独显，主板不能屏蔽独显，导致无法安装。\n\n4）以上满足的话，可以尝试安装。\n\n### 2、台式机\n\n如何确定台式机可以安装：\n\t \n1）搜索台式机配置，看有安装成功的案例没。\n\t\n2）看CPU，如果CPU的型号与苹果已经发布的笔记本相同或类似（类似定义为同代 CPU），那么 CPU 应该没问题，基本都常见的 intel 台式机 CPU 都可以安装。最新的 AMD 都 CPU 也有大神放出内核，可以安装。\n\n3）看显卡：如果有独显，比较新的 AMD 显卡都可以支持，N 卡一般也支持，有 WebDriver。\n\n4）主板：一般都支持，技嘉的一般支持原生电源管理，比较好。华擎的支持比较到位，曾经几块主板专门出过安装黑苹果的 BIOS，良心。\n\n5）网卡：一般 intel 的有线网卡都支持，无线的话，选择 苹果采用的型号，容易驱动。\n\n### 3、建议\n\n1）如果买新电脑\n\n笔记本可以买没有独显的，因为有也一版用不上。先查下哪些比较好安装的机型，照着买就行。\n\n台式机可以参考 [tonymacx86](https://www.tonymacx86.com/buyersguide/building-a-customac-hackintosh-the-ultimate-buyers-guide/)上的配置，都很容易安装。\n\n2）最好配2块以上硬盘。\n\n一块安装 Mac。另外一块安装 Windows，或者作为备份盘（TimeMachine）。如果作为生成环境使用，建议单独配置一块硬盘作为 TimeMachine 的备份盘。\n\n3）如果要独显，最好选 AMD 的卡，可以很好的原生驱动。\n\n4）如果配无线，最好选 Mac 电脑上用过的型号，容易驱动。\n\n\n\n## 二、安装流程\n\n\n### 最简方式：\n\n1、Mac 上 AppStore 中下载 Mac 系统\n\n2、制作安装镜像到 U 盘，可以借助工具 [DiskMaker](http://diskmakerx.com/)\n\n3、制作 EFI 启动分区，可以制作在 U 盘上，也可以制作在硬盘上。\n\n4、放入 EFI 分区启动文件（kext 和 config 配置文件等）\n\n5、设置好 BIOS 选项\n\n6、从 EFI 启动安装\n\n7、完善安装（各硬件驱动）\n\n8、完善 EFI，可将稳定的 EIF 文件，放入 Mac 分区的 EFI 分区。从 Mac 分区启动。\n\n### 注意事项\n\n1、不要随意升级 Mac 新版本，可能造成 kext 不兼容。\n\n2、最好配一块备份盘，用 TimeMachine 备份。TimeMachine 确实好用。\n\n3、一般不要去动 SLE 下的系统kext，也尽量不要把 kext 放入 SLE 下面，补丁 kext 都可以放在 EFI 下的 kext 中调试。\n\n4、千万不要打开『安全与隐私』中的 【**文件保险箱**】功能，该功能与硬件相关，打开后，黑苹果就GG。\n\n5、config 中的硬件 ID 尽量用同一个（同一台机子），新机子第一次安装时，随机生成一个。频繁更改 ID，会让你重新登录 AppleId。\n\n### 可以参考的网站\n\n[tonymacx86 - 国外很活跃度黑苹果网站，还有配置推荐](https://www.tonymacx86.com/)\n\n[pcbeta - 国内活跃度黑苹果网站](http://bbs.pcbeta.com/forum.php?mod=forumdisplay&fid=558&filter=author&orderby=dateline)\n\n[cloverefiboot - clover项目现在地址](https://sourceforge.net/projects/cloverefiboot/)\n\n[RehabMan bitbucket -  RehabMan的 kext下载](https://bitbucket.org/RehabMan/)\n\n[RehabMan git - RehabMan的 kext下载和一些配置信息](https://github.com/RehabMan)\n\n[acidanthera git - 作者写了很多有用的 kext](https://github.com/acidanthera)\n\n\n\n\n\n\n\n","slug":"hackintosh-summary","published":1,"updated":"2018-09-26T09:21:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn2x9ah60002pb6z65kugxhk","content":"<h1 id=\"Hackintosh-黑苹果总结\"><a href=\"#Hackintosh-黑苹果总结\" class=\"headerlink\" title=\"Hackintosh 黑苹果总结\"></a>Hackintosh 黑苹果总结</h1><blockquote>\n<p>个人用黑苹果开发iOS、java已经有2年多。之所以选择黑苹果，还是因为 Macbook 性能太弱，而且发热严重。2年之久，基本随着 Mac系统更新，也会更新系统（不然无法更新最新的Xcode，纯 java 开发倒是无所谓）。只有一次打开【文件保险箱】功能挂了（下面有说明，千万不要打开该选项），其他时候都没问题。分享其中的一些经验，给愿意尝试黑苹果的朋友。</p>\n</blockquote>\n<ul>\n<li><p>个人黑苹果电脑的配置：</p>\n<p>  电脑一：台式机（i7-87000k 华擎 Z370M-ITX 16G GT750ti）</p>\n<p>  电脑二：台式机（i5-4590 华硕 b85m 8G）</p>\n<p>  电脑三：联想 Y700笔记本（i5-6300 8G GT960M）</p>\n</li>\n<li><p>帮人配的电脑：</p>\n<p>  电脑一：台式机（i7-77000 华擎 deskmini 16G）</p>\n<p>  电脑二：台式机（i5-7500 华硕 B150 8G）</p>\n<p>  <a href=\"https://github.com/yunWJR/Hackintosh_List\" target=\"_blank\" rel=\"noopener\">EIF 分享-包括以上提到的几种配置机型</a></p>\n</li>\n</ul>\n<h2 id=\"一、哪些电脑可以安装黑苹果\"><a href=\"#一、哪些电脑可以安装黑苹果\" class=\"headerlink\" title=\"一、哪些电脑可以安装黑苹果\"></a>一、哪些电脑可以安装黑苹果</h2><h3 id=\"1、笔记本\"><a href=\"#1、笔记本\" class=\"headerlink\" title=\"1、笔记本\"></a>1、笔记本</h3><p>如何确定笔记本可以安装：</p>\n<p>1）搜索笔记本型号，看有安装成功的案例没。</p>\n<p>2）看CPU，如果 CPU 的型号与苹果已经发布的笔记本相同或类似（类似定义为同代 CPU），那么 CPU 应该没问题。</p>\n<p>3）看显卡：如果笔记本有独显，那么独显基本是不能使用的，只能使用集显。偶尔少数笔记本有独显，主板不能屏蔽独显，导致无法安装。</p>\n<p>4）以上满足的话，可以尝试安装。</p>\n<h3 id=\"2、台式机\"><a href=\"#2、台式机\" class=\"headerlink\" title=\"2、台式机\"></a>2、台式机</h3><p>如何确定台式机可以安装：</p>\n<p>1）搜索台式机配置，看有安装成功的案例没。</p>\n<p>2）看CPU，如果CPU的型号与苹果已经发布的笔记本相同或类似（类似定义为同代 CPU），那么 CPU 应该没问题，基本都常见的 intel 台式机 CPU 都可以安装。最新的 AMD 都 CPU 也有大神放出内核，可以安装。</p>\n<p>3）看显卡：如果有独显，比较新的 AMD 显卡都可以支持，N 卡一般也支持，有 WebDriver。</p>\n<p>4）主板：一般都支持，技嘉的一般支持原生电源管理，比较好。华擎的支持比较到位，曾经几块主板专门出过安装黑苹果的 BIOS，良心。</p>\n<p>5）网卡：一般 intel 的有线网卡都支持，无线的话，选择 苹果采用的型号，容易驱动。</p>\n<h3 id=\"3、建议\"><a href=\"#3、建议\" class=\"headerlink\" title=\"3、建议\"></a>3、建议</h3><p>1）如果买新电脑</p>\n<p>笔记本可以买没有独显的，因为有也一版用不上。先查下哪些比较好安装的机型，照着买就行。</p>\n<p>台式机可以参考 <a href=\"https://www.tonymacx86.com/buyersguide/building-a-customac-hackintosh-the-ultimate-buyers-guide/\" target=\"_blank\" rel=\"noopener\">tonymacx86</a>上的配置，都很容易安装。</p>\n<p>2）最好配2块以上硬盘。</p>\n<p>一块安装 Mac。另外一块安装 Windows，或者作为备份盘（TimeMachine）。如果作为生成环境使用，建议单独配置一块硬盘作为 TimeMachine 的备份盘。</p>\n<p>3）如果要独显，最好选 AMD 的卡，可以很好的原生驱动。</p>\n<p>4）如果配无线，最好选 Mac 电脑上用过的型号，容易驱动。</p>\n<h2 id=\"二、安装流程\"><a href=\"#二、安装流程\" class=\"headerlink\" title=\"二、安装流程\"></a>二、安装流程</h2><h3 id=\"最简方式：\"><a href=\"#最简方式：\" class=\"headerlink\" title=\"最简方式：\"></a>最简方式：</h3><p>1、Mac 上 AppStore 中下载 Mac 系统</p>\n<p>2、制作安装镜像到 U 盘，可以借助工具 <a href=\"http://diskmakerx.com/\" target=\"_blank\" rel=\"noopener\">DiskMaker</a></p>\n<p>3、制作 EFI 启动分区，可以制作在 U 盘上，也可以制作在硬盘上。</p>\n<p>4、放入 EFI 分区启动文件（kext 和 config 配置文件等）</p>\n<p>5、设置好 BIOS 选项</p>\n<p>6、从 EFI 启动安装</p>\n<p>7、完善安装（各硬件驱动）</p>\n<p>8、完善 EFI，可将稳定的 EIF 文件，放入 Mac 分区的 EFI 分区。从 Mac 分区启动。</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>1、不要随意升级 Mac 新版本，可能造成 kext 不兼容。</p>\n<p>2、最好配一块备份盘，用 TimeMachine 备份。TimeMachine 确实好用。</p>\n<p>3、一般不要去动 SLE 下的系统kext，也尽量不要把 kext 放入 SLE 下面，补丁 kext 都可以放在 EFI 下的 kext 中调试。</p>\n<p>4、千万不要打开『安全与隐私』中的 【<strong>文件保险箱</strong>】功能，该功能与硬件相关，打开后，黑苹果就GG。</p>\n<p>5、config 中的硬件 ID 尽量用同一个（同一台机子），新机子第一次安装时，随机生成一个。频繁更改 ID，会让你重新登录 AppleId。</p>\n<h3 id=\"可以参考的网站\"><a href=\"#可以参考的网站\" class=\"headerlink\" title=\"可以参考的网站\"></a>可以参考的网站</h3><p><a href=\"https://www.tonymacx86.com/\" target=\"_blank\" rel=\"noopener\">tonymacx86 - 国外很活跃度黑苹果网站，还有配置推荐</a></p>\n<p><a href=\"http://bbs.pcbeta.com/forum.php?mod=forumdisplay&amp;fid=558&amp;filter=author&amp;orderby=dateline\" target=\"_blank\" rel=\"noopener\">pcbeta - 国内活跃度黑苹果网站</a></p>\n<p><a href=\"https://sourceforge.net/projects/cloverefiboot/\" target=\"_blank\" rel=\"noopener\">cloverefiboot - clover项目现在地址</a></p>\n<p><a href=\"https://bitbucket.org/RehabMan/\" target=\"_blank\" rel=\"noopener\">RehabMan bitbucket -  RehabMan的 kext下载</a></p>\n<p><a href=\"https://github.com/RehabMan\" target=\"_blank\" rel=\"noopener\">RehabMan git - RehabMan的 kext下载和一些配置信息</a></p>\n<p><a href=\"https://github.com/acidanthera\" target=\"_blank\" rel=\"noopener\">acidanthera git - 作者写了很多有用的 kext</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Hackintosh-黑苹果总结\"><a href=\"#Hackintosh-黑苹果总结\" class=\"headerlink\" title=\"Hackintosh 黑苹果总结\"></a>Hackintosh 黑苹果总结</h1><blockquote>\n<p>个人用黑苹果开发iOS、java已经有2年多。之所以选择黑苹果，还是因为 Macbook 性能太弱，而且发热严重。2年之久，基本随着 Mac系统更新，也会更新系统（不然无法更新最新的Xcode，纯 java 开发倒是无所谓）。只有一次打开【文件保险箱】功能挂了（下面有说明，千万不要打开该选项），其他时候都没问题。分享其中的一些经验，给愿意尝试黑苹果的朋友。</p>\n</blockquote>\n<ul>\n<li><p>个人黑苹果电脑的配置：</p>\n<p>  电脑一：台式机（i7-87000k 华擎 Z370M-ITX 16G GT750ti）</p>\n<p>  电脑二：台式机（i5-4590 华硕 b85m 8G）</p>\n<p>  电脑三：联想 Y700笔记本（i5-6300 8G GT960M）</p>\n</li>\n<li><p>帮人配的电脑：</p>\n<p>  电脑一：台式机（i7-77000 华擎 deskmini 16G）</p>\n<p>  电脑二：台式机（i5-7500 华硕 B150 8G）</p>\n<p>  <a href=\"https://github.com/yunWJR/Hackintosh_List\" target=\"_blank\" rel=\"noopener\">EIF 分享-包括以上提到的几种配置机型</a></p>\n</li>\n</ul>\n<h2 id=\"一、哪些电脑可以安装黑苹果\"><a href=\"#一、哪些电脑可以安装黑苹果\" class=\"headerlink\" title=\"一、哪些电脑可以安装黑苹果\"></a>一、哪些电脑可以安装黑苹果</h2><h3 id=\"1、笔记本\"><a href=\"#1、笔记本\" class=\"headerlink\" title=\"1、笔记本\"></a>1、笔记本</h3><p>如何确定笔记本可以安装：</p>\n<p>1）搜索笔记本型号，看有安装成功的案例没。</p>\n<p>2）看CPU，如果 CPU 的型号与苹果已经发布的笔记本相同或类似（类似定义为同代 CPU），那么 CPU 应该没问题。</p>\n<p>3）看显卡：如果笔记本有独显，那么独显基本是不能使用的，只能使用集显。偶尔少数笔记本有独显，主板不能屏蔽独显，导致无法安装。</p>\n<p>4）以上满足的话，可以尝试安装。</p>\n<h3 id=\"2、台式机\"><a href=\"#2、台式机\" class=\"headerlink\" title=\"2、台式机\"></a>2、台式机</h3><p>如何确定台式机可以安装：</p>\n<p>1）搜索台式机配置，看有安装成功的案例没。</p>\n<p>2）看CPU，如果CPU的型号与苹果已经发布的笔记本相同或类似（类似定义为同代 CPU），那么 CPU 应该没问题，基本都常见的 intel 台式机 CPU 都可以安装。最新的 AMD 都 CPU 也有大神放出内核，可以安装。</p>\n<p>3）看显卡：如果有独显，比较新的 AMD 显卡都可以支持，N 卡一般也支持，有 WebDriver。</p>\n<p>4）主板：一般都支持，技嘉的一般支持原生电源管理，比较好。华擎的支持比较到位，曾经几块主板专门出过安装黑苹果的 BIOS，良心。</p>\n<p>5）网卡：一般 intel 的有线网卡都支持，无线的话，选择 苹果采用的型号，容易驱动。</p>\n<h3 id=\"3、建议\"><a href=\"#3、建议\" class=\"headerlink\" title=\"3、建议\"></a>3、建议</h3><p>1）如果买新电脑</p>\n<p>笔记本可以买没有独显的，因为有也一版用不上。先查下哪些比较好安装的机型，照着买就行。</p>\n<p>台式机可以参考 <a href=\"https://www.tonymacx86.com/buyersguide/building-a-customac-hackintosh-the-ultimate-buyers-guide/\" target=\"_blank\" rel=\"noopener\">tonymacx86</a>上的配置，都很容易安装。</p>\n<p>2）最好配2块以上硬盘。</p>\n<p>一块安装 Mac。另外一块安装 Windows，或者作为备份盘（TimeMachine）。如果作为生成环境使用，建议单独配置一块硬盘作为 TimeMachine 的备份盘。</p>\n<p>3）如果要独显，最好选 AMD 的卡，可以很好的原生驱动。</p>\n<p>4）如果配无线，最好选 Mac 电脑上用过的型号，容易驱动。</p>\n<h2 id=\"二、安装流程\"><a href=\"#二、安装流程\" class=\"headerlink\" title=\"二、安装流程\"></a>二、安装流程</h2><h3 id=\"最简方式：\"><a href=\"#最简方式：\" class=\"headerlink\" title=\"最简方式：\"></a>最简方式：</h3><p>1、Mac 上 AppStore 中下载 Mac 系统</p>\n<p>2、制作安装镜像到 U 盘，可以借助工具 <a href=\"http://diskmakerx.com/\" target=\"_blank\" rel=\"noopener\">DiskMaker</a></p>\n<p>3、制作 EFI 启动分区，可以制作在 U 盘上，也可以制作在硬盘上。</p>\n<p>4、放入 EFI 分区启动文件（kext 和 config 配置文件等）</p>\n<p>5、设置好 BIOS 选项</p>\n<p>6、从 EFI 启动安装</p>\n<p>7、完善安装（各硬件驱动）</p>\n<p>8、完善 EFI，可将稳定的 EIF 文件，放入 Mac 分区的 EFI 分区。从 Mac 分区启动。</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>1、不要随意升级 Mac 新版本，可能造成 kext 不兼容。</p>\n<p>2、最好配一块备份盘，用 TimeMachine 备份。TimeMachine 确实好用。</p>\n<p>3、一般不要去动 SLE 下的系统kext，也尽量不要把 kext 放入 SLE 下面，补丁 kext 都可以放在 EFI 下的 kext 中调试。</p>\n<p>4、千万不要打开『安全与隐私』中的 【<strong>文件保险箱</strong>】功能，该功能与硬件相关，打开后，黑苹果就GG。</p>\n<p>5、config 中的硬件 ID 尽量用同一个（同一台机子），新机子第一次安装时，随机生成一个。频繁更改 ID，会让你重新登录 AppleId。</p>\n<h3 id=\"可以参考的网站\"><a href=\"#可以参考的网站\" class=\"headerlink\" title=\"可以参考的网站\"></a>可以参考的网站</h3><p><a href=\"https://www.tonymacx86.com/\" target=\"_blank\" rel=\"noopener\">tonymacx86 - 国外很活跃度黑苹果网站，还有配置推荐</a></p>\n<p><a href=\"http://bbs.pcbeta.com/forum.php?mod=forumdisplay&amp;fid=558&amp;filter=author&amp;orderby=dateline\" target=\"_blank\" rel=\"noopener\">pcbeta - 国内活跃度黑苹果网站</a></p>\n<p><a href=\"https://sourceforge.net/projects/cloverefiboot/\" target=\"_blank\" rel=\"noopener\">cloverefiboot - clover项目现在地址</a></p>\n<p><a href=\"https://bitbucket.org/RehabMan/\" target=\"_blank\" rel=\"noopener\">RehabMan bitbucket -  RehabMan的 kext下载</a></p>\n<p><a href=\"https://github.com/RehabMan\" target=\"_blank\" rel=\"noopener\">RehabMan git - RehabMan的 kext下载和一些配置信息</a></p>\n<p><a href=\"https://github.com/acidanthera\" target=\"_blank\" rel=\"noopener\">acidanthera git - 作者写了很多有用的 kext</a></p>\n"},{"title":"iOS11 适配","date":"2018-04-17T08:13:34.000Z","_content":"\n# iOS11 适配\n\n## 1、启动页\n\n如果启动页采用 Launch Imaged Sourc，则需要添加iPhoneX的启动图，不然整个 App 上下将有部分不能显示区域。\n\n启动图的尺寸为：1125\\*2436px 即：375\\*812@3x\n\n## 2、safeArea\n\niOS11为UIViewController和UIView增加了两个新的属性safeAreaInsets和safeAreaLayoutGuide, 通过这两个属性我们可以获得安全区域的范围, \n我们要做的是让那些不能被遮挡的内容和控件在安全区域范围内显示,\n\n- safeAreaInsets 适用于手动计算.\n- safeAreaLayoutGuide 适用于自动布局.\n\n### 手动布局\n新增方法，用于在 SafeArea 改变时，重新布局\n- (void)viewSafeAreaInsetsDidChange;\n\n## 3、Masonry\n\n**由于引入了 safeArea，需要修改topLayoutGuide 和 bottomLayoutGuide。**\n\n```\n        // 对于\n        make.top.equalTo(self.topLayoutGuide);\n        make.bottom.equalTo(self.bottomLayoutGuide);\n        \n        // 可直接改为\n        make.top.equalTo(self.view);\n        make.bottom.equalTo(self.view);\n```\n\n**针对 iOS11,可以引入 safeArea**\n\n```\n        if (@available(iOS 11.0, *)) {\n            // crash \n            // make.edges.equalTo(self.view.mas_safeAreaLayoutGuide);\n            \n            // error: self.view.mas_safeAreaLayoutGuide is self.view.mas_safeAreaLayoutGuideBottom\n\n            //ok\n            make.left.equalTo(self.view.mas_safeAreaLayoutGuideLeft);\n            make.right.equalTo(self.view.mas_safeAreaLayoutGuideRight);\n            make.top.equalTo(self.view.mas_safeAreaLayoutGuideTop);\n            make.bottom.equalTo(self.view.mas_safeAreaLayoutGuideBottom);\n        } else {\n            make.edges.equalTo(self.view);\n        }\n```\n\n**新增的 safeArea示例**\n\n```\n    [view1 mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.edges.equalTo(self.view.mas_safeArea).inset(10.0);\n    }];\n    \n    [view2 mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.center.equalTo(self.view.mas_safeArea);\n        make.width.height.equalTo(self.view.mas_safeArea).sizeOffset(CGSizeMake(- 40.0, - 40.0));\n    }];\n    \n    [view3 mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.center.equalTo(self.view.mas_safeArea);\n        make.width.equalTo(self.view.mas_safeArea).sizeOffset(CGSizeMake(- 60.0, - 60.0));\n        make.height.equalTo(self.view.mas_safeArea).sizeOffset(CGSizeMake(- 60.0, - 60.0));\n    }];\n    \n    [leftTopView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.left.top.equalTo(self.view.mas_safeArea);\n        make.width.height.equalTo(@(size));\n    }];\n    \n    [rightTopView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.right.equalTo(self.view.mas_safeAreaRight);\n        make.top.equalTo(self.view.mas_safeAreaTop);\n        make.width.height.equalTo(@(size));\n    }];\n    \n    [leftBottomView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.left.equalTo(self.view.mas_safeAreaLeft);\n        make.bottom.equalTo(self.view.mas_safeAreaBottom);\n        make.width.height.equalTo(@(size));\n    }];\n    \n    [rightBottomView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.right.bottom.equalTo(self.view.mas_safeArea);\n        make.width.height.equalTo(@(size));\n    }];\n    \n    [leftView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.left.centerY.equalTo(self.view.mas_safeArea);\n        make.width.height.equalTo(@(size));\n    }];\n    \n    [rightView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.right.equalTo(self.view.mas_safeAreaRight);\n        make.centerY.equalTo(self.view.mas_safeAreaCenterY);\n        make.width.height.equalTo(@(size));\n    }];\n    \n    [topView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.view.mas_safeAreaTop);\n        make.centerX.equalTo(self.view.mas_safeAreaCenterX);\n        make.width.height.equalTo(@(size));\n    }];\n    \n    [bottomView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.bottom.centerX.equalTo(self.view.mas_safeArea);\n        make.width.height.equalTo(@(size));\n    }];\n    \n    [centerView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.center.equalTo(self.view.mas_safeArea);\n        make.width.height.equalTo(@(size));\n    }];\n```\n\n\n\n## 4、prefersLargeTitles\n\n该属性简单理解为**大标题**，当设置为 YES 时，导航栏高度将变为：96px，正常情况下为：44px；\n\n应该如果要设置该属性，则需要在实例 Vc 中去获取导航栏的高度。\n\n如：\n\n```\nself.navigationController.navigationBar.prefersLargeTitles = YES;\nself.navigationItem.largeTitleDisplayMode = UINavigationItemLargeTitleDisplayModeAutomatic;\n```\n\n![](http://ot8psglzx.bkt.clouddn.com/1281817-20171120105905915-716853123.png?imageMogr2/thumbnail/!70p)\n\n## 5、UITableView\n\nUITableView莫名奇妙的偏移20pt或者64pt，\n\n还有某些界面UITableView的sectionHeader、sectionFooter高度与设置不符的问题。\n\n在iOS11中如果不实现\n\n```\n- tableView: viewForHeaderInSection: \n- tableView: viewForFooterInSection:\n```\n\n则 \n\n```\n- tableView: heightForHeaderInSection: \n- tableView: heightForFooterInSection:\n```\n\n不会被调用，导致它们都变成了默认高度。\n这是因为tableView在iOS11默认使用Self-Sizing，UITableView的estimatedRowHeight、estimatedSectionHeaderHeight、 estimatedSectionFooterHeight三个高度估算属性由默认的0变成了UITableViewAutomaticDimension。\n\n解决办法：\n\n1. 实现对应的方法\n\n2. 三个属性设为0。\n\n\n","source":"_posts/iOS-adjust-iOS11.md","raw":"---\ntitle: iOS11 适配\ndate: 2018-04-17 16:13:34\ncategories: iOS\ntags: [iOS,Objective-C]\n---\n\n# iOS11 适配\n\n## 1、启动页\n\n如果启动页采用 Launch Imaged Sourc，则需要添加iPhoneX的启动图，不然整个 App 上下将有部分不能显示区域。\n\n启动图的尺寸为：1125\\*2436px 即：375\\*812@3x\n\n## 2、safeArea\n\niOS11为UIViewController和UIView增加了两个新的属性safeAreaInsets和safeAreaLayoutGuide, 通过这两个属性我们可以获得安全区域的范围, \n我们要做的是让那些不能被遮挡的内容和控件在安全区域范围内显示,\n\n- safeAreaInsets 适用于手动计算.\n- safeAreaLayoutGuide 适用于自动布局.\n\n### 手动布局\n新增方法，用于在 SafeArea 改变时，重新布局\n- (void)viewSafeAreaInsetsDidChange;\n\n## 3、Masonry\n\n**由于引入了 safeArea，需要修改topLayoutGuide 和 bottomLayoutGuide。**\n\n```\n        // 对于\n        make.top.equalTo(self.topLayoutGuide);\n        make.bottom.equalTo(self.bottomLayoutGuide);\n        \n        // 可直接改为\n        make.top.equalTo(self.view);\n        make.bottom.equalTo(self.view);\n```\n\n**针对 iOS11,可以引入 safeArea**\n\n```\n        if (@available(iOS 11.0, *)) {\n            // crash \n            // make.edges.equalTo(self.view.mas_safeAreaLayoutGuide);\n            \n            // error: self.view.mas_safeAreaLayoutGuide is self.view.mas_safeAreaLayoutGuideBottom\n\n            //ok\n            make.left.equalTo(self.view.mas_safeAreaLayoutGuideLeft);\n            make.right.equalTo(self.view.mas_safeAreaLayoutGuideRight);\n            make.top.equalTo(self.view.mas_safeAreaLayoutGuideTop);\n            make.bottom.equalTo(self.view.mas_safeAreaLayoutGuideBottom);\n        } else {\n            make.edges.equalTo(self.view);\n        }\n```\n\n**新增的 safeArea示例**\n\n```\n    [view1 mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.edges.equalTo(self.view.mas_safeArea).inset(10.0);\n    }];\n    \n    [view2 mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.center.equalTo(self.view.mas_safeArea);\n        make.width.height.equalTo(self.view.mas_safeArea).sizeOffset(CGSizeMake(- 40.0, - 40.0));\n    }];\n    \n    [view3 mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.center.equalTo(self.view.mas_safeArea);\n        make.width.equalTo(self.view.mas_safeArea).sizeOffset(CGSizeMake(- 60.0, - 60.0));\n        make.height.equalTo(self.view.mas_safeArea).sizeOffset(CGSizeMake(- 60.0, - 60.0));\n    }];\n    \n    [leftTopView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.left.top.equalTo(self.view.mas_safeArea);\n        make.width.height.equalTo(@(size));\n    }];\n    \n    [rightTopView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.right.equalTo(self.view.mas_safeAreaRight);\n        make.top.equalTo(self.view.mas_safeAreaTop);\n        make.width.height.equalTo(@(size));\n    }];\n    \n    [leftBottomView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.left.equalTo(self.view.mas_safeAreaLeft);\n        make.bottom.equalTo(self.view.mas_safeAreaBottom);\n        make.width.height.equalTo(@(size));\n    }];\n    \n    [rightBottomView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.right.bottom.equalTo(self.view.mas_safeArea);\n        make.width.height.equalTo(@(size));\n    }];\n    \n    [leftView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.left.centerY.equalTo(self.view.mas_safeArea);\n        make.width.height.equalTo(@(size));\n    }];\n    \n    [rightView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.right.equalTo(self.view.mas_safeAreaRight);\n        make.centerY.equalTo(self.view.mas_safeAreaCenterY);\n        make.width.height.equalTo(@(size));\n    }];\n    \n    [topView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(self.view.mas_safeAreaTop);\n        make.centerX.equalTo(self.view.mas_safeAreaCenterX);\n        make.width.height.equalTo(@(size));\n    }];\n    \n    [bottomView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.bottom.centerX.equalTo(self.view.mas_safeArea);\n        make.width.height.equalTo(@(size));\n    }];\n    \n    [centerView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.center.equalTo(self.view.mas_safeArea);\n        make.width.height.equalTo(@(size));\n    }];\n```\n\n\n\n## 4、prefersLargeTitles\n\n该属性简单理解为**大标题**，当设置为 YES 时，导航栏高度将变为：96px，正常情况下为：44px；\n\n应该如果要设置该属性，则需要在实例 Vc 中去获取导航栏的高度。\n\n如：\n\n```\nself.navigationController.navigationBar.prefersLargeTitles = YES;\nself.navigationItem.largeTitleDisplayMode = UINavigationItemLargeTitleDisplayModeAutomatic;\n```\n\n![](http://ot8psglzx.bkt.clouddn.com/1281817-20171120105905915-716853123.png?imageMogr2/thumbnail/!70p)\n\n## 5、UITableView\n\nUITableView莫名奇妙的偏移20pt或者64pt，\n\n还有某些界面UITableView的sectionHeader、sectionFooter高度与设置不符的问题。\n\n在iOS11中如果不实现\n\n```\n- tableView: viewForHeaderInSection: \n- tableView: viewForFooterInSection:\n```\n\n则 \n\n```\n- tableView: heightForHeaderInSection: \n- tableView: heightForFooterInSection:\n```\n\n不会被调用，导致它们都变成了默认高度。\n这是因为tableView在iOS11默认使用Self-Sizing，UITableView的estimatedRowHeight、estimatedSectionHeaderHeight、 estimatedSectionFooterHeight三个高度估算属性由默认的0变成了UITableViewAutomaticDimension。\n\n解决办法：\n\n1. 实现对应的方法\n\n2. 三个属性设为0。\n\n\n","slug":"iOS-adjust-iOS11","published":1,"updated":"2018-09-26T09:03:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn2x9ah90006pb6zg1w87n7s","content":"<h1 id=\"iOS11-适配\"><a href=\"#iOS11-适配\" class=\"headerlink\" title=\"iOS11 适配\"></a>iOS11 适配</h1><h2 id=\"1、启动页\"><a href=\"#1、启动页\" class=\"headerlink\" title=\"1、启动页\"></a>1、启动页</h2><p>如果启动页采用 Launch Imaged Sourc，则需要添加iPhoneX的启动图，不然整个 App 上下将有部分不能显示区域。</p>\n<p>启动图的尺寸为：1125*2436px 即：375*812@3x</p>\n<h2 id=\"2、safeArea\"><a href=\"#2、safeArea\" class=\"headerlink\" title=\"2、safeArea\"></a>2、safeArea</h2><p>iOS11为UIViewController和UIView增加了两个新的属性safeAreaInsets和safeAreaLayoutGuide, 通过这两个属性我们可以获得安全区域的范围,<br>我们要做的是让那些不能被遮挡的内容和控件在安全区域范围内显示,</p>\n<ul>\n<li>safeAreaInsets 适用于手动计算.</li>\n<li>safeAreaLayoutGuide 适用于自动布局.</li>\n</ul>\n<h3 id=\"手动布局\"><a href=\"#手动布局\" class=\"headerlink\" title=\"手动布局\"></a>手动布局</h3><p>新增方法，用于在 SafeArea 改变时，重新布局</p>\n<ul>\n<li>(void)viewSafeAreaInsetsDidChange;</li>\n</ul>\n<h2 id=\"3、Masonry\"><a href=\"#3、Masonry\" class=\"headerlink\" title=\"3、Masonry\"></a>3、Masonry</h2><p><strong>由于引入了 safeArea，需要修改topLayoutGuide 和 bottomLayoutGuide。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 对于</span><br><span class=\"line\">make.top.equalTo(self.topLayoutGuide);</span><br><span class=\"line\">make.bottom.equalTo(self.bottomLayoutGuide);</span><br><span class=\"line\"></span><br><span class=\"line\">// 可直接改为</span><br><span class=\"line\">make.top.equalTo(self.view);</span><br><span class=\"line\">make.bottom.equalTo(self.view);</span><br></pre></td></tr></table></figure>\n<p><strong>针对 iOS11,可以引入 safeArea</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (@available(iOS 11.0, *)) &#123;</span><br><span class=\"line\">    // crash </span><br><span class=\"line\">    // make.edges.equalTo(self.view.mas_safeAreaLayoutGuide);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // error: self.view.mas_safeAreaLayoutGuide is self.view.mas_safeAreaLayoutGuideBottom</span><br><span class=\"line\"></span><br><span class=\"line\">    //ok</span><br><span class=\"line\">    make.left.equalTo(self.view.mas_safeAreaLayoutGuideLeft);</span><br><span class=\"line\">    make.right.equalTo(self.view.mas_safeAreaLayoutGuideRight);</span><br><span class=\"line\">    make.top.equalTo(self.view.mas_safeAreaLayoutGuideTop);</span><br><span class=\"line\">    make.bottom.equalTo(self.view.mas_safeAreaLayoutGuideBottom);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    make.edges.equalTo(self.view);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>新增的 safeArea示例</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[view1 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.edges.equalTo(self.view.mas_safeArea).inset(10.0);</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[view2 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.center.equalTo(self.view.mas_safeArea);</span><br><span class=\"line\">    make.width.height.equalTo(self.view.mas_safeArea).sizeOffset(CGSizeMake(- 40.0, - 40.0));</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[view3 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.center.equalTo(self.view.mas_safeArea);</span><br><span class=\"line\">    make.width.equalTo(self.view.mas_safeArea).sizeOffset(CGSizeMake(- 60.0, - 60.0));</span><br><span class=\"line\">    make.height.equalTo(self.view.mas_safeArea).sizeOffset(CGSizeMake(- 60.0, - 60.0));</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[leftTopView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.left.top.equalTo(self.view.mas_safeArea);</span><br><span class=\"line\">    make.width.height.equalTo(@(size));</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[rightTopView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.right.equalTo(self.view.mas_safeAreaRight);</span><br><span class=\"line\">    make.top.equalTo(self.view.mas_safeAreaTop);</span><br><span class=\"line\">    make.width.height.equalTo(@(size));</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[leftBottomView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.left.equalTo(self.view.mas_safeAreaLeft);</span><br><span class=\"line\">    make.bottom.equalTo(self.view.mas_safeAreaBottom);</span><br><span class=\"line\">    make.width.height.equalTo(@(size));</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[rightBottomView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.right.bottom.equalTo(self.view.mas_safeArea);</span><br><span class=\"line\">    make.width.height.equalTo(@(size));</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[leftView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.left.centerY.equalTo(self.view.mas_safeArea);</span><br><span class=\"line\">    make.width.height.equalTo(@(size));</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[rightView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.right.equalTo(self.view.mas_safeAreaRight);</span><br><span class=\"line\">    make.centerY.equalTo(self.view.mas_safeAreaCenterY);</span><br><span class=\"line\">    make.width.height.equalTo(@(size));</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[topView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.top.equalTo(self.view.mas_safeAreaTop);</span><br><span class=\"line\">    make.centerX.equalTo(self.view.mas_safeAreaCenterX);</span><br><span class=\"line\">    make.width.height.equalTo(@(size));</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[bottomView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.bottom.centerX.equalTo(self.view.mas_safeArea);</span><br><span class=\"line\">    make.width.height.equalTo(@(size));</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[centerView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.center.equalTo(self.view.mas_safeArea);</span><br><span class=\"line\">    make.width.height.equalTo(@(size));</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、prefersLargeTitles\"><a href=\"#4、prefersLargeTitles\" class=\"headerlink\" title=\"4、prefersLargeTitles\"></a>4、prefersLargeTitles</h2><p>该属性简单理解为<strong>大标题</strong>，当设置为 YES 时，导航栏高度将变为：96px，正常情况下为：44px；</p>\n<p>应该如果要设置该属性，则需要在实例 Vc 中去获取导航栏的高度。</p>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.navigationController.navigationBar.prefersLargeTitles = YES;</span><br><span class=\"line\">self.navigationItem.largeTitleDisplayMode = UINavigationItemLargeTitleDisplayModeAutomatic;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ot8psglzx.bkt.clouddn.com/1281817-20171120105905915-716853123.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<h2 id=\"5、UITableView\"><a href=\"#5、UITableView\" class=\"headerlink\" title=\"5、UITableView\"></a>5、UITableView</h2><p>UITableView莫名奇妙的偏移20pt或者64pt，</p>\n<p>还有某些界面UITableView的sectionHeader、sectionFooter高度与设置不符的问题。</p>\n<p>在iOS11中如果不实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- tableView: viewForHeaderInSection: </span><br><span class=\"line\">- tableView: viewForFooterInSection:</span><br></pre></td></tr></table></figure>\n<p>则 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- tableView: heightForHeaderInSection: </span><br><span class=\"line\">- tableView: heightForFooterInSection:</span><br></pre></td></tr></table></figure>\n<p>不会被调用，导致它们都变成了默认高度。<br>这是因为tableView在iOS11默认使用Self-Sizing，UITableView的estimatedRowHeight、estimatedSectionHeaderHeight、 estimatedSectionFooterHeight三个高度估算属性由默认的0变成了UITableViewAutomaticDimension。</p>\n<p>解决办法：</p>\n<ol>\n<li><p>实现对应的方法</p>\n</li>\n<li><p>三个属性设为0。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"iOS11-适配\"><a href=\"#iOS11-适配\" class=\"headerlink\" title=\"iOS11 适配\"></a>iOS11 适配</h1><h2 id=\"1、启动页\"><a href=\"#1、启动页\" class=\"headerlink\" title=\"1、启动页\"></a>1、启动页</h2><p>如果启动页采用 Launch Imaged Sourc，则需要添加iPhoneX的启动图，不然整个 App 上下将有部分不能显示区域。</p>\n<p>启动图的尺寸为：1125*2436px 即：375*812@3x</p>\n<h2 id=\"2、safeArea\"><a href=\"#2、safeArea\" class=\"headerlink\" title=\"2、safeArea\"></a>2、safeArea</h2><p>iOS11为UIViewController和UIView增加了两个新的属性safeAreaInsets和safeAreaLayoutGuide, 通过这两个属性我们可以获得安全区域的范围,<br>我们要做的是让那些不能被遮挡的内容和控件在安全区域范围内显示,</p>\n<ul>\n<li>safeAreaInsets 适用于手动计算.</li>\n<li>safeAreaLayoutGuide 适用于自动布局.</li>\n</ul>\n<h3 id=\"手动布局\"><a href=\"#手动布局\" class=\"headerlink\" title=\"手动布局\"></a>手动布局</h3><p>新增方法，用于在 SafeArea 改变时，重新布局</p>\n<ul>\n<li>(void)viewSafeAreaInsetsDidChange;</li>\n</ul>\n<h2 id=\"3、Masonry\"><a href=\"#3、Masonry\" class=\"headerlink\" title=\"3、Masonry\"></a>3、Masonry</h2><p><strong>由于引入了 safeArea，需要修改topLayoutGuide 和 bottomLayoutGuide。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 对于</span><br><span class=\"line\">make.top.equalTo(self.topLayoutGuide);</span><br><span class=\"line\">make.bottom.equalTo(self.bottomLayoutGuide);</span><br><span class=\"line\"></span><br><span class=\"line\">// 可直接改为</span><br><span class=\"line\">make.top.equalTo(self.view);</span><br><span class=\"line\">make.bottom.equalTo(self.view);</span><br></pre></td></tr></table></figure>\n<p><strong>针对 iOS11,可以引入 safeArea</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (@available(iOS 11.0, *)) &#123;</span><br><span class=\"line\">    // crash </span><br><span class=\"line\">    // make.edges.equalTo(self.view.mas_safeAreaLayoutGuide);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // error: self.view.mas_safeAreaLayoutGuide is self.view.mas_safeAreaLayoutGuideBottom</span><br><span class=\"line\"></span><br><span class=\"line\">    //ok</span><br><span class=\"line\">    make.left.equalTo(self.view.mas_safeAreaLayoutGuideLeft);</span><br><span class=\"line\">    make.right.equalTo(self.view.mas_safeAreaLayoutGuideRight);</span><br><span class=\"line\">    make.top.equalTo(self.view.mas_safeAreaLayoutGuideTop);</span><br><span class=\"line\">    make.bottom.equalTo(self.view.mas_safeAreaLayoutGuideBottom);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    make.edges.equalTo(self.view);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>新增的 safeArea示例</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[view1 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.edges.equalTo(self.view.mas_safeArea).inset(10.0);</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[view2 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.center.equalTo(self.view.mas_safeArea);</span><br><span class=\"line\">    make.width.height.equalTo(self.view.mas_safeArea).sizeOffset(CGSizeMake(- 40.0, - 40.0));</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[view3 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.center.equalTo(self.view.mas_safeArea);</span><br><span class=\"line\">    make.width.equalTo(self.view.mas_safeArea).sizeOffset(CGSizeMake(- 60.0, - 60.0));</span><br><span class=\"line\">    make.height.equalTo(self.view.mas_safeArea).sizeOffset(CGSizeMake(- 60.0, - 60.0));</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[leftTopView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.left.top.equalTo(self.view.mas_safeArea);</span><br><span class=\"line\">    make.width.height.equalTo(@(size));</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[rightTopView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.right.equalTo(self.view.mas_safeAreaRight);</span><br><span class=\"line\">    make.top.equalTo(self.view.mas_safeAreaTop);</span><br><span class=\"line\">    make.width.height.equalTo(@(size));</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[leftBottomView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.left.equalTo(self.view.mas_safeAreaLeft);</span><br><span class=\"line\">    make.bottom.equalTo(self.view.mas_safeAreaBottom);</span><br><span class=\"line\">    make.width.height.equalTo(@(size));</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[rightBottomView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.right.bottom.equalTo(self.view.mas_safeArea);</span><br><span class=\"line\">    make.width.height.equalTo(@(size));</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[leftView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.left.centerY.equalTo(self.view.mas_safeArea);</span><br><span class=\"line\">    make.width.height.equalTo(@(size));</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[rightView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.right.equalTo(self.view.mas_safeAreaRight);</span><br><span class=\"line\">    make.centerY.equalTo(self.view.mas_safeAreaCenterY);</span><br><span class=\"line\">    make.width.height.equalTo(@(size));</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[topView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.top.equalTo(self.view.mas_safeAreaTop);</span><br><span class=\"line\">    make.centerX.equalTo(self.view.mas_safeAreaCenterX);</span><br><span class=\"line\">    make.width.height.equalTo(@(size));</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[bottomView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.bottom.centerX.equalTo(self.view.mas_safeArea);</span><br><span class=\"line\">    make.width.height.equalTo(@(size));</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">[centerView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">    make.center.equalTo(self.view.mas_safeArea);</span><br><span class=\"line\">    make.width.height.equalTo(@(size));</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、prefersLargeTitles\"><a href=\"#4、prefersLargeTitles\" class=\"headerlink\" title=\"4、prefersLargeTitles\"></a>4、prefersLargeTitles</h2><p>该属性简单理解为<strong>大标题</strong>，当设置为 YES 时，导航栏高度将变为：96px，正常情况下为：44px；</p>\n<p>应该如果要设置该属性，则需要在实例 Vc 中去获取导航栏的高度。</p>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.navigationController.navigationBar.prefersLargeTitles = YES;</span><br><span class=\"line\">self.navigationItem.largeTitleDisplayMode = UINavigationItemLargeTitleDisplayModeAutomatic;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ot8psglzx.bkt.clouddn.com/1281817-20171120105905915-716853123.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<h2 id=\"5、UITableView\"><a href=\"#5、UITableView\" class=\"headerlink\" title=\"5、UITableView\"></a>5、UITableView</h2><p>UITableView莫名奇妙的偏移20pt或者64pt，</p>\n<p>还有某些界面UITableView的sectionHeader、sectionFooter高度与设置不符的问题。</p>\n<p>在iOS11中如果不实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- tableView: viewForHeaderInSection: </span><br><span class=\"line\">- tableView: viewForFooterInSection:</span><br></pre></td></tr></table></figure>\n<p>则 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- tableView: heightForHeaderInSection: </span><br><span class=\"line\">- tableView: heightForFooterInSection:</span><br></pre></td></tr></table></figure>\n<p>不会被调用，导致它们都变成了默认高度。<br>这是因为tableView在iOS11默认使用Self-Sizing，UITableView的estimatedRowHeight、estimatedSectionHeaderHeight、 estimatedSectionFooterHeight三个高度估算属性由默认的0变成了UITableViewAutomaticDimension。</p>\n<p>解决办法：</p>\n<ol>\n<li><p>实现对应的方法</p>\n</li>\n<li><p>三个属性设为0。</p>\n</li>\n</ol>\n"},{"title":"发布线上安装iOS应用（ipa）","date":"2018-05-21T09:38:48.000Z","_content":"\n# 发布线上安装iOS应用（ipa）\n\n发布 ipa 文件到线上，通过itms-services 协议访问安装。\n\n### 一、适用对象\n\n#### 1. 企业证书，直接安装\n\n> 所有人都可以下载安装，用户打开前，需要信任手动信任企业证书。\n\n#### 2. 个人/公司证书，给添加过 UDID 的设备安装\n\n> 适用于部分设备安装（添加了 UDID 的设备）\n\n### 二、操作步骤\n\n本人采用Xcode 生成安装文件，步骤如下：\n\n#### 1. 打开Xcode，的 Organizer，选择需要发布的应用\n \n#### 2. 点击 Export，选择 Ad Hoc，点击 Next\n\n#### 3. 勾选如图选项：点击 Next\n\n![](http://ot8psglzx.bkt.clouddn.com/WX20180521-170859.png?imageMogr2/thumbnail/!70p)\n\n#### 4. 填写相关项，需要 https 协议的链接，可用 github 仓库。\n\n![](http://ot8psglzx.bkt.clouddn.com/WX20180521-171144.png?imageMogr2/thumbnail/!70p)\n\n#### 5. 根据情况执行后续操作，得到manifest.plist文件。上传到服务器，可选择 git。\n\n#### 6. 生成下载地址：如：\n\n```\nitms-services://?action=download-manifest&url=https://raw.githubusercontent.com/xxx/dis_ipa/master/manifest.plist\n```\n\n#### 7. 手机上用 Safari 打开以上链接，进行安装。\n","source":"_posts/iOS-distribution-ips-on-net.md","raw":"---\ntitle: 发布线上安装iOS应用（ipa）\ndate: 2018-05-21 17:38:48\ncategories: iOS\ntags: [iOS,Objective-C,总结]\n---\n\n# 发布线上安装iOS应用（ipa）\n\n发布 ipa 文件到线上，通过itms-services 协议访问安装。\n\n### 一、适用对象\n\n#### 1. 企业证书，直接安装\n\n> 所有人都可以下载安装，用户打开前，需要信任手动信任企业证书。\n\n#### 2. 个人/公司证书，给添加过 UDID 的设备安装\n\n> 适用于部分设备安装（添加了 UDID 的设备）\n\n### 二、操作步骤\n\n本人采用Xcode 生成安装文件，步骤如下：\n\n#### 1. 打开Xcode，的 Organizer，选择需要发布的应用\n \n#### 2. 点击 Export，选择 Ad Hoc，点击 Next\n\n#### 3. 勾选如图选项：点击 Next\n\n![](http://ot8psglzx.bkt.clouddn.com/WX20180521-170859.png?imageMogr2/thumbnail/!70p)\n\n#### 4. 填写相关项，需要 https 协议的链接，可用 github 仓库。\n\n![](http://ot8psglzx.bkt.clouddn.com/WX20180521-171144.png?imageMogr2/thumbnail/!70p)\n\n#### 5. 根据情况执行后续操作，得到manifest.plist文件。上传到服务器，可选择 git。\n\n#### 6. 生成下载地址：如：\n\n```\nitms-services://?action=download-manifest&url=https://raw.githubusercontent.com/xxx/dis_ipa/master/manifest.plist\n```\n\n#### 7. 手机上用 Safari 打开以上链接，进行安装。\n","slug":"iOS-distribution-ips-on-net","published":1,"updated":"2018-10-10T08:21:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn2x9aha0007pb6zsp5reo3i","content":"<h1 id=\"发布线上安装iOS应用（ipa）\"><a href=\"#发布线上安装iOS应用（ipa）\" class=\"headerlink\" title=\"发布线上安装iOS应用（ipa）\"></a>发布线上安装iOS应用（ipa）</h1><p>发布 ipa 文件到线上，通过itms-services 协议访问安装。</p>\n<h3 id=\"一、适用对象\"><a href=\"#一、适用对象\" class=\"headerlink\" title=\"一、适用对象\"></a>一、适用对象</h3><h4 id=\"1-企业证书，直接安装\"><a href=\"#1-企业证书，直接安装\" class=\"headerlink\" title=\"1. 企业证书，直接安装\"></a>1. 企业证书，直接安装</h4><blockquote>\n<p>所有人都可以下载安装，用户打开前，需要信任手动信任企业证书。</p>\n</blockquote>\n<h4 id=\"2-个人-公司证书，给添加过-UDID-的设备安装\"><a href=\"#2-个人-公司证书，给添加过-UDID-的设备安装\" class=\"headerlink\" title=\"2. 个人/公司证书，给添加过 UDID 的设备安装\"></a>2. 个人/公司证书，给添加过 UDID 的设备安装</h4><blockquote>\n<p>适用于部分设备安装（添加了 UDID 的设备）</p>\n</blockquote>\n<h3 id=\"二、操作步骤\"><a href=\"#二、操作步骤\" class=\"headerlink\" title=\"二、操作步骤\"></a>二、操作步骤</h3><p>本人采用Xcode 生成安装文件，步骤如下：</p>\n<h4 id=\"1-打开Xcode，的-Organizer，选择需要发布的应用\"><a href=\"#1-打开Xcode，的-Organizer，选择需要发布的应用\" class=\"headerlink\" title=\"1. 打开Xcode，的 Organizer，选择需要发布的应用\"></a>1. 打开Xcode，的 Organizer，选择需要发布的应用</h4><h4 id=\"2-点击-Export，选择-Ad-Hoc，点击-Next\"><a href=\"#2-点击-Export，选择-Ad-Hoc，点击-Next\" class=\"headerlink\" title=\"2. 点击 Export，选择 Ad Hoc，点击 Next\"></a>2. 点击 Export，选择 Ad Hoc，点击 Next</h4><h4 id=\"3-勾选如图选项：点击-Next\"><a href=\"#3-勾选如图选项：点击-Next\" class=\"headerlink\" title=\"3. 勾选如图选项：点击 Next\"></a>3. 勾选如图选项：点击 Next</h4><p><img src=\"http://ot8psglzx.bkt.clouddn.com/WX20180521-170859.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<h4 id=\"4-填写相关项，需要-https-协议的链接，可用-github-仓库。\"><a href=\"#4-填写相关项，需要-https-协议的链接，可用-github-仓库。\" class=\"headerlink\" title=\"4. 填写相关项，需要 https 协议的链接，可用 github 仓库。\"></a>4. 填写相关项，需要 https 协议的链接，可用 github 仓库。</h4><p><img src=\"http://ot8psglzx.bkt.clouddn.com/WX20180521-171144.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<h4 id=\"5-根据情况执行后续操作，得到manifest-plist文件。上传到服务器，可选择-git。\"><a href=\"#5-根据情况执行后续操作，得到manifest-plist文件。上传到服务器，可选择-git。\" class=\"headerlink\" title=\"5. 根据情况执行后续操作，得到manifest.plist文件。上传到服务器，可选择 git。\"></a>5. 根据情况执行后续操作，得到manifest.plist文件。上传到服务器，可选择 git。</h4><h4 id=\"6-生成下载地址：如：\"><a href=\"#6-生成下载地址：如：\" class=\"headerlink\" title=\"6. 生成下载地址：如：\"></a>6. 生成下载地址：如：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">itms-services://?action=download-manifest&amp;url=https://raw.githubusercontent.com/xxx/dis_ipa/master/manifest.plist</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-手机上用-Safari-打开以上链接，进行安装。\"><a href=\"#7-手机上用-Safari-打开以上链接，进行安装。\" class=\"headerlink\" title=\"7. 手机上用 Safari 打开以上链接，进行安装。\"></a>7. 手机上用 Safari 打开以上链接，进行安装。</h4>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"发布线上安装iOS应用（ipa）\"><a href=\"#发布线上安装iOS应用（ipa）\" class=\"headerlink\" title=\"发布线上安装iOS应用（ipa）\"></a>发布线上安装iOS应用（ipa）</h1><p>发布 ipa 文件到线上，通过itms-services 协议访问安装。</p>\n<h3 id=\"一、适用对象\"><a href=\"#一、适用对象\" class=\"headerlink\" title=\"一、适用对象\"></a>一、适用对象</h3><h4 id=\"1-企业证书，直接安装\"><a href=\"#1-企业证书，直接安装\" class=\"headerlink\" title=\"1. 企业证书，直接安装\"></a>1. 企业证书，直接安装</h4><blockquote>\n<p>所有人都可以下载安装，用户打开前，需要信任手动信任企业证书。</p>\n</blockquote>\n<h4 id=\"2-个人-公司证书，给添加过-UDID-的设备安装\"><a href=\"#2-个人-公司证书，给添加过-UDID-的设备安装\" class=\"headerlink\" title=\"2. 个人/公司证书，给添加过 UDID 的设备安装\"></a>2. 个人/公司证书，给添加过 UDID 的设备安装</h4><blockquote>\n<p>适用于部分设备安装（添加了 UDID 的设备）</p>\n</blockquote>\n<h3 id=\"二、操作步骤\"><a href=\"#二、操作步骤\" class=\"headerlink\" title=\"二、操作步骤\"></a>二、操作步骤</h3><p>本人采用Xcode 生成安装文件，步骤如下：</p>\n<h4 id=\"1-打开Xcode，的-Organizer，选择需要发布的应用\"><a href=\"#1-打开Xcode，的-Organizer，选择需要发布的应用\" class=\"headerlink\" title=\"1. 打开Xcode，的 Organizer，选择需要发布的应用\"></a>1. 打开Xcode，的 Organizer，选择需要发布的应用</h4><h4 id=\"2-点击-Export，选择-Ad-Hoc，点击-Next\"><a href=\"#2-点击-Export，选择-Ad-Hoc，点击-Next\" class=\"headerlink\" title=\"2. 点击 Export，选择 Ad Hoc，点击 Next\"></a>2. 点击 Export，选择 Ad Hoc，点击 Next</h4><h4 id=\"3-勾选如图选项：点击-Next\"><a href=\"#3-勾选如图选项：点击-Next\" class=\"headerlink\" title=\"3. 勾选如图选项：点击 Next\"></a>3. 勾选如图选项：点击 Next</h4><p><img src=\"http://ot8psglzx.bkt.clouddn.com/WX20180521-170859.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<h4 id=\"4-填写相关项，需要-https-协议的链接，可用-github-仓库。\"><a href=\"#4-填写相关项，需要-https-协议的链接，可用-github-仓库。\" class=\"headerlink\" title=\"4. 填写相关项，需要 https 协议的链接，可用 github 仓库。\"></a>4. 填写相关项，需要 https 协议的链接，可用 github 仓库。</h4><p><img src=\"http://ot8psglzx.bkt.clouddn.com/WX20180521-171144.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<h4 id=\"5-根据情况执行后续操作，得到manifest-plist文件。上传到服务器，可选择-git。\"><a href=\"#5-根据情况执行后续操作，得到manifest-plist文件。上传到服务器，可选择-git。\" class=\"headerlink\" title=\"5. 根据情况执行后续操作，得到manifest.plist文件。上传到服务器，可选择 git。\"></a>5. 根据情况执行后续操作，得到manifest.plist文件。上传到服务器，可选择 git。</h4><h4 id=\"6-生成下载地址：如：\"><a href=\"#6-生成下载地址：如：\" class=\"headerlink\" title=\"6. 生成下载地址：如：\"></a>6. 生成下载地址：如：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">itms-services://?action=download-manifest&amp;url=https://raw.githubusercontent.com/xxx/dis_ipa/master/manifest.plist</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-手机上用-Safari-打开以上链接，进行安装。\"><a href=\"#7-手机上用-Safari-打开以上链接，进行安装。\" class=\"headerlink\" title=\"7. 手机上用 Safari 打开以上链接，进行安装。\"></a>7. 手机上用 Safari 打开以上链接，进行安装。</h4>"},{"title":"EffectiveObjective-C2.0 笔记 - 第一部分","date":"2018-06-16T06:25:22.000Z","_content":"\n# EffectiveObjective-C2.0 笔记 - 第一部分\n---\n\n# 1.1-了解Objective-C\n\n## 了解Objective-C 语言的起源\n\n**1. Objective-C（以下简称Oc）是在C语言的基础上添加了面向对象特性。**\n\n> Oc是C语言的超集（superset），因此C语言的所有功能特性都可以适用于Oc。\n\n**2. Oc是使用“消息结构”（messaging structure)，而非常见的“函数调用”（function calling）。它们区别像这样**\n\n```\n// message structure \nObject *obj = [Object new];\n[obj performWith:para1 and:para2]\n\n// 其特性就是“运行时组件（Runtime）”，其本质上就是一种与开发者所编代码相链接的 “动态库”（dynamic libary），其代码能把开发者编写的所有程序粘合起来。\n// 运行时所执行的代码由运行环境决定，动态特性明显，但是有些问题编译期间无法发现。\n// 所有方法，都是运行时去查找，运行。接收消息的对象也要在运行时去查找。这时候就可能出问题。见后面。\n\n// functions calling\nObject *obj = new Object;\nobj->perform(para1,para2);\n\n// 与消息型相反，函数方法都有编译器编译的时候实现，可以预先发现一些潜在问题。\n// 运行时所执行的代码由编译器决定；\n// 如果是多态方法，运行时就会去“虚方法表（virtual table）”查找出具体哪一个函数；\n```\n\n**3. Oc中的对象总是分配在“堆空间”（heap space），不会分配到“栈”（stack）上。**\n\n> Oc 将堆内存管理抽象出来了，不需要用malloc 及free 来分配或释放对象所占内存，Oc\n运行期环境把这部分工作抽象成一套内存管理架构，叫 ”引用计数“ 。一个例子\n\n```\nNSString *someString = @\"The string\";\nNSString *anotherString = someString;\n\n```\n\n![image](http://ot8psglzx.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20180914225911.png)\n\n**4. 能用C的结构体，不用对象，结构体比对象更有效率。**\n\n> 对象要分配空间，释放空间,而结构体不需要。结构体储存在栈空间。\n\n**5. 非对象类型（nonobject type），分配在栈上，在其栈帧弹出时自动清理。**\n\n# 1.2-头文件\n\n**核心点：在类的头文件中尽量少引用其他头文件**\n\n**1. Oc 中编写类方式与 C和C++一样，使用头文件（header file）、实现文件（implementation file）来区隔代码。**\n\n**2. 引用其他类，使用@class xxx的向前声明方式（forward declaring）。**\n\n> 也可以使用#import或#include，但是不够优雅，这里就要知道引用 类的具体细节，这里会引用到引用类的具体实现，会增加编译时间。使用@clss 还可以减少两个类之间的耦合。\n\n**3.应该将引入头文件的时机尽量延后（放在实现文件），只有确有需要的时候才引用，这样子可以减少类的使用者所需引用的头文件数量。缩短编译时间。**\n\n- 可以使用@class时，首选@class。\n\n- 只有在迫不得已的时候才用#import (如：继承，实现协议)。\n\n- 协议建议放在单独的一个头文件。避免引入协议时，引入头文件中等其他内容。\n\n-  使用@class 可以减少.h中对其他类的依赖、减少链接到其他类所需要的时间，从而降低编译时间。\n\n**4. 两个类互相引用时： A类中引用B类，B类中也引用A类。必须用@class，不然会出现循环引用。**\n\n### 用#import 而不用 #include\n\n- import可以避免重复引用\n\n- 如果用#include的话，需要进行避免重复的宏定义\n\n```\n#ifndef HEADER\n#define HEADER\n\nxxx\n\n#endif\n```\n\n# 1.3-字面量语法、常量、枚举\n\n## 一、尽量用字面量语法，便于理解\n\n**1. 字面数值**\n\n```\n// 字面量语法\nNSNumber *itemNo = @1;\n\n// 传统声明\nNSNumber *itemNo = [NSNumber numberWithInt:1];\n```\n\n**2. 字面量数组**\n\n不能有nil值，nil值为结尾标示\n\n```\nNSArray *arr1 = @[@\"1\",@\"2\"];\n\nNSArray *arr2 = [NSArray arrayWithObjects:@\"1\",@\"2\",nil]; // 注意nil结尾\n```\n\n**3. 字面量字典**\n\n不能有nil值，nil值为结尾标示\n\n```\nNSDictionary *dic = @{@\"key1\":@\"val1\",\n                      @\"key2\":@\"val2\"};\n```\n\n**4. 可变数组和字典**\n\n字面创建的都是不可变类型，如果想创建可变类型，需要mutableCopy\n\n```\nNSMutableDictionary *dic = [@{@\"key1\":@\"val1\",\n                              @\"key2\":@\"val2\"} mutableCopy];\n```\n\n**5. 字符串字面量创建的是常量，对象不在持有了也不会立马被释放**\n\n```\n// Oc会做字符串的编译单元，而且会合并相同字符串的编译单元，来减少额外的消耗去链接这些编译单元。\n\nNSString str1 = @“i am yun”;\nNSString str2 = @“i am yun”;\n\n// 此时，str1跟str2内存地址是一样的。\n\n// 字符串常量创建后，不再修改。即使引用它的对象不再指向它，字符串常量也不会立即施放。\n```\n\n## 二、 多用类型常量，少用预处理\n\n**1. 不要用预处理命令定义常量，用静态常量代替**\n\n预处理命令定义的，不含有类型信息\n\n**2. 类内使用的常量，定义在实现文件，可用k做前缀**\n\n```\n// in the implementation file\nstatic const int kTimeItv = 1;\n```\n\n**3. 如果需要其他类引用常量，在接口用extern定义，在实现文件实现，可用类名做前缀，如通知键值**\n\n```\n// in the interface\nextern const NSString *notiKey;\n\n// in the implementation file\nconst  NSString *notiKey = @\"notiKey\";\n```\n\n**4. 编译器会在 “数据段”（data section）为字符串分配存储空间，这里在上面C 语言的内存模型有讲，数据段通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。**\n\n## 三、 用枚举表示状态、选项、状态码\n\n**1. 用宏来定义枚举类型**\n\n这些宏具备向后兼容（backward compatibility）能力，如果目标平台编译器支持新标准，那就使用新式语法，否则改用旧式语法。\n\n- NS_ENUM宏 定义通用枚举\n\n```\ntypedef NS_ENUM(NSInteger, NSWritingDirection) {\n    NSWritingDirectionNatural     = -1,  //值为-1    \n    NSWritingDirectionLeftToRight = 0,   //值为0\n    NSWritingDirectionRightToLeft = 1    //值为1       \n};\n\n```\n\n- NS_OPTIONS宏 定义位移枚举\n\n```\ntypedef NS_OPTIONS(NSUInteger, UISwipeGestureRecognizerDirection) {\n    UISwipeGestureRecognizerDirectionNone  = 0,       //值为0\n    UISwipeGestureRecognizerDirectionRight = 1 << 0,  //值为2的0次方\n    UISwipeGestureRecognizerDirectionLeft  = 1 << 1,  //值为2的1次方\n    UISwipeGestureRecognizerDirectionUp    = 1 << 2,  //值为2的2次方\n    UISwipeGestureRecognizerDirectionDown  = 1 << 3   //值为2的3次方\n};\n```\n\n**2. 在switch 语句中，最好不要有default 分支，这样子要做到处理所有样式，这样子在新家类型的时候，没有default 编译器会发出警告，让我们注意到。**\n\n**3. 实现枚举所用的数据类型取决于编译器，不过其二进制位（bit）的个数必须能完全表示下枚举编号才行，一个字节含8个二进制位，所以至多能表示256（2^8^）个枚举变量。**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/iOS-book-EffectiveObjective-C2.0-chap1.md","raw":"---\ntitle: EffectiveObjective-C2.0 笔记 - 第一部分\ndate: 2018-06-16 14:25:22\ncategories: iOS\ntags: [iOS,Effective Objective-C 2.0]\n---\n\n# EffectiveObjective-C2.0 笔记 - 第一部分\n---\n\n# 1.1-了解Objective-C\n\n## 了解Objective-C 语言的起源\n\n**1. Objective-C（以下简称Oc）是在C语言的基础上添加了面向对象特性。**\n\n> Oc是C语言的超集（superset），因此C语言的所有功能特性都可以适用于Oc。\n\n**2. Oc是使用“消息结构”（messaging structure)，而非常见的“函数调用”（function calling）。它们区别像这样**\n\n```\n// message structure \nObject *obj = [Object new];\n[obj performWith:para1 and:para2]\n\n// 其特性就是“运行时组件（Runtime）”，其本质上就是一种与开发者所编代码相链接的 “动态库”（dynamic libary），其代码能把开发者编写的所有程序粘合起来。\n// 运行时所执行的代码由运行环境决定，动态特性明显，但是有些问题编译期间无法发现。\n// 所有方法，都是运行时去查找，运行。接收消息的对象也要在运行时去查找。这时候就可能出问题。见后面。\n\n// functions calling\nObject *obj = new Object;\nobj->perform(para1,para2);\n\n// 与消息型相反，函数方法都有编译器编译的时候实现，可以预先发现一些潜在问题。\n// 运行时所执行的代码由编译器决定；\n// 如果是多态方法，运行时就会去“虚方法表（virtual table）”查找出具体哪一个函数；\n```\n\n**3. Oc中的对象总是分配在“堆空间”（heap space），不会分配到“栈”（stack）上。**\n\n> Oc 将堆内存管理抽象出来了，不需要用malloc 及free 来分配或释放对象所占内存，Oc\n运行期环境把这部分工作抽象成一套内存管理架构，叫 ”引用计数“ 。一个例子\n\n```\nNSString *someString = @\"The string\";\nNSString *anotherString = someString;\n\n```\n\n![image](http://ot8psglzx.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20180914225911.png)\n\n**4. 能用C的结构体，不用对象，结构体比对象更有效率。**\n\n> 对象要分配空间，释放空间,而结构体不需要。结构体储存在栈空间。\n\n**5. 非对象类型（nonobject type），分配在栈上，在其栈帧弹出时自动清理。**\n\n# 1.2-头文件\n\n**核心点：在类的头文件中尽量少引用其他头文件**\n\n**1. Oc 中编写类方式与 C和C++一样，使用头文件（header file）、实现文件（implementation file）来区隔代码。**\n\n**2. 引用其他类，使用@class xxx的向前声明方式（forward declaring）。**\n\n> 也可以使用#import或#include，但是不够优雅，这里就要知道引用 类的具体细节，这里会引用到引用类的具体实现，会增加编译时间。使用@clss 还可以减少两个类之间的耦合。\n\n**3.应该将引入头文件的时机尽量延后（放在实现文件），只有确有需要的时候才引用，这样子可以减少类的使用者所需引用的头文件数量。缩短编译时间。**\n\n- 可以使用@class时，首选@class。\n\n- 只有在迫不得已的时候才用#import (如：继承，实现协议)。\n\n- 协议建议放在单独的一个头文件。避免引入协议时，引入头文件中等其他内容。\n\n-  使用@class 可以减少.h中对其他类的依赖、减少链接到其他类所需要的时间，从而降低编译时间。\n\n**4. 两个类互相引用时： A类中引用B类，B类中也引用A类。必须用@class，不然会出现循环引用。**\n\n### 用#import 而不用 #include\n\n- import可以避免重复引用\n\n- 如果用#include的话，需要进行避免重复的宏定义\n\n```\n#ifndef HEADER\n#define HEADER\n\nxxx\n\n#endif\n```\n\n# 1.3-字面量语法、常量、枚举\n\n## 一、尽量用字面量语法，便于理解\n\n**1. 字面数值**\n\n```\n// 字面量语法\nNSNumber *itemNo = @1;\n\n// 传统声明\nNSNumber *itemNo = [NSNumber numberWithInt:1];\n```\n\n**2. 字面量数组**\n\n不能有nil值，nil值为结尾标示\n\n```\nNSArray *arr1 = @[@\"1\",@\"2\"];\n\nNSArray *arr2 = [NSArray arrayWithObjects:@\"1\",@\"2\",nil]; // 注意nil结尾\n```\n\n**3. 字面量字典**\n\n不能有nil值，nil值为结尾标示\n\n```\nNSDictionary *dic = @{@\"key1\":@\"val1\",\n                      @\"key2\":@\"val2\"};\n```\n\n**4. 可变数组和字典**\n\n字面创建的都是不可变类型，如果想创建可变类型，需要mutableCopy\n\n```\nNSMutableDictionary *dic = [@{@\"key1\":@\"val1\",\n                              @\"key2\":@\"val2\"} mutableCopy];\n```\n\n**5. 字符串字面量创建的是常量，对象不在持有了也不会立马被释放**\n\n```\n// Oc会做字符串的编译单元，而且会合并相同字符串的编译单元，来减少额外的消耗去链接这些编译单元。\n\nNSString str1 = @“i am yun”;\nNSString str2 = @“i am yun”;\n\n// 此时，str1跟str2内存地址是一样的。\n\n// 字符串常量创建后，不再修改。即使引用它的对象不再指向它，字符串常量也不会立即施放。\n```\n\n## 二、 多用类型常量，少用预处理\n\n**1. 不要用预处理命令定义常量，用静态常量代替**\n\n预处理命令定义的，不含有类型信息\n\n**2. 类内使用的常量，定义在实现文件，可用k做前缀**\n\n```\n// in the implementation file\nstatic const int kTimeItv = 1;\n```\n\n**3. 如果需要其他类引用常量，在接口用extern定义，在实现文件实现，可用类名做前缀，如通知键值**\n\n```\n// in the interface\nextern const NSString *notiKey;\n\n// in the implementation file\nconst  NSString *notiKey = @\"notiKey\";\n```\n\n**4. 编译器会在 “数据段”（data section）为字符串分配存储空间，这里在上面C 语言的内存模型有讲，数据段通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。**\n\n## 三、 用枚举表示状态、选项、状态码\n\n**1. 用宏来定义枚举类型**\n\n这些宏具备向后兼容（backward compatibility）能力，如果目标平台编译器支持新标准，那就使用新式语法，否则改用旧式语法。\n\n- NS_ENUM宏 定义通用枚举\n\n```\ntypedef NS_ENUM(NSInteger, NSWritingDirection) {\n    NSWritingDirectionNatural     = -1,  //值为-1    \n    NSWritingDirectionLeftToRight = 0,   //值为0\n    NSWritingDirectionRightToLeft = 1    //值为1       \n};\n\n```\n\n- NS_OPTIONS宏 定义位移枚举\n\n```\ntypedef NS_OPTIONS(NSUInteger, UISwipeGestureRecognizerDirection) {\n    UISwipeGestureRecognizerDirectionNone  = 0,       //值为0\n    UISwipeGestureRecognizerDirectionRight = 1 << 0,  //值为2的0次方\n    UISwipeGestureRecognizerDirectionLeft  = 1 << 1,  //值为2的1次方\n    UISwipeGestureRecognizerDirectionUp    = 1 << 2,  //值为2的2次方\n    UISwipeGestureRecognizerDirectionDown  = 1 << 3   //值为2的3次方\n};\n```\n\n**2. 在switch 语句中，最好不要有default 分支，这样子要做到处理所有样式，这样子在新家类型的时候，没有default 编译器会发出警告，让我们注意到。**\n\n**3. 实现枚举所用的数据类型取决于编译器，不过其二进制位（bit）的个数必须能完全表示下枚举编号才行，一个字节含8个二进制位，所以至多能表示256（2^8^）个枚举变量。**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"iOS-book-EffectiveObjective-C2.0-chap1","published":1,"updated":"2018-10-10T08:35:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn2x9ahb0008pb6zngvcv3sz","content":"<h1 id=\"EffectiveObjective-C2-0-笔记-第一部分\"><a href=\"#EffectiveObjective-C2-0-笔记-第一部分\" class=\"headerlink\" title=\"EffectiveObjective-C2.0 笔记 - 第一部分\"></a>EffectiveObjective-C2.0 笔记 - 第一部分</h1><hr>\n<h1 id=\"1-1-了解Objective-C\"><a href=\"#1-1-了解Objective-C\" class=\"headerlink\" title=\"1.1-了解Objective-C\"></a>1.1-了解Objective-C</h1><h2 id=\"了解Objective-C-语言的起源\"><a href=\"#了解Objective-C-语言的起源\" class=\"headerlink\" title=\"了解Objective-C 语言的起源\"></a>了解Objective-C 语言的起源</h2><p><strong>1. Objective-C（以下简称Oc）是在C语言的基础上添加了面向对象特性。</strong></p>\n<blockquote>\n<p>Oc是C语言的超集（superset），因此C语言的所有功能特性都可以适用于Oc。</p>\n</blockquote>\n<p><strong>2. Oc是使用“消息结构”（messaging structure)，而非常见的“函数调用”（function calling）。它们区别像这样</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// message structure </span><br><span class=\"line\">Object *obj = [Object new];</span><br><span class=\"line\">[obj performWith:para1 and:para2]</span><br><span class=\"line\"></span><br><span class=\"line\">// 其特性就是“运行时组件（Runtime）”，其本质上就是一种与开发者所编代码相链接的 “动态库”（dynamic libary），其代码能把开发者编写的所有程序粘合起来。</span><br><span class=\"line\">// 运行时所执行的代码由运行环境决定，动态特性明显，但是有些问题编译期间无法发现。</span><br><span class=\"line\">// 所有方法，都是运行时去查找，运行。接收消息的对象也要在运行时去查找。这时候就可能出问题。见后面。</span><br><span class=\"line\"></span><br><span class=\"line\">// functions calling</span><br><span class=\"line\">Object *obj = new Object;</span><br><span class=\"line\">obj-&gt;perform(para1,para2);</span><br><span class=\"line\"></span><br><span class=\"line\">// 与消息型相反，函数方法都有编译器编译的时候实现，可以预先发现一些潜在问题。</span><br><span class=\"line\">// 运行时所执行的代码由编译器决定；</span><br><span class=\"line\">// 如果是多态方法，运行时就会去“虚方法表（virtual table）”查找出具体哪一个函数；</span><br></pre></td></tr></table></figure>\n<p><strong>3. Oc中的对象总是分配在“堆空间”（heap space），不会分配到“栈”（stack）上。</strong></p>\n<blockquote>\n<p>Oc 将堆内存管理抽象出来了，不需要用malloc 及free 来分配或释放对象所占内存，Oc<br>运行期环境把这部分工作抽象成一套内存管理架构，叫 ”引用计数“ 。一个例子</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *someString = @&quot;The string&quot;;</span><br><span class=\"line\">NSString *anotherString = someString;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ot8psglzx.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20180914225911.png\" alt=\"image\"></p>\n<p><strong>4. 能用C的结构体，不用对象，结构体比对象更有效率。</strong></p>\n<blockquote>\n<p>对象要分配空间，释放空间,而结构体不需要。结构体储存在栈空间。</p>\n</blockquote>\n<p><strong>5. 非对象类型（nonobject type），分配在栈上，在其栈帧弹出时自动清理。</strong></p>\n<h1 id=\"1-2-头文件\"><a href=\"#1-2-头文件\" class=\"headerlink\" title=\"1.2-头文件\"></a>1.2-头文件</h1><p><strong>核心点：在类的头文件中尽量少引用其他头文件</strong></p>\n<p><strong>1. Oc 中编写类方式与 C和C++一样，使用头文件（header file）、实现文件（implementation file）来区隔代码。</strong></p>\n<p><strong>2. 引用其他类，使用@class xxx的向前声明方式（forward declaring）。</strong></p>\n<blockquote>\n<p>也可以使用#import或#include，但是不够优雅，这里就要知道引用 类的具体细节，这里会引用到引用类的具体实现，会增加编译时间。使用@clss 还可以减少两个类之间的耦合。</p>\n</blockquote>\n<p><strong>3.应该将引入头文件的时机尽量延后（放在实现文件），只有确有需要的时候才引用，这样子可以减少类的使用者所需引用的头文件数量。缩短编译时间。</strong></p>\n<ul>\n<li><p>可以使用@class时，首选@class。</p>\n</li>\n<li><p>只有在迫不得已的时候才用#import (如：继承，实现协议)。</p>\n</li>\n<li><p>协议建议放在单独的一个头文件。避免引入协议时，引入头文件中等其他内容。</p>\n</li>\n<li><p>使用@class 可以减少.h中对其他类的依赖、减少链接到其他类所需要的时间，从而降低编译时间。</p>\n</li>\n</ul>\n<p><strong>4. 两个类互相引用时： A类中引用B类，B类中也引用A类。必须用@class，不然会出现循环引用。</strong></p>\n<h3 id=\"用-import-而不用-include\"><a href=\"#用-import-而不用-include\" class=\"headerlink\" title=\"用#import 而不用 #include\"></a>用#import 而不用 #include</h3><ul>\n<li><p>import可以避免重复引用</p>\n</li>\n<li><p>如果用#include的话，需要进行避免重复的宏定义</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef HEADER</span><br><span class=\"line\">#define HEADER</span><br><span class=\"line\"></span><br><span class=\"line\">xxx</span><br><span class=\"line\"></span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n<h1 id=\"1-3-字面量语法、常量、枚举\"><a href=\"#1-3-字面量语法、常量、枚举\" class=\"headerlink\" title=\"1.3-字面量语法、常量、枚举\"></a>1.3-字面量语法、常量、枚举</h1><h2 id=\"一、尽量用字面量语法，便于理解\"><a href=\"#一、尽量用字面量语法，便于理解\" class=\"headerlink\" title=\"一、尽量用字面量语法，便于理解\"></a>一、尽量用字面量语法，便于理解</h2><p><strong>1. 字面数值</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 字面量语法</span><br><span class=\"line\">NSNumber *itemNo = @1;</span><br><span class=\"line\"></span><br><span class=\"line\">// 传统声明</span><br><span class=\"line\">NSNumber *itemNo = [NSNumber numberWithInt:1];</span><br></pre></td></tr></table></figure>\n<p><strong>2. 字面量数组</strong></p>\n<p>不能有nil值，nil值为结尾标示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *arr1 = @[@&quot;1&quot;,@&quot;2&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">NSArray *arr2 = [NSArray arrayWithObjects:@&quot;1&quot;,@&quot;2&quot;,nil]; // 注意nil结尾</span><br></pre></td></tr></table></figure>\n<p><strong>3. 字面量字典</strong></p>\n<p>不能有nil值，nil值为结尾标示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSDictionary *dic = @&#123;@&quot;key1&quot;:@&quot;val1&quot;,</span><br><span class=\"line\">                      @&quot;key2&quot;:@&quot;val2&quot;&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>4. 可变数组和字典</strong></p>\n<p>字面创建的都是不可变类型，如果想创建可变类型，需要mutableCopy</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableDictionary *dic = [@&#123;@&quot;key1&quot;:@&quot;val1&quot;,</span><br><span class=\"line\">                              @&quot;key2&quot;:@&quot;val2&quot;&#125; mutableCopy];</span><br></pre></td></tr></table></figure>\n<p><strong>5. 字符串字面量创建的是常量，对象不在持有了也不会立马被释放</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Oc会做字符串的编译单元，而且会合并相同字符串的编译单元，来减少额外的消耗去链接这些编译单元。</span><br><span class=\"line\"></span><br><span class=\"line\">NSString str1 = @“i am yun”;</span><br><span class=\"line\">NSString str2 = @“i am yun”;</span><br><span class=\"line\"></span><br><span class=\"line\">// 此时，str1跟str2内存地址是一样的。</span><br><span class=\"line\"></span><br><span class=\"line\">// 字符串常量创建后，不再修改。即使引用它的对象不再指向它，字符串常量也不会立即施放。</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、-多用类型常量，少用预处理\"><a href=\"#二、-多用类型常量，少用预处理\" class=\"headerlink\" title=\"二、 多用类型常量，少用预处理\"></a>二、 多用类型常量，少用预处理</h2><p><strong>1. 不要用预处理命令定义常量，用静态常量代替</strong></p>\n<p>预处理命令定义的，不含有类型信息</p>\n<p><strong>2. 类内使用的常量，定义在实现文件，可用k做前缀</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// in the implementation file</span><br><span class=\"line\">static const int kTimeItv = 1;</span><br></pre></td></tr></table></figure>\n<p><strong>3. 如果需要其他类引用常量，在接口用extern定义，在实现文件实现，可用类名做前缀，如通知键值</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// in the interface</span><br><span class=\"line\">extern const NSString *notiKey;</span><br><span class=\"line\"></span><br><span class=\"line\">// in the implementation file</span><br><span class=\"line\">const  NSString *notiKey = @&quot;notiKey&quot;;</span><br></pre></td></tr></table></figure>\n<p><strong>4. 编译器会在 “数据段”（data section）为字符串分配存储空间，这里在上面C 语言的内存模型有讲，数据段通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。</strong></p>\n<h2 id=\"三、-用枚举表示状态、选项、状态码\"><a href=\"#三、-用枚举表示状态、选项、状态码\" class=\"headerlink\" title=\"三、 用枚举表示状态、选项、状态码\"></a>三、 用枚举表示状态、选项、状态码</h2><p><strong>1. 用宏来定义枚举类型</strong></p>\n<p>这些宏具备向后兼容（backward compatibility）能力，如果目标平台编译器支持新标准，那就使用新式语法，否则改用旧式语法。</p>\n<ul>\n<li>NS_ENUM宏 定义通用枚举</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef NS_ENUM(NSInteger, NSWritingDirection) &#123;</span><br><span class=\"line\">    NSWritingDirectionNatural     = -1,  //值为-1    </span><br><span class=\"line\">    NSWritingDirectionLeftToRight = 0,   //值为0</span><br><span class=\"line\">    NSWritingDirectionRightToLeft = 1    //值为1       </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>NS_OPTIONS宏 定义位移枚举</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef NS_OPTIONS(NSUInteger, UISwipeGestureRecognizerDirection) &#123;</span><br><span class=\"line\">    UISwipeGestureRecognizerDirectionNone  = 0,       //值为0</span><br><span class=\"line\">    UISwipeGestureRecognizerDirectionRight = 1 &lt;&lt; 0,  //值为2的0次方</span><br><span class=\"line\">    UISwipeGestureRecognizerDirectionLeft  = 1 &lt;&lt; 1,  //值为2的1次方</span><br><span class=\"line\">    UISwipeGestureRecognizerDirectionUp    = 1 &lt;&lt; 2,  //值为2的2次方</span><br><span class=\"line\">    UISwipeGestureRecognizerDirectionDown  = 1 &lt;&lt; 3   //值为2的3次方</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>2. 在switch 语句中，最好不要有default 分支，这样子要做到处理所有样式，这样子在新家类型的时候，没有default 编译器会发出警告，让我们注意到。</strong></p>\n<p><strong>3. 实现枚举所用的数据类型取决于编译器，不过其二进制位（bit）的个数必须能完全表示下枚举编号才行，一个字节含8个二进制位，所以至多能表示256（2^8^）个枚举变量。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"EffectiveObjective-C2-0-笔记-第一部分\"><a href=\"#EffectiveObjective-C2-0-笔记-第一部分\" class=\"headerlink\" title=\"EffectiveObjective-C2.0 笔记 - 第一部分\"></a>EffectiveObjective-C2.0 笔记 - 第一部分</h1><hr>\n<h1 id=\"1-1-了解Objective-C\"><a href=\"#1-1-了解Objective-C\" class=\"headerlink\" title=\"1.1-了解Objective-C\"></a>1.1-了解Objective-C</h1><h2 id=\"了解Objective-C-语言的起源\"><a href=\"#了解Objective-C-语言的起源\" class=\"headerlink\" title=\"了解Objective-C 语言的起源\"></a>了解Objective-C 语言的起源</h2><p><strong>1. Objective-C（以下简称Oc）是在C语言的基础上添加了面向对象特性。</strong></p>\n<blockquote>\n<p>Oc是C语言的超集（superset），因此C语言的所有功能特性都可以适用于Oc。</p>\n</blockquote>\n<p><strong>2. Oc是使用“消息结构”（messaging structure)，而非常见的“函数调用”（function calling）。它们区别像这样</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// message structure </span><br><span class=\"line\">Object *obj = [Object new];</span><br><span class=\"line\">[obj performWith:para1 and:para2]</span><br><span class=\"line\"></span><br><span class=\"line\">// 其特性就是“运行时组件（Runtime）”，其本质上就是一种与开发者所编代码相链接的 “动态库”（dynamic libary），其代码能把开发者编写的所有程序粘合起来。</span><br><span class=\"line\">// 运行时所执行的代码由运行环境决定，动态特性明显，但是有些问题编译期间无法发现。</span><br><span class=\"line\">// 所有方法，都是运行时去查找，运行。接收消息的对象也要在运行时去查找。这时候就可能出问题。见后面。</span><br><span class=\"line\"></span><br><span class=\"line\">// functions calling</span><br><span class=\"line\">Object *obj = new Object;</span><br><span class=\"line\">obj-&gt;perform(para1,para2);</span><br><span class=\"line\"></span><br><span class=\"line\">// 与消息型相反，函数方法都有编译器编译的时候实现，可以预先发现一些潜在问题。</span><br><span class=\"line\">// 运行时所执行的代码由编译器决定；</span><br><span class=\"line\">// 如果是多态方法，运行时就会去“虚方法表（virtual table）”查找出具体哪一个函数；</span><br></pre></td></tr></table></figure>\n<p><strong>3. Oc中的对象总是分配在“堆空间”（heap space），不会分配到“栈”（stack）上。</strong></p>\n<blockquote>\n<p>Oc 将堆内存管理抽象出来了，不需要用malloc 及free 来分配或释放对象所占内存，Oc<br>运行期环境把这部分工作抽象成一套内存管理架构，叫 ”引用计数“ 。一个例子</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *someString = @&quot;The string&quot;;</span><br><span class=\"line\">NSString *anotherString = someString;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ot8psglzx.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20180914225911.png\" alt=\"image\"></p>\n<p><strong>4. 能用C的结构体，不用对象，结构体比对象更有效率。</strong></p>\n<blockquote>\n<p>对象要分配空间，释放空间,而结构体不需要。结构体储存在栈空间。</p>\n</blockquote>\n<p><strong>5. 非对象类型（nonobject type），分配在栈上，在其栈帧弹出时自动清理。</strong></p>\n<h1 id=\"1-2-头文件\"><a href=\"#1-2-头文件\" class=\"headerlink\" title=\"1.2-头文件\"></a>1.2-头文件</h1><p><strong>核心点：在类的头文件中尽量少引用其他头文件</strong></p>\n<p><strong>1. Oc 中编写类方式与 C和C++一样，使用头文件（header file）、实现文件（implementation file）来区隔代码。</strong></p>\n<p><strong>2. 引用其他类，使用@class xxx的向前声明方式（forward declaring）。</strong></p>\n<blockquote>\n<p>也可以使用#import或#include，但是不够优雅，这里就要知道引用 类的具体细节，这里会引用到引用类的具体实现，会增加编译时间。使用@clss 还可以减少两个类之间的耦合。</p>\n</blockquote>\n<p><strong>3.应该将引入头文件的时机尽量延后（放在实现文件），只有确有需要的时候才引用，这样子可以减少类的使用者所需引用的头文件数量。缩短编译时间。</strong></p>\n<ul>\n<li><p>可以使用@class时，首选@class。</p>\n</li>\n<li><p>只有在迫不得已的时候才用#import (如：继承，实现协议)。</p>\n</li>\n<li><p>协议建议放在单独的一个头文件。避免引入协议时，引入头文件中等其他内容。</p>\n</li>\n<li><p>使用@class 可以减少.h中对其他类的依赖、减少链接到其他类所需要的时间，从而降低编译时间。</p>\n</li>\n</ul>\n<p><strong>4. 两个类互相引用时： A类中引用B类，B类中也引用A类。必须用@class，不然会出现循环引用。</strong></p>\n<h3 id=\"用-import-而不用-include\"><a href=\"#用-import-而不用-include\" class=\"headerlink\" title=\"用#import 而不用 #include\"></a>用#import 而不用 #include</h3><ul>\n<li><p>import可以避免重复引用</p>\n</li>\n<li><p>如果用#include的话，需要进行避免重复的宏定义</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef HEADER</span><br><span class=\"line\">#define HEADER</span><br><span class=\"line\"></span><br><span class=\"line\">xxx</span><br><span class=\"line\"></span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n<h1 id=\"1-3-字面量语法、常量、枚举\"><a href=\"#1-3-字面量语法、常量、枚举\" class=\"headerlink\" title=\"1.3-字面量语法、常量、枚举\"></a>1.3-字面量语法、常量、枚举</h1><h2 id=\"一、尽量用字面量语法，便于理解\"><a href=\"#一、尽量用字面量语法，便于理解\" class=\"headerlink\" title=\"一、尽量用字面量语法，便于理解\"></a>一、尽量用字面量语法，便于理解</h2><p><strong>1. 字面数值</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 字面量语法</span><br><span class=\"line\">NSNumber *itemNo = @1;</span><br><span class=\"line\"></span><br><span class=\"line\">// 传统声明</span><br><span class=\"line\">NSNumber *itemNo = [NSNumber numberWithInt:1];</span><br></pre></td></tr></table></figure>\n<p><strong>2. 字面量数组</strong></p>\n<p>不能有nil值，nil值为结尾标示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *arr1 = @[@&quot;1&quot;,@&quot;2&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">NSArray *arr2 = [NSArray arrayWithObjects:@&quot;1&quot;,@&quot;2&quot;,nil]; // 注意nil结尾</span><br></pre></td></tr></table></figure>\n<p><strong>3. 字面量字典</strong></p>\n<p>不能有nil值，nil值为结尾标示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSDictionary *dic = @&#123;@&quot;key1&quot;:@&quot;val1&quot;,</span><br><span class=\"line\">                      @&quot;key2&quot;:@&quot;val2&quot;&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>4. 可变数组和字典</strong></p>\n<p>字面创建的都是不可变类型，如果想创建可变类型，需要mutableCopy</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableDictionary *dic = [@&#123;@&quot;key1&quot;:@&quot;val1&quot;,</span><br><span class=\"line\">                              @&quot;key2&quot;:@&quot;val2&quot;&#125; mutableCopy];</span><br></pre></td></tr></table></figure>\n<p><strong>5. 字符串字面量创建的是常量，对象不在持有了也不会立马被释放</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Oc会做字符串的编译单元，而且会合并相同字符串的编译单元，来减少额外的消耗去链接这些编译单元。</span><br><span class=\"line\"></span><br><span class=\"line\">NSString str1 = @“i am yun”;</span><br><span class=\"line\">NSString str2 = @“i am yun”;</span><br><span class=\"line\"></span><br><span class=\"line\">// 此时，str1跟str2内存地址是一样的。</span><br><span class=\"line\"></span><br><span class=\"line\">// 字符串常量创建后，不再修改。即使引用它的对象不再指向它，字符串常量也不会立即施放。</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、-多用类型常量，少用预处理\"><a href=\"#二、-多用类型常量，少用预处理\" class=\"headerlink\" title=\"二、 多用类型常量，少用预处理\"></a>二、 多用类型常量，少用预处理</h2><p><strong>1. 不要用预处理命令定义常量，用静态常量代替</strong></p>\n<p>预处理命令定义的，不含有类型信息</p>\n<p><strong>2. 类内使用的常量，定义在实现文件，可用k做前缀</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// in the implementation file</span><br><span class=\"line\">static const int kTimeItv = 1;</span><br></pre></td></tr></table></figure>\n<p><strong>3. 如果需要其他类引用常量，在接口用extern定义，在实现文件实现，可用类名做前缀，如通知键值</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// in the interface</span><br><span class=\"line\">extern const NSString *notiKey;</span><br><span class=\"line\"></span><br><span class=\"line\">// in the implementation file</span><br><span class=\"line\">const  NSString *notiKey = @&quot;notiKey&quot;;</span><br></pre></td></tr></table></figure>\n<p><strong>4. 编译器会在 “数据段”（data section）为字符串分配存储空间，这里在上面C 语言的内存模型有讲，数据段通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。</strong></p>\n<h2 id=\"三、-用枚举表示状态、选项、状态码\"><a href=\"#三、-用枚举表示状态、选项、状态码\" class=\"headerlink\" title=\"三、 用枚举表示状态、选项、状态码\"></a>三、 用枚举表示状态、选项、状态码</h2><p><strong>1. 用宏来定义枚举类型</strong></p>\n<p>这些宏具备向后兼容（backward compatibility）能力，如果目标平台编译器支持新标准，那就使用新式语法，否则改用旧式语法。</p>\n<ul>\n<li>NS_ENUM宏 定义通用枚举</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef NS_ENUM(NSInteger, NSWritingDirection) &#123;</span><br><span class=\"line\">    NSWritingDirectionNatural     = -1,  //值为-1    </span><br><span class=\"line\">    NSWritingDirectionLeftToRight = 0,   //值为0</span><br><span class=\"line\">    NSWritingDirectionRightToLeft = 1    //值为1       </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>NS_OPTIONS宏 定义位移枚举</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef NS_OPTIONS(NSUInteger, UISwipeGestureRecognizerDirection) &#123;</span><br><span class=\"line\">    UISwipeGestureRecognizerDirectionNone  = 0,       //值为0</span><br><span class=\"line\">    UISwipeGestureRecognizerDirectionRight = 1 &lt;&lt; 0,  //值为2的0次方</span><br><span class=\"line\">    UISwipeGestureRecognizerDirectionLeft  = 1 &lt;&lt; 1,  //值为2的1次方</span><br><span class=\"line\">    UISwipeGestureRecognizerDirectionUp    = 1 &lt;&lt; 2,  //值为2的2次方</span><br><span class=\"line\">    UISwipeGestureRecognizerDirectionDown  = 1 &lt;&lt; 3   //值为2的3次方</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>2. 在switch 语句中，最好不要有default 分支，这样子要做到处理所有样式，这样子在新家类型的时候，没有default 编译器会发出警告，让我们注意到。</strong></p>\n<p><strong>3. 实现枚举所用的数据类型取决于编译器，不过其二进制位（bit）的个数必须能完全表示下枚举编号才行，一个字节含8个二进制位，所以至多能表示256（2^8^）个枚举变量。</strong></p>\n"},{"title":"iOS9 因为图片莫名闪退","date":"2018-05-21T09:40:47.000Z","_content":"\n# iOS9 因为图片莫名闪退\n\n> 一般错误信息与图片相关，如\n\n~~~\n-[CUIStrucTuredThemeStore renditionWithKey:usingKeySignature:] \n~~~\n\n> 仅在 iOS9及一下系统出现\n\n### 问题说明\n\nios9.3以下系统不支持非RGB 色域的图片，需要排查所有图片。\n\n### 排查步骤\n\n\n#### 1. 获取ipa 文件\n\n1. 直接从 Xcode 导出\n\n2. 从 iTuns 下载（没找到在哪儿）\n\n#### 2. 获取Assets.car文件\n\n1. 解压ipa, 找到 Payload 中的 .app 文件, 显示包内容，找到 Assets.car 文件，拷贝到工作目录。\n\n#### 3. 获取asset.json文件\n\n```\ncd 工作目录\n\nsudo xcrun --sdk iphoneos assetutil --info ./Assets.car > asset.json\n\n输入密码，生成asset.json文件\n```\n\n#### 4. 查找非 RBG图片\n\n查询 asset.json文件中的\"DisplayGamut\" : \"P3\"，即为不能用的图片\n\n### 补充\n在查阅资料时发现, 很多资料都提到过在项目中运行一个脚本将P3图片进行转换, 由于此种方法朕没有实际验证过, 所以只做个摘录\n\n```\n#!/bin/bash DIRECTORY=$1 echo \"----Passed Resources with xcassets folder argument is <$DIRECTORY>\" echo \"----Processing asset:\"\n\nfind \"$DIRECTORY\" -name '*png' -print0 | while read -d $'\\0' file; do echo \"---------$file\" sips -m \"/System/Library/Colorsync/Profiles/sRGB Profile.icc\" \"$file\" --out \"$file\" done\n\necho \"----script successfully finished\"\n\n```","source":"_posts/iOS-exception-img-on-iOS9.md","raw":"---\ntitle: iOS9 因为图片莫名闪退\ndate: 2018-05-21 17:40:47\ncategories: iOS\ntags: [iOS,Objective-C,异常]\n---\n\n# iOS9 因为图片莫名闪退\n\n> 一般错误信息与图片相关，如\n\n~~~\n-[CUIStrucTuredThemeStore renditionWithKey:usingKeySignature:] \n~~~\n\n> 仅在 iOS9及一下系统出现\n\n### 问题说明\n\nios9.3以下系统不支持非RGB 色域的图片，需要排查所有图片。\n\n### 排查步骤\n\n\n#### 1. 获取ipa 文件\n\n1. 直接从 Xcode 导出\n\n2. 从 iTuns 下载（没找到在哪儿）\n\n#### 2. 获取Assets.car文件\n\n1. 解压ipa, 找到 Payload 中的 .app 文件, 显示包内容，找到 Assets.car 文件，拷贝到工作目录。\n\n#### 3. 获取asset.json文件\n\n```\ncd 工作目录\n\nsudo xcrun --sdk iphoneos assetutil --info ./Assets.car > asset.json\n\n输入密码，生成asset.json文件\n```\n\n#### 4. 查找非 RBG图片\n\n查询 asset.json文件中的\"DisplayGamut\" : \"P3\"，即为不能用的图片\n\n### 补充\n在查阅资料时发现, 很多资料都提到过在项目中运行一个脚本将P3图片进行转换, 由于此种方法朕没有实际验证过, 所以只做个摘录\n\n```\n#!/bin/bash DIRECTORY=$1 echo \"----Passed Resources with xcassets folder argument is <$DIRECTORY>\" echo \"----Processing asset:\"\n\nfind \"$DIRECTORY\" -name '*png' -print0 | while read -d $'\\0' file; do echo \"---------$file\" sips -m \"/System/Library/Colorsync/Profiles/sRGB Profile.icc\" \"$file\" --out \"$file\" done\n\necho \"----script successfully finished\"\n\n```","slug":"iOS-exception-img-on-iOS9","published":1,"updated":"2018-09-26T09:20:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn2x9ahc000bpb6z1pk2ifv8","content":"<h1 id=\"iOS9-因为图片莫名闪退\"><a href=\"#iOS9-因为图片莫名闪退\" class=\"headerlink\" title=\"iOS9 因为图片莫名闪退\"></a>iOS9 因为图片莫名闪退</h1><blockquote>\n<p>一般错误信息与图片相关，如</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-[CUIStrucTuredThemeStore renditionWithKey:usingKeySignature:]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>仅在 iOS9及一下系统出现</p>\n</blockquote>\n<h3 id=\"问题说明\"><a href=\"#问题说明\" class=\"headerlink\" title=\"问题说明\"></a>问题说明</h3><p>ios9.3以下系统不支持非RGB 色域的图片，需要排查所有图片。</p>\n<h3 id=\"排查步骤\"><a href=\"#排查步骤\" class=\"headerlink\" title=\"排查步骤\"></a>排查步骤</h3><h4 id=\"1-获取ipa-文件\"><a href=\"#1-获取ipa-文件\" class=\"headerlink\" title=\"1. 获取ipa 文件\"></a>1. 获取ipa 文件</h4><ol>\n<li><p>直接从 Xcode 导出</p>\n</li>\n<li><p>从 iTuns 下载（没找到在哪儿）</p>\n</li>\n</ol>\n<h4 id=\"2-获取Assets-car文件\"><a href=\"#2-获取Assets-car文件\" class=\"headerlink\" title=\"2. 获取Assets.car文件\"></a>2. 获取Assets.car文件</h4><ol>\n<li>解压ipa, 找到 Payload 中的 .app 文件, 显示包内容，找到 Assets.car 文件，拷贝到工作目录。</li>\n</ol>\n<h4 id=\"3-获取asset-json文件\"><a href=\"#3-获取asset-json文件\" class=\"headerlink\" title=\"3. 获取asset.json文件\"></a>3. 获取asset.json文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd 工作目录</span><br><span class=\"line\"></span><br><span class=\"line\">sudo xcrun --sdk iphoneos assetutil --info ./Assets.car &gt; asset.json</span><br><span class=\"line\"></span><br><span class=\"line\">输入密码，生成asset.json文件</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-查找非-RBG图片\"><a href=\"#4-查找非-RBG图片\" class=\"headerlink\" title=\"4. 查找非 RBG图片\"></a>4. 查找非 RBG图片</h4><p>查询 asset.json文件中的”DisplayGamut” : “P3”，即为不能用的图片</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>在查阅资料时发现, 很多资料都提到过在项目中运行一个脚本将P3图片进行转换, 由于此种方法朕没有实际验证过, 所以只做个摘录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash DIRECTORY=$1 echo &quot;----Passed Resources with xcassets folder argument is &lt;$DIRECTORY&gt;&quot; echo &quot;----Processing asset:&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">find &quot;$DIRECTORY&quot; -name &apos;*png&apos; -print0 | while read -d $&apos;\\0&apos; file; do echo &quot;---------$file&quot; sips -m &quot;/System/Library/Colorsync/Profiles/sRGB Profile.icc&quot; &quot;$file&quot; --out &quot;$file&quot; done</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;----script successfully finished&quot;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"iOS9-因为图片莫名闪退\"><a href=\"#iOS9-因为图片莫名闪退\" class=\"headerlink\" title=\"iOS9 因为图片莫名闪退\"></a>iOS9 因为图片莫名闪退</h1><blockquote>\n<p>一般错误信息与图片相关，如</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-[CUIStrucTuredThemeStore renditionWithKey:usingKeySignature:]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>仅在 iOS9及一下系统出现</p>\n</blockquote>\n<h3 id=\"问题说明\"><a href=\"#问题说明\" class=\"headerlink\" title=\"问题说明\"></a>问题说明</h3><p>ios9.3以下系统不支持非RGB 色域的图片，需要排查所有图片。</p>\n<h3 id=\"排查步骤\"><a href=\"#排查步骤\" class=\"headerlink\" title=\"排查步骤\"></a>排查步骤</h3><h4 id=\"1-获取ipa-文件\"><a href=\"#1-获取ipa-文件\" class=\"headerlink\" title=\"1. 获取ipa 文件\"></a>1. 获取ipa 文件</h4><ol>\n<li><p>直接从 Xcode 导出</p>\n</li>\n<li><p>从 iTuns 下载（没找到在哪儿）</p>\n</li>\n</ol>\n<h4 id=\"2-获取Assets-car文件\"><a href=\"#2-获取Assets-car文件\" class=\"headerlink\" title=\"2. 获取Assets.car文件\"></a>2. 获取Assets.car文件</h4><ol>\n<li>解压ipa, 找到 Payload 中的 .app 文件, 显示包内容，找到 Assets.car 文件，拷贝到工作目录。</li>\n</ol>\n<h4 id=\"3-获取asset-json文件\"><a href=\"#3-获取asset-json文件\" class=\"headerlink\" title=\"3. 获取asset.json文件\"></a>3. 获取asset.json文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd 工作目录</span><br><span class=\"line\"></span><br><span class=\"line\">sudo xcrun --sdk iphoneos assetutil --info ./Assets.car &gt; asset.json</span><br><span class=\"line\"></span><br><span class=\"line\">输入密码，生成asset.json文件</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-查找非-RBG图片\"><a href=\"#4-查找非-RBG图片\" class=\"headerlink\" title=\"4. 查找非 RBG图片\"></a>4. 查找非 RBG图片</h4><p>查询 asset.json文件中的”DisplayGamut” : “P3”，即为不能用的图片</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>在查阅资料时发现, 很多资料都提到过在项目中运行一个脚本将P3图片进行转换, 由于此种方法朕没有实际验证过, 所以只做个摘录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash DIRECTORY=$1 echo &quot;----Passed Resources with xcassets folder argument is &lt;$DIRECTORY&gt;&quot; echo &quot;----Processing asset:&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">find &quot;$DIRECTORY&quot; -name &apos;*png&apos; -print0 | while read -d $&apos;\\0&apos; file; do echo &quot;---------$file&quot; sips -m &quot;/System/Library/Colorsync/Profiles/sRGB Profile.icc&quot; &quot;$file&quot; --out &quot;$file&quot; done</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;----script successfully finished&quot;</span><br></pre></td></tr></table></figure>"},{"title":"UIViewController 生命周期方法与业务逻辑","date":"2018-04-18T10:45:04.000Z","_content":"\n# UIViewController 生命周期方法与业务逻辑\n\n**UIViewController 生命周期的主要包括9个方法：**\n\n![](http://ot8psglzx.bkt.clouddn.com/VcLife.png?imageMogr2/thumbnail/!70p)\n\n\n## init\n\n> 默认初始化\n\n- **业务逻辑**\n\n    可以初始化数据\n\n- **注意事项**\n\n    不要创建 view。不要调用 self.view。因为view是lazyinit的，调用 self.view，会导致viewcontroller创建view。\n    \n## loadView\n\n> 加载 view，如果是从 nib 文件或者 stroyboard加载，则加载相关文件，如果没有，则创建默认的 view。\n\n- **业务逻辑**\n\n    不要重载该方法，创建 view 可以在viewDidLoad中\n\n- **注意事项**\n\n    不要创建view。不要调用 self.view。要调用都在 [super loadView]后。\n\n## viewDidLoad\n\n> 加载view完成。\n\n- **业务逻辑**\n\n    创建附加 view，但是 self.view 的 frame 不可用。\n\n- **注意事项**\n\n    该方法可能调用多次。\n    \n## viewWillApper\n\n> view被添加到superview之前，切换动画之前调用。\n\n- **业务逻辑**\n\n    显示前的处理。如键盘弹出，状态条和navigationbar颜色。\n\n- **注意事项**\n\n    此时 View的 frame 不定，不能利用frame的值\n    \n## viewDidApper\n\n> view 已经显示，动画切换完成\n\n- **业务逻辑**\n\n    业务处理 ，可以使用 self.view 的 frame\n\n- **注意事项**\n\n    暂无\n    \n## viewWillDisapper\n\n> view移出之前，还未调用 removeFromSuperView\n\n- **业务逻辑**\n\n    根据具体业务处理\n\n- **注意事项**\n\n    暂无\n\n## viewDidDisapper\n\n\n> view移出完成，动画完成。\n\n- **业务逻辑**\n\n    处理view 不显示时的一些业务逻辑。\n\n- **注意事项**\n\n    暂无\n\n## viewDidUnload\n\n\n> 一般发生在内存警告时，view置为nil\n\n- **业务逻辑**\n\n    可以释放其他view，比如viewcontroller的 self.view上加了一个label，而且这个label是viewcontroller的属性，那么你要把这个属性设置成nil，以免占用不必要的内存，而这个label在viewDidLoad时会重新创建。\n\n- **注意事项**\n\n    暂无\n    \n## dealloc\n\n> 销毁时调用\n\n- **业务逻辑**\n\n    移除观察者，定时器等\n\n- **注意事项**\n\n    在 ARC 环境下，不能主动调用 dealloc 方法。","source":"_posts/iOS-kit-vc-life.md","raw":"---\ntitle: UIViewController 生命周期方法与业务逻辑\ndate: 2018-04-18 18:45:04\ncategories: iOS\ntags: [iOS,UIKit]\n---\n\n# UIViewController 生命周期方法与业务逻辑\n\n**UIViewController 生命周期的主要包括9个方法：**\n\n![](http://ot8psglzx.bkt.clouddn.com/VcLife.png?imageMogr2/thumbnail/!70p)\n\n\n## init\n\n> 默认初始化\n\n- **业务逻辑**\n\n    可以初始化数据\n\n- **注意事项**\n\n    不要创建 view。不要调用 self.view。因为view是lazyinit的，调用 self.view，会导致viewcontroller创建view。\n    \n## loadView\n\n> 加载 view，如果是从 nib 文件或者 stroyboard加载，则加载相关文件，如果没有，则创建默认的 view。\n\n- **业务逻辑**\n\n    不要重载该方法，创建 view 可以在viewDidLoad中\n\n- **注意事项**\n\n    不要创建view。不要调用 self.view。要调用都在 [super loadView]后。\n\n## viewDidLoad\n\n> 加载view完成。\n\n- **业务逻辑**\n\n    创建附加 view，但是 self.view 的 frame 不可用。\n\n- **注意事项**\n\n    该方法可能调用多次。\n    \n## viewWillApper\n\n> view被添加到superview之前，切换动画之前调用。\n\n- **业务逻辑**\n\n    显示前的处理。如键盘弹出，状态条和navigationbar颜色。\n\n- **注意事项**\n\n    此时 View的 frame 不定，不能利用frame的值\n    \n## viewDidApper\n\n> view 已经显示，动画切换完成\n\n- **业务逻辑**\n\n    业务处理 ，可以使用 self.view 的 frame\n\n- **注意事项**\n\n    暂无\n    \n## viewWillDisapper\n\n> view移出之前，还未调用 removeFromSuperView\n\n- **业务逻辑**\n\n    根据具体业务处理\n\n- **注意事项**\n\n    暂无\n\n## viewDidDisapper\n\n\n> view移出完成，动画完成。\n\n- **业务逻辑**\n\n    处理view 不显示时的一些业务逻辑。\n\n- **注意事项**\n\n    暂无\n\n## viewDidUnload\n\n\n> 一般发生在内存警告时，view置为nil\n\n- **业务逻辑**\n\n    可以释放其他view，比如viewcontroller的 self.view上加了一个label，而且这个label是viewcontroller的属性，那么你要把这个属性设置成nil，以免占用不必要的内存，而这个label在viewDidLoad时会重新创建。\n\n- **注意事项**\n\n    暂无\n    \n## dealloc\n\n> 销毁时调用\n\n- **业务逻辑**\n\n    移除观察者，定时器等\n\n- **注意事项**\n\n    在 ARC 环境下，不能主动调用 dealloc 方法。","slug":"iOS-kit-vc-life","published":1,"updated":"2018-10-10T08:16:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn2x9ahd000cpb6zmtzy3kyc","content":"<h1 id=\"UIViewController-生命周期方法与业务逻辑\"><a href=\"#UIViewController-生命周期方法与业务逻辑\" class=\"headerlink\" title=\"UIViewController 生命周期方法与业务逻辑\"></a>UIViewController 生命周期方法与业务逻辑</h1><p><strong>UIViewController 生命周期的主要包括9个方法：</strong></p>\n<p><img src=\"http://ot8psglzx.bkt.clouddn.com/VcLife.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h2><blockquote>\n<p>默认初始化</p>\n</blockquote>\n<ul>\n<li><p><strong>业务逻辑</strong></p>\n<p>  可以初始化数据</p>\n</li>\n<li><p><strong>注意事项</strong></p>\n<p>  不要创建 view。不要调用 self.view。因为view是lazyinit的，调用 self.view，会导致viewcontroller创建view。</p>\n</li>\n</ul>\n<h2 id=\"loadView\"><a href=\"#loadView\" class=\"headerlink\" title=\"loadView\"></a>loadView</h2><blockquote>\n<p>加载 view，如果是从 nib 文件或者 stroyboard加载，则加载相关文件，如果没有，则创建默认的 view。</p>\n</blockquote>\n<ul>\n<li><p><strong>业务逻辑</strong></p>\n<p>  不要重载该方法，创建 view 可以在viewDidLoad中</p>\n</li>\n<li><p><strong>注意事项</strong></p>\n<p>  不要创建view。不要调用 self.view。要调用都在 [super loadView]后。</p>\n</li>\n</ul>\n<h2 id=\"viewDidLoad\"><a href=\"#viewDidLoad\" class=\"headerlink\" title=\"viewDidLoad\"></a>viewDidLoad</h2><blockquote>\n<p>加载view完成。</p>\n</blockquote>\n<ul>\n<li><p><strong>业务逻辑</strong></p>\n<p>  创建附加 view，但是 self.view 的 frame 不可用。</p>\n</li>\n<li><p><strong>注意事项</strong></p>\n<p>  该方法可能调用多次。</p>\n</li>\n</ul>\n<h2 id=\"viewWillApper\"><a href=\"#viewWillApper\" class=\"headerlink\" title=\"viewWillApper\"></a>viewWillApper</h2><blockquote>\n<p>view被添加到superview之前，切换动画之前调用。</p>\n</blockquote>\n<ul>\n<li><p><strong>业务逻辑</strong></p>\n<p>  显示前的处理。如键盘弹出，状态条和navigationbar颜色。</p>\n</li>\n<li><p><strong>注意事项</strong></p>\n<p>  此时 View的 frame 不定，不能利用frame的值</p>\n</li>\n</ul>\n<h2 id=\"viewDidApper\"><a href=\"#viewDidApper\" class=\"headerlink\" title=\"viewDidApper\"></a>viewDidApper</h2><blockquote>\n<p>view 已经显示，动画切换完成</p>\n</blockquote>\n<ul>\n<li><p><strong>业务逻辑</strong></p>\n<p>  业务处理 ，可以使用 self.view 的 frame</p>\n</li>\n<li><p><strong>注意事项</strong></p>\n<p>  暂无</p>\n</li>\n</ul>\n<h2 id=\"viewWillDisapper\"><a href=\"#viewWillDisapper\" class=\"headerlink\" title=\"viewWillDisapper\"></a>viewWillDisapper</h2><blockquote>\n<p>view移出之前，还未调用 removeFromSuperView</p>\n</blockquote>\n<ul>\n<li><p><strong>业务逻辑</strong></p>\n<p>  根据具体业务处理</p>\n</li>\n<li><p><strong>注意事项</strong></p>\n<p>  暂无</p>\n</li>\n</ul>\n<h2 id=\"viewDidDisapper\"><a href=\"#viewDidDisapper\" class=\"headerlink\" title=\"viewDidDisapper\"></a>viewDidDisapper</h2><blockquote>\n<p>view移出完成，动画完成。</p>\n</blockquote>\n<ul>\n<li><p><strong>业务逻辑</strong></p>\n<p>  处理view 不显示时的一些业务逻辑。</p>\n</li>\n<li><p><strong>注意事项</strong></p>\n<p>  暂无</p>\n</li>\n</ul>\n<h2 id=\"viewDidUnload\"><a href=\"#viewDidUnload\" class=\"headerlink\" title=\"viewDidUnload\"></a>viewDidUnload</h2><blockquote>\n<p>一般发生在内存警告时，view置为nil</p>\n</blockquote>\n<ul>\n<li><p><strong>业务逻辑</strong></p>\n<p>  可以释放其他view，比如viewcontroller的 self.view上加了一个label，而且这个label是viewcontroller的属性，那么你要把这个属性设置成nil，以免占用不必要的内存，而这个label在viewDidLoad时会重新创建。</p>\n</li>\n<li><p><strong>注意事项</strong></p>\n<p>  暂无</p>\n</li>\n</ul>\n<h2 id=\"dealloc\"><a href=\"#dealloc\" class=\"headerlink\" title=\"dealloc\"></a>dealloc</h2><blockquote>\n<p>销毁时调用</p>\n</blockquote>\n<ul>\n<li><p><strong>业务逻辑</strong></p>\n<p>  移除观察者，定时器等</p>\n</li>\n<li><p><strong>注意事项</strong></p>\n<p>  在 ARC 环境下，不能主动调用 dealloc 方法。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"UIViewController-生命周期方法与业务逻辑\"><a href=\"#UIViewController-生命周期方法与业务逻辑\" class=\"headerlink\" title=\"UIViewController 生命周期方法与业务逻辑\"></a>UIViewController 生命周期方法与业务逻辑</h1><p><strong>UIViewController 生命周期的主要包括9个方法：</strong></p>\n<p><img src=\"http://ot8psglzx.bkt.clouddn.com/VcLife.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h2><blockquote>\n<p>默认初始化</p>\n</blockquote>\n<ul>\n<li><p><strong>业务逻辑</strong></p>\n<p>  可以初始化数据</p>\n</li>\n<li><p><strong>注意事项</strong></p>\n<p>  不要创建 view。不要调用 self.view。因为view是lazyinit的，调用 self.view，会导致viewcontroller创建view。</p>\n</li>\n</ul>\n<h2 id=\"loadView\"><a href=\"#loadView\" class=\"headerlink\" title=\"loadView\"></a>loadView</h2><blockquote>\n<p>加载 view，如果是从 nib 文件或者 stroyboard加载，则加载相关文件，如果没有，则创建默认的 view。</p>\n</blockquote>\n<ul>\n<li><p><strong>业务逻辑</strong></p>\n<p>  不要重载该方法，创建 view 可以在viewDidLoad中</p>\n</li>\n<li><p><strong>注意事项</strong></p>\n<p>  不要创建view。不要调用 self.view。要调用都在 [super loadView]后。</p>\n</li>\n</ul>\n<h2 id=\"viewDidLoad\"><a href=\"#viewDidLoad\" class=\"headerlink\" title=\"viewDidLoad\"></a>viewDidLoad</h2><blockquote>\n<p>加载view完成。</p>\n</blockquote>\n<ul>\n<li><p><strong>业务逻辑</strong></p>\n<p>  创建附加 view，但是 self.view 的 frame 不可用。</p>\n</li>\n<li><p><strong>注意事项</strong></p>\n<p>  该方法可能调用多次。</p>\n</li>\n</ul>\n<h2 id=\"viewWillApper\"><a href=\"#viewWillApper\" class=\"headerlink\" title=\"viewWillApper\"></a>viewWillApper</h2><blockquote>\n<p>view被添加到superview之前，切换动画之前调用。</p>\n</blockquote>\n<ul>\n<li><p><strong>业务逻辑</strong></p>\n<p>  显示前的处理。如键盘弹出，状态条和navigationbar颜色。</p>\n</li>\n<li><p><strong>注意事项</strong></p>\n<p>  此时 View的 frame 不定，不能利用frame的值</p>\n</li>\n</ul>\n<h2 id=\"viewDidApper\"><a href=\"#viewDidApper\" class=\"headerlink\" title=\"viewDidApper\"></a>viewDidApper</h2><blockquote>\n<p>view 已经显示，动画切换完成</p>\n</blockquote>\n<ul>\n<li><p><strong>业务逻辑</strong></p>\n<p>  业务处理 ，可以使用 self.view 的 frame</p>\n</li>\n<li><p><strong>注意事项</strong></p>\n<p>  暂无</p>\n</li>\n</ul>\n<h2 id=\"viewWillDisapper\"><a href=\"#viewWillDisapper\" class=\"headerlink\" title=\"viewWillDisapper\"></a>viewWillDisapper</h2><blockquote>\n<p>view移出之前，还未调用 removeFromSuperView</p>\n</blockquote>\n<ul>\n<li><p><strong>业务逻辑</strong></p>\n<p>  根据具体业务处理</p>\n</li>\n<li><p><strong>注意事项</strong></p>\n<p>  暂无</p>\n</li>\n</ul>\n<h2 id=\"viewDidDisapper\"><a href=\"#viewDidDisapper\" class=\"headerlink\" title=\"viewDidDisapper\"></a>viewDidDisapper</h2><blockquote>\n<p>view移出完成，动画完成。</p>\n</blockquote>\n<ul>\n<li><p><strong>业务逻辑</strong></p>\n<p>  处理view 不显示时的一些业务逻辑。</p>\n</li>\n<li><p><strong>注意事项</strong></p>\n<p>  暂无</p>\n</li>\n</ul>\n<h2 id=\"viewDidUnload\"><a href=\"#viewDidUnload\" class=\"headerlink\" title=\"viewDidUnload\"></a>viewDidUnload</h2><blockquote>\n<p>一般发生在内存警告时，view置为nil</p>\n</blockquote>\n<ul>\n<li><p><strong>业务逻辑</strong></p>\n<p>  可以释放其他view，比如viewcontroller的 self.view上加了一个label，而且这个label是viewcontroller的属性，那么你要把这个属性设置成nil，以免占用不必要的内存，而这个label在viewDidLoad时会重新创建。</p>\n</li>\n<li><p><strong>注意事项</strong></p>\n<p>  暂无</p>\n</li>\n</ul>\n<h2 id=\"dealloc\"><a href=\"#dealloc\" class=\"headerlink\" title=\"dealloc\"></a>dealloc</h2><blockquote>\n<p>销毁时调用</p>\n</blockquote>\n<ul>\n<li><p><strong>业务逻辑</strong></p>\n<p>  移除观察者，定时器等</p>\n</li>\n<li><p><strong>注意事项</strong></p>\n<p>  在 ARC 环境下，不能主动调用 dealloc 方法。</p>\n</li>\n</ul>\n"},{"title":"Objective-C 基础 - 属性","date":"2018-04-16T01:05:48.000Z","_content":"\n# Objective-C 基础 - 属性(property)\n\n### @property\n\n用于声明属性，自动实现属性的读写方法。\n\n## 属性特质\n\n原子性、读写权限、内存管理语义、方法名、其他。\n\n### 1、原子性\n\n- atomic -默认\n\n  > 占用部分资源、效率一般、线程安全\n\n- nonatomic \n\n  > 非原子、效率高、线程不安全\n\n### 2、读写权限\n\n- readwrite -默认\n\n  > 读写\n\n- readonly \n\n  > 只读\n\n### 3、内存管理\n\nMRC时，有assign、retain、copy，ARC加入了strong、weak\n\n- assign -值类型默认\n\n  > 简单赋值、用于值类型，如CGFloat、NSInteger等\n\n- strong (同retain -MRC) -引用类型默认\n\n  > 强引用、用于引用类型\n  > \n  > 赋值时，保留新值，新值引用计数+1，释放旧值（引用计数-1）。\n  > \n  > 用于所有的实例变量和局部变量、其他常规对象引用。\n  > \n  > 注意：可变对象应该使用strong，如NSMultiString\n\n- copy \n\n  > 复制、用于引用类型\n  > \n  > 赋值时，拷贝新值（新对象引用计数为1），释放旧值（引用计数-1），不改变新值（引用计数不变）。\n  > \n  > copy的本质为复制该内存所存储的内容，重新创建一个对象赋给其相同的内容，对于实现了NSCopying协议的对象有效。\n  > \n  > 用于不可变对象：NSString、block、NSArray、NSDictionary等\n  > \n  > 注意：用于可变对象时，设置值后，变为不可变对象\n\n- weak \n\n  > 弱引用、用于引用类型\n  > \n  > 赋值时、单纯的引用新对象地址，不改变新对象（引用计数不变），不改变旧对象（引用计数不变）\n  > \n  > 当引用对象释放后，其值置为nil\n\n- \\_\\_unsafe_unretained \n\n  > 类似assign、适用于引用类型、不安全的弱引用\n  > \n  > 功能类似于weak、对象摧毁后，不置nil、不安全，可用weak代替\n\n### 4、方法名\n\n- getter=<name>\n\n  > ```\n  >   @property (nonatomic, getter=isOn) BOOL on;\n  > ```\n\n- setter=<name>\n\n  > ```\n  >   @property (nonatomic, setter=setOnState) BOOL on;\n  > ```\n\n### 5、其他\n\nnonnull, null_resettable, nullable\n","source":"_posts/iOS-oc-base-property.md","raw":"---\ntitle: Objective-C 基础 - 属性\ndate: 2018-04-16 09:05:48\ncategories: iOS\ntags: [iOS,Objective-C]\n---\n\n# Objective-C 基础 - 属性(property)\n\n### @property\n\n用于声明属性，自动实现属性的读写方法。\n\n## 属性特质\n\n原子性、读写权限、内存管理语义、方法名、其他。\n\n### 1、原子性\n\n- atomic -默认\n\n  > 占用部分资源、效率一般、线程安全\n\n- nonatomic \n\n  > 非原子、效率高、线程不安全\n\n### 2、读写权限\n\n- readwrite -默认\n\n  > 读写\n\n- readonly \n\n  > 只读\n\n### 3、内存管理\n\nMRC时，有assign、retain、copy，ARC加入了strong、weak\n\n- assign -值类型默认\n\n  > 简单赋值、用于值类型，如CGFloat、NSInteger等\n\n- strong (同retain -MRC) -引用类型默认\n\n  > 强引用、用于引用类型\n  > \n  > 赋值时，保留新值，新值引用计数+1，释放旧值（引用计数-1）。\n  > \n  > 用于所有的实例变量和局部变量、其他常规对象引用。\n  > \n  > 注意：可变对象应该使用strong，如NSMultiString\n\n- copy \n\n  > 复制、用于引用类型\n  > \n  > 赋值时，拷贝新值（新对象引用计数为1），释放旧值（引用计数-1），不改变新值（引用计数不变）。\n  > \n  > copy的本质为复制该内存所存储的内容，重新创建一个对象赋给其相同的内容，对于实现了NSCopying协议的对象有效。\n  > \n  > 用于不可变对象：NSString、block、NSArray、NSDictionary等\n  > \n  > 注意：用于可变对象时，设置值后，变为不可变对象\n\n- weak \n\n  > 弱引用、用于引用类型\n  > \n  > 赋值时、单纯的引用新对象地址，不改变新对象（引用计数不变），不改变旧对象（引用计数不变）\n  > \n  > 当引用对象释放后，其值置为nil\n\n- \\_\\_unsafe_unretained \n\n  > 类似assign、适用于引用类型、不安全的弱引用\n  > \n  > 功能类似于weak、对象摧毁后，不置nil、不安全，可用weak代替\n\n### 4、方法名\n\n- getter=<name>\n\n  > ```\n  >   @property (nonatomic, getter=isOn) BOOL on;\n  > ```\n\n- setter=<name>\n\n  > ```\n  >   @property (nonatomic, setter=setOnState) BOOL on;\n  > ```\n\n### 5、其他\n\nnonnull, null_resettable, nullable\n","slug":"iOS-oc-base-property","published":1,"updated":"2018-09-26T09:01:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn2x9ahf000gpb6zg1kimnyq","content":"<h1 id=\"Objective-C-基础-属性-property\"><a href=\"#Objective-C-基础-属性-property\" class=\"headerlink\" title=\"Objective-C 基础 - 属性(property)\"></a>Objective-C 基础 - 属性(property)</h1><h3 id=\"property\"><a href=\"#property\" class=\"headerlink\" title=\"@property\"></a>@property</h3><p>用于声明属性，自动实现属性的读写方法。</p>\n<h2 id=\"属性特质\"><a href=\"#属性特质\" class=\"headerlink\" title=\"属性特质\"></a>属性特质</h2><p>原子性、读写权限、内存管理语义、方法名、其他。</p>\n<h3 id=\"1、原子性\"><a href=\"#1、原子性\" class=\"headerlink\" title=\"1、原子性\"></a>1、原子性</h3><ul>\n<li><p>atomic -默认</p>\n<blockquote>\n<p>占用部分资源、效率一般、线程安全</p>\n</blockquote>\n</li>\n<li><p>nonatomic </p>\n<blockquote>\n<p>非原子、效率高、线程不安全</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2、读写权限\"><a href=\"#2、读写权限\" class=\"headerlink\" title=\"2、读写权限\"></a>2、读写权限</h3><ul>\n<li><p>readwrite -默认</p>\n<blockquote>\n<p>读写</p>\n</blockquote>\n</li>\n<li><p>readonly </p>\n<blockquote>\n<p>只读</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"3、内存管理\"><a href=\"#3、内存管理\" class=\"headerlink\" title=\"3、内存管理\"></a>3、内存管理</h3><p>MRC时，有assign、retain、copy，ARC加入了strong、weak</p>\n<ul>\n<li><p>assign -值类型默认</p>\n<blockquote>\n<p>简单赋值、用于值类型，如CGFloat、NSInteger等</p>\n</blockquote>\n</li>\n<li><p>strong (同retain -MRC) -引用类型默认</p>\n<blockquote>\n<p>强引用、用于引用类型</p>\n<p>赋值时，保留新值，新值引用计数+1，释放旧值（引用计数-1）。</p>\n<p>用于所有的实例变量和局部变量、其他常规对象引用。</p>\n<p>注意：可变对象应该使用strong，如NSMultiString</p>\n</blockquote>\n</li>\n<li><p>copy </p>\n<blockquote>\n<p>复制、用于引用类型</p>\n<p>赋值时，拷贝新值（新对象引用计数为1），释放旧值（引用计数-1），不改变新值（引用计数不变）。</p>\n<p>copy的本质为复制该内存所存储的内容，重新创建一个对象赋给其相同的内容，对于实现了NSCopying协议的对象有效。</p>\n<p>用于不可变对象：NSString、block、NSArray、NSDictionary等</p>\n<p>注意：用于可变对象时，设置值后，变为不可变对象</p>\n</blockquote>\n</li>\n<li><p>weak </p>\n<blockquote>\n<p>弱引用、用于引用类型</p>\n<p>赋值时、单纯的引用新对象地址，不改变新对象（引用计数不变），不改变旧对象（引用计数不变）</p>\n<p>当引用对象释放后，其值置为nil</p>\n</blockquote>\n</li>\n<li><p>__unsafe_unretained </p>\n<blockquote>\n<p>类似assign、适用于引用类型、不安全的弱引用</p>\n<p>功能类似于weak、对象摧毁后，不置nil、不安全，可用weak代替</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"4、方法名\"><a href=\"#4、方法名\" class=\"headerlink\" title=\"4、方法名\"></a>4、方法名</h3><ul>\n<li><p>getter=<name></name></p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;   @property (nonatomic, getter=isOn) BOOL on;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>setter=<name></name></p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;   @property (nonatomic, setter=setOnState) BOOL on;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"5、其他\"><a href=\"#5、其他\" class=\"headerlink\" title=\"5、其他\"></a>5、其他</h3><p>nonnull, null_resettable, nullable</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Objective-C-基础-属性-property\"><a href=\"#Objective-C-基础-属性-property\" class=\"headerlink\" title=\"Objective-C 基础 - 属性(property)\"></a>Objective-C 基础 - 属性(property)</h1><h3 id=\"property\"><a href=\"#property\" class=\"headerlink\" title=\"@property\"></a>@property</h3><p>用于声明属性，自动实现属性的读写方法。</p>\n<h2 id=\"属性特质\"><a href=\"#属性特质\" class=\"headerlink\" title=\"属性特质\"></a>属性特质</h2><p>原子性、读写权限、内存管理语义、方法名、其他。</p>\n<h3 id=\"1、原子性\"><a href=\"#1、原子性\" class=\"headerlink\" title=\"1、原子性\"></a>1、原子性</h3><ul>\n<li><p>atomic -默认</p>\n<blockquote>\n<p>占用部分资源、效率一般、线程安全</p>\n</blockquote>\n</li>\n<li><p>nonatomic </p>\n<blockquote>\n<p>非原子、效率高、线程不安全</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2、读写权限\"><a href=\"#2、读写权限\" class=\"headerlink\" title=\"2、读写权限\"></a>2、读写权限</h3><ul>\n<li><p>readwrite -默认</p>\n<blockquote>\n<p>读写</p>\n</blockquote>\n</li>\n<li><p>readonly </p>\n<blockquote>\n<p>只读</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"3、内存管理\"><a href=\"#3、内存管理\" class=\"headerlink\" title=\"3、内存管理\"></a>3、内存管理</h3><p>MRC时，有assign、retain、copy，ARC加入了strong、weak</p>\n<ul>\n<li><p>assign -值类型默认</p>\n<blockquote>\n<p>简单赋值、用于值类型，如CGFloat、NSInteger等</p>\n</blockquote>\n</li>\n<li><p>strong (同retain -MRC) -引用类型默认</p>\n<blockquote>\n<p>强引用、用于引用类型</p>\n<p>赋值时，保留新值，新值引用计数+1，释放旧值（引用计数-1）。</p>\n<p>用于所有的实例变量和局部变量、其他常规对象引用。</p>\n<p>注意：可变对象应该使用strong，如NSMultiString</p>\n</blockquote>\n</li>\n<li><p>copy </p>\n<blockquote>\n<p>复制、用于引用类型</p>\n<p>赋值时，拷贝新值（新对象引用计数为1），释放旧值（引用计数-1），不改变新值（引用计数不变）。</p>\n<p>copy的本质为复制该内存所存储的内容，重新创建一个对象赋给其相同的内容，对于实现了NSCopying协议的对象有效。</p>\n<p>用于不可变对象：NSString、block、NSArray、NSDictionary等</p>\n<p>注意：用于可变对象时，设置值后，变为不可变对象</p>\n</blockquote>\n</li>\n<li><p>weak </p>\n<blockquote>\n<p>弱引用、用于引用类型</p>\n<p>赋值时、单纯的引用新对象地址，不改变新对象（引用计数不变），不改变旧对象（引用计数不变）</p>\n<p>当引用对象释放后，其值置为nil</p>\n</blockquote>\n</li>\n<li><p>__unsafe_unretained </p>\n<blockquote>\n<p>类似assign、适用于引用类型、不安全的弱引用</p>\n<p>功能类似于weak、对象摧毁后，不置nil、不安全，可用weak代替</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"4、方法名\"><a href=\"#4、方法名\" class=\"headerlink\" title=\"4、方法名\"></a>4、方法名</h3><ul>\n<li><p>getter=<name></name></p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;   @property (nonatomic, getter=isOn) BOOL on;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>setter=<name></name></p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;   @property (nonatomic, setter=setOnState) BOOL on;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"5、其他\"><a href=\"#5、其他\" class=\"headerlink\" title=\"5、其他\"></a>5、其他</h3><p>nonnull, null_resettable, nullable</p>\n"},{"title":"Mac 添加自定义脚本","date":"2018-03-29T01:19:05.000Z","_content":"\n# Mac 添加自定义脚本\n\n> 将常用的命令做成脚本，添加到 terminal 会大大提高效率。\n\n### 1、建立脚本文件\n\n建立 xxx.sh 文件，内容为命令，如\n\n```\n## 添加 spring boot 默认目录\nmkdir Controller Dao Entity Service\n```\n\n### 2、添加快捷键\n\n查看bash文件\n\n```\necho $SHELL\n```\n有可能是 ~/.bash_profile、~/.zshrc等，我的是zsh，因此应该添加到~/.zshrc\n\n```\nopen ~/.zshrc\n```\n\n添加快捷命令，保存文件\n\n> alias mkspdir='.sh文件路径'\n\n重启 terminal，或者更新源\n\n```\nsource ~/.zshrc\n```\n\n此时即可使用快捷命令执行脚本了。\n\n\n#### 附：登录的一个脚本例子\n\n```\n##命令登录ssh 用户名@ip\nspawn ssh root@xxx.xxx.xxx.xxx\n##这里是执行上一步后希望出现的文字提示，通常是密码输入提示\nexpect \"**password:\"\n##利用send命令，发送你的server密码并回车即可\nsend \"yourpassword\\r\"\n\n##最后加上允许交互的命令\ninteract\n```","source":"_posts/mac-add-shell.md","raw":"---\ntitle: Mac 添加自定义脚本\ndate: 2018-03-29 09:19:05\ncategory: Mac\ntags: [Mac,shell]\n---\n\n# Mac 添加自定义脚本\n\n> 将常用的命令做成脚本，添加到 terminal 会大大提高效率。\n\n### 1、建立脚本文件\n\n建立 xxx.sh 文件，内容为命令，如\n\n```\n## 添加 spring boot 默认目录\nmkdir Controller Dao Entity Service\n```\n\n### 2、添加快捷键\n\n查看bash文件\n\n```\necho $SHELL\n```\n有可能是 ~/.bash_profile、~/.zshrc等，我的是zsh，因此应该添加到~/.zshrc\n\n```\nopen ~/.zshrc\n```\n\n添加快捷命令，保存文件\n\n> alias mkspdir='.sh文件路径'\n\n重启 terminal，或者更新源\n\n```\nsource ~/.zshrc\n```\n\n此时即可使用快捷命令执行脚本了。\n\n\n#### 附：登录的一个脚本例子\n\n```\n##命令登录ssh 用户名@ip\nspawn ssh root@xxx.xxx.xxx.xxx\n##这里是执行上一步后希望出现的文字提示，通常是密码输入提示\nexpect \"**password:\"\n##利用send命令，发送你的server密码并回车即可\nsend \"yourpassword\\r\"\n\n##最后加上允许交互的命令\ninteract\n```","slug":"mac-add-shell","published":1,"updated":"2018-09-26T09:20:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn2x9ahg000ipb6zj6yecvgh","content":"<h1 id=\"Mac-添加自定义脚本\"><a href=\"#Mac-添加自定义脚本\" class=\"headerlink\" title=\"Mac 添加自定义脚本\"></a>Mac 添加自定义脚本</h1><blockquote>\n<p>将常用的命令做成脚本，添加到 terminal 会大大提高效率。</p>\n</blockquote>\n<h3 id=\"1、建立脚本文件\"><a href=\"#1、建立脚本文件\" class=\"headerlink\" title=\"1、建立脚本文件\"></a>1、建立脚本文件</h3><p>建立 xxx.sh 文件，内容为命令，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 添加 spring boot 默认目录</span><br><span class=\"line\">mkdir Controller Dao Entity Service</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、添加快捷键\"><a href=\"#2、添加快捷键\" class=\"headerlink\" title=\"2、添加快捷键\"></a>2、添加快捷键</h3><p>查看bash文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $SHELL</span><br></pre></td></tr></table></figure>\n<p>有可能是 ~/.bash_profile、~/.zshrc等，我的是zsh，因此应该添加到~/.zshrc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>添加快捷命令，保存文件</p>\n<blockquote>\n<p>alias mkspdir=’.sh文件路径’</p>\n</blockquote>\n<p>重启 terminal，或者更新源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>此时即可使用快捷命令执行脚本了。</p>\n<h4 id=\"附：登录的一个脚本例子\"><a href=\"#附：登录的一个脚本例子\" class=\"headerlink\" title=\"附：登录的一个脚本例子\"></a>附：登录的一个脚本例子</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##命令登录ssh 用户名@ip</span><br><span class=\"line\">spawn ssh root@xxx.xxx.xxx.xxx</span><br><span class=\"line\">##这里是执行上一步后希望出现的文字提示，通常是密码输入提示</span><br><span class=\"line\">expect &quot;**password:&quot;</span><br><span class=\"line\">##利用send命令，发送你的server密码并回车即可</span><br><span class=\"line\">send &quot;yourpassword\\r&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">##最后加上允许交互的命令</span><br><span class=\"line\">interact</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Mac-添加自定义脚本\"><a href=\"#Mac-添加自定义脚本\" class=\"headerlink\" title=\"Mac 添加自定义脚本\"></a>Mac 添加自定义脚本</h1><blockquote>\n<p>将常用的命令做成脚本，添加到 terminal 会大大提高效率。</p>\n</blockquote>\n<h3 id=\"1、建立脚本文件\"><a href=\"#1、建立脚本文件\" class=\"headerlink\" title=\"1、建立脚本文件\"></a>1、建立脚本文件</h3><p>建立 xxx.sh 文件，内容为命令，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 添加 spring boot 默认目录</span><br><span class=\"line\">mkdir Controller Dao Entity Service</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、添加快捷键\"><a href=\"#2、添加快捷键\" class=\"headerlink\" title=\"2、添加快捷键\"></a>2、添加快捷键</h3><p>查看bash文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $SHELL</span><br></pre></td></tr></table></figure>\n<p>有可能是 ~/.bash_profile、~/.zshrc等，我的是zsh，因此应该添加到~/.zshrc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>添加快捷命令，保存文件</p>\n<blockquote>\n<p>alias mkspdir=’.sh文件路径’</p>\n</blockquote>\n<p>重启 terminal，或者更新源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>此时即可使用快捷命令执行脚本了。</p>\n<h4 id=\"附：登录的一个脚本例子\"><a href=\"#附：登录的一个脚本例子\" class=\"headerlink\" title=\"附：登录的一个脚本例子\"></a>附：登录的一个脚本例子</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##命令登录ssh 用户名@ip</span><br><span class=\"line\">spawn ssh root@xxx.xxx.xxx.xxx</span><br><span class=\"line\">##这里是执行上一步后希望出现的文字提示，通常是密码输入提示</span><br><span class=\"line\">expect &quot;**password:&quot;</span><br><span class=\"line\">##利用send命令，发送你的server密码并回车即可</span><br><span class=\"line\">send &quot;yourpassword\\r&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">##最后加上允许交互的命令</span><br><span class=\"line\">interact</span><br></pre></td></tr></table></figure>"},{"title":"快速上传图片到七牛(Alfred+七牛)","date":"2018-04-19T03:04:31.000Z","_content":"\n# 快速上传图片到七牛(Alfred+七牛)\n\nMac 下可以使用 Alfred 实现快速上传图片到七牛，\n\n### 需要\n\n1. Alfred 正式版\n2. 七牛帐号（个人账号就行，有免费空间）。[七牛地址](https://www.qiniu.com/)\n\n### 使用方法\n\n1. 下载[插件](https://github.com/kaito-kidd/markdown-image-alfred)，按照作者说明安装配置。\n\n### 注意事项\n\n1. 复制的文件不能有**中文字符**，不然上传失败，也无错误信息。大坑，害我重装","source":"_posts/tool-up-img-to-qiniu-by-alfred.md","raw":"---\ntitle: 快速上传图片到七牛(Alfred+七牛)\ndate: 2018-04-19 11:04:31\ncategory: Tool\ntags: [Tool,Alfred,QiNiu]\n---\n\n# 快速上传图片到七牛(Alfred+七牛)\n\nMac 下可以使用 Alfred 实现快速上传图片到七牛，\n\n### 需要\n\n1. Alfred 正式版\n2. 七牛帐号（个人账号就行，有免费空间）。[七牛地址](https://www.qiniu.com/)\n\n### 使用方法\n\n1. 下载[插件](https://github.com/kaito-kidd/markdown-image-alfred)，按照作者说明安装配置。\n\n### 注意事项\n\n1. 复制的文件不能有**中文字符**，不然上传失败，也无错误信息。大坑，害我重装","slug":"tool-up-img-to-qiniu-by-alfred","published":1,"updated":"2018-10-10T08:18:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn2x9ahi000mpb6zxmbl37jb","content":"<h1 id=\"快速上传图片到七牛-Alfred-七牛\"><a href=\"#快速上传图片到七牛-Alfred-七牛\" class=\"headerlink\" title=\"快速上传图片到七牛(Alfred+七牛)\"></a>快速上传图片到七牛(Alfred+七牛)</h1><p>Mac 下可以使用 Alfred 实现快速上传图片到七牛，</p>\n<h3 id=\"需要\"><a href=\"#需要\" class=\"headerlink\" title=\"需要\"></a>需要</h3><ol>\n<li>Alfred 正式版</li>\n<li>七牛帐号（个人账号就行，有免费空间）。<a href=\"https://www.qiniu.com/\" target=\"_blank\" rel=\"noopener\">七牛地址</a></li>\n</ol>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><ol>\n<li>下载<a href=\"https://github.com/kaito-kidd/markdown-image-alfred\" target=\"_blank\" rel=\"noopener\">插件</a>，按照作者说明安装配置。</li>\n</ol>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>复制的文件不能有<strong>中文字符</strong>，不然上传失败，也无错误信息。大坑，害我重装</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"快速上传图片到七牛-Alfred-七牛\"><a href=\"#快速上传图片到七牛-Alfred-七牛\" class=\"headerlink\" title=\"快速上传图片到七牛(Alfred+七牛)\"></a>快速上传图片到七牛(Alfred+七牛)</h1><p>Mac 下可以使用 Alfred 实现快速上传图片到七牛，</p>\n<h3 id=\"需要\"><a href=\"#需要\" class=\"headerlink\" title=\"需要\"></a>需要</h3><ol>\n<li>Alfred 正式版</li>\n<li>七牛帐号（个人账号就行，有免费空间）。<a href=\"https://www.qiniu.com/\" target=\"_blank\" rel=\"noopener\">七牛地址</a></li>\n</ol>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><ol>\n<li>下载<a href=\"https://github.com/kaito-kidd/markdown-image-alfred\" target=\"_blank\" rel=\"noopener\">插件</a>，按照作者说明安装配置。</li>\n</ol>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>复制的文件不能有<strong>中文字符</strong>，不然上传失败，也无错误信息。大坑，害我重装</li>\n</ol>\n"},{"title":"EffectiveObjective-C2.0 笔记 - 第二部分","date":"2018-06-18T03:22:23.000Z","_content":"\n**EffectiveObjective-C2.0 笔记 - 第二部分**\n\n\n# 2.1 属性\n\n**1. \"对象\"（object）就是 \"基本构造单元\"（building block），开发者可以通过对象来存储并传递数据。**\n\n> 在对象直接传递数据并执行任务的过程就叫做 \"消息传递\"（Messaging）。\n\n**2. 程序运行起来后，为其提供相关支持的代码叫做\"运行期环境\"(runtime)，它提供一些使得对象之间能够传递消息的重要函数。**\n\n> 理解运行期环境，可以帮你写出高效且易维护的代码。 \n\n**3. Oc编译采用“应用程序二进制接口”（Application Binary Interface，ABI）**\n\n> 把实例变量当作一种存储偏移量所用的 “特殊变量”（speacial variable），交由 “类对象”（class object）保管。偏移量会在运行期查找，这样子总能找到正确的偏移量，这是稳固。\n\n> 如果对象布局在编译器就固定了，访问变量时，编译器会使用 “偏移量”（offset）来计算，这个偏移量是 “硬编码”（hardcode），表示该变量距离存放对象的内存区域的起始地址有多远。 存在一个问题：如果代码使用了编译期计算出来的偏移量，那么修改类定义之后必须重新编译，否则就会出错。\n\n### @property\n\n**1. 用于声明属性，自动添加实例变量，以下划线开头，自动实现属性的读写方法。**\n\n**2. 在实现文件中可以通过@synthesize 语法来指定实例变量的名字**\n\n```\n@implementation EOCPerson\n@synthesize name = _myName;\n@end\n```\n\n**3. @dynamic 关键字会告诉编译器：不要自动创建实现属性所用的实例变量，也不要为其创建存取方法**\n\n## 属性特质\n\n原子性、读写权限、内存管理语义、方法名、其他。\n\n### 1、原子性\n\n- **atomic -默认**\n\n    - 原子性，会生成读写锁，读写安全（线程不一定安全），占用资源、效率一般。\n\n- **nonatomic** \n\n    - 非原子、效率高、读写不安全\n\n### 2、读写权限\n\n- **readwrite -默认**\n\n    - 读写\n\n- **readonly** \n\n    - 只读\n\n### 3、内存管理\n\nMRC时，有assign、retain、copy，ARC加入了strong、weak\n\n- **assign -值类型默认**\n\n    - 简单赋值、用于值类型，如CGFloat、NSInteger等\n\n- **strong (同retain -MRC) -引用类型默认**\n\n    - 强引用、用于引用类型\n    \n    - 赋值时，保留新值，新值引用计数+1，释放旧值（引用计数-1）。\n    \n    - 用于所有的实例变量和局部变量、其他常规对象引用。\n    \n    - 注意：可变对象应该使用strong，如NSMultiString，NSMultiArray\n\n- **copy** \n\n    - 复制、用于引用类型\n\n    - 赋值时，拷贝新值（新对象引用计数为1），释放旧值（引用计数-1），不改变新值（引用计数不变）。\n    \n    - copy的本质为复制该内存所存储的内容，重新创建一个对象赋给其相同的内容，对于实现了NSCopying协议的对象有效。\n    \n    - 用于不可变对象：NSString、block、NSArray、NSDictionary等\n    \n    - 注意：用于可变对象时，设置值后，变为不可变对象\n    \n- **weak** \n\n    - 弱引用、用于引用类型\n    \n    - 赋值时、单纯的引用新对象地址，不改变新对象（引用计数不变），不改变旧对象（引用计数不变）\n\n    - 当引用对象释放后，其值置为nil\n\n- **__unsafe_unretained** \n\n    - 类似assign、适用于引用类型、不安全的弱引用\n    \n    - 功能类似于weak、对象摧毁后，不置nil、不安全，可用weak代替\n\n### 4、方法名\n\n- **getter = methodname**\n \n    ```\n    @property (nonatomic, getter = isOn) BOOL on;\n    ```\n\n- **setter = methodname**\n\n    ```\n    @property (nonatomic, setter = setOnState) BOOL on;\n    ```\n\n### 5、其他\n\nnonnull, null_resettable, nullable\n\n\n# 2.2 对象访问\n\n**1. 对象访问有两种、一种是实例访问、一种是属性的读写方法访问。**\n\n* 一般可以这样做：读取时，通过实例读取、写入时，通过属性方法写入。初始化时，都用实例。\n\n* 一般外部访问时，通过属性访问。\n\n* 内部访问时、无特殊情况，通过实例访问。\n\n**2. 具体情况应该根据他们的特点来定：**\n\n* 实例访问不通过属性方法派发、效率高。\n\n* 实例访问、不触发“键值观测”，无法满足某些场景。\n\n* 初始化方法中，尽量实例访问，避免子类重写设置方法，导致出错。\n\n* 如果待初始化的实例声明在超类中，而我们又无法在子类直接访问此实例变量的话，那么就需要调用 “设置方法” 了。\n\n* 在 “惰性初始化”（lazy initialization），必须通过 “获取方法” 来访问属性，不然实例变量永远不会初始化。\n\n```\n-(EOCBrain *)brain{\n    if(!_brain){\n        _brain = [EOCBrain new];\n    }\n    \n    return _brain;\n}\n```\n\n# 2.3 对象同等性\n\n**1. == 与 isEqual**\n\n- **==**\n\n    - == 用于值对象时，可以直接判断值是否相等。\n\n    - == 用于引用对象时，是判断两个对象的指针是否相等（为同一个对象），不能判断其内容等同。\n\n- **isEqual** \n\n    - 用于引用类型、判断内容是否等同、常需要ovewrite该方法。\n\n**2. NSObject 协议中有两个用于判断等同性的关键方法：**\n\n```\n- (BOOL)isEqual:(id)object;\n- (NSUInteger)hash;\n```\n\n- 如果 “isEqual” 方法判定两个对象相等，那么其hash 方法也必须返回同一个值。\n\n- 但是，如果两个对象的hash 方法返回同一个值，那么 “isEqual” 方法未必会认为两者相等。\n\n**hash方法实现的一些情况：**\n\n```\n// 1-固定值\n- (NSUInteger)hash {\n    return 12312312;\n}\n// 这种会对collection使用这个对象产生性能问题。因为在collection 在检索哈希表的时，会用对象的哈希码来做索引，在set 集合中，会根据哈希码把对象分装到不同的数组里面，在添加新对象的时候，要根据其哈希码找对与之对应的数组，依次检查其中各个元素，看数组已有的对象是否和将要添加的新对象相等，如果相等，就说明添加的对象已经在set 集合中了，是添加失败的。（如果所有对象的hash 值对一样，这样子set 集合只会有一个数组，所有数据都在一起了，每次插入数据都会遍历这个数组，这样子就会出现性能问题）\n\n// 2-组合值\n- (NSUInteger)hash {\n    NSString *stringToHash = [NSString stringWithFormat@\"%@:%@\",_firstName,_lastNmae];\n    return [stringToHash hash];\n}\n//这样子能在一定情况下保证返回不同的哈希码，但是这里会存在创建字符串的开销，会比返回单一值要慢\n\n// 3-位运算\n- (NSUInteger)hash {\n    return [self.firstName hash] ^ [self.lastNmae hash];\n}\n\n// ^为逐位逻辑运算符，它表示逐位非或（如果只有一个位为1，那么结果为1；否则为0。）。\n//这样子可以保存较高的效率，又不会过于频繁的重复\n```\n\n**3. 特定类所具有的等同性判定方法**\n\n```\nisEqualToString、isEqualToArray、isEqualToDictionary\n```\n\n**4. 容器中可变类的等同性**\n\n- 如果要把某个对象放入colloection ，其 hash 方法的生成策略就应该保证在放入colloection 后，hash 值不再改变。不然会出现问题。\n\n\n\n# 2.4 类族模式\n\n**1. “类族” （class cluster）是一种很有用的模式（pattern），可以隐藏 “抽象基类” （abstract base class）背后的实现细节。**\n\n**2. 用户无须自己创建子类实例，只需要调用基类方法来创建即可。**\n\n**3. 如何创建类族**\n\n- 每个 “实体子类” 都从基类继承而来，“工厂模式” 是创建类族的办法之一，调用基类方法返回子类实例。\n\n- 如果对象所属的类位于某个类族中，那么查询其类型信息要注意，你可能觉得自己创建了某个类的实例，然后实际上创建的却是其子类的实例。\n\n```\n-(BOOL) isKindOfClass: classObj; //判断是否是这个类或者这个类的子类的实例\n-(BOOL) isMemberOfClass: classObj; //判断是否是这个类的实例\n```\n\n\n# 2.5 关联对象存放自定义数据\n\n**1. 关联对象** \n\n可以给某个对象关联许多其他对象，这些对象通过“键”来区分。存储对象值的时候，可以指明“存储策略”，用以维护相应的“内存管理语义”。\n\n```\nOBJC_ASSOCIATION_ASSIGN --- assign\nOBJC_ASSOCIATION_RETAIN_NONATOMIC --- nonatomic, retain\nOBJC_ASSOCIATION_COPY_NONATOMIC --- nonatomic, copy\nOBJC_ASSOCIATION_RETAIN --- retain\nOBJC_ASSOCIATION_COPY --- copy\n```\n\n下列方法可以管理关联对象：\n\n```\nvoid objc_setAssociatedObject (id object, void *key, id value, objc_AssociationPolicy policy)\n// 此方法以给定的键和策略为某对象设置关联对象值\n\nid objc_getAssociatedObject(id object, void *key) \n// 此方法根据给定的键从某个对象中获取相应的关联对象值\n\nvoid objc_removeAssociatedObject(id object) \n// 此方法移除指定对象的全部关联对象\n```\n\n若想令两个健匹配到相同的一个值，则二者必须是完全相同的指针才行。所以，在设置关联对象值时：**通常使用静态全局变量做键**。\n\n\n\n# 2.6 消息\n\n##  一. 消息传递（objc_msgSend）\n\n**1. 调用对象方法，在Objective-C 中叫做 “传递消息”（pass a message），消息有 “名称”（name）或“选择子”（selector），可以接受参数，而且可能还有返回值。**\n\nobjc_megSend 的原型：\n\n```\n// 方法原型\n// messageName 叫做 selector（选择子），选择子和参数合起来称为\"消息\"。\nid returnValue = [receiveObject messageName:parameter];\n\n// 所有方法都是普通的 C 语言函数，方法转为标准的 C 语言函数如下：\n// 是一个 “参数个数可变的函数”，能够接受两个或两个以上的参数,\n// 第一个参数代表接收者，第二个参数代表选择子，后续参数就是参数。\nvoid objc_msgSend(id self,SEL cmd,...)\n```\n\n**2. objc_megSend 函数会依据接收者和选择子来调用适当的方法：**\n\n* 在接收者所属的类搜寻其 “方法列表”\n* 找不到的话，就沿着继承体系继续向上查找\n* 最终还是找不到相符的方法就执行 “消息转发”\n\n**3. 每个类里都有一张函数表，选择子的名称则是表的 “键”，对应的值都是指向函数的指针。objc_msgSend 等函数就是通过这个函数表来寻找应该执行的方法并执行跳转的。**\n\n**4. objc_msgSend 会将匹配结果缓存在 “快速映射表”（fast map）里面，每个类都有这样子的一块缓存，接下来还向该类发送一样的消息，那么执行起来就很快了。**\n\n**5. 这里有些特殊情况，需要由Objective-C 运行环境的另外一些函数来处理：**\n\n* objc_msgSend_stret ：如果待发送的消息要返回结构体，那么可以交由此函数处理。只有当CPU 寄存器能够容纳得下消息返回类型时，这个函数才能处理此消息。若是返回值无法容纳于CPU 寄存器（比如说返回的结构体太大了），那么就由另外一个函数执行派发。此时，那个函数会通过分配在栈上的某个变量来处理消息所返回的结构体。\n* objc_msgSend_fpret：如果消息返回的是浮点数，可以交由此函数处理。这个函数是为了处理x86 等架构CPU 中某些令人惊讶的奇怪状况。\n* objc_msgSendSuper：如果要给超类发消息，那么就交由此函数处理。\n\n**6. 如果某函数的最后一项操作是调用另外一个函数，那么就可以运用 “尾调用优化” 技术。编译器会生成跳转至另外一个函数所需的指令码，而且不会向调用栈推入新的 “栈帧”。**\n\n\n## 二、 消息转发\n\n当对象接收到无法解读的消息后，就会启动 “消息转发”（message forwarding）机制，程序员可经由此过程告诉对象应该如何处理未知消息。\n\n**消息转发分为两大阶段：**\n\n### 1. 动态方法解析\n\n第一阶段选征询接收者，所属的类，看其是否能动态添加方法，以处理当前这个 “未知的选择子“（unknown seletor），这叫做 ”动态方法解析“（dynamic method resolution）。\n\n```\n//表示这个类是否能新增一个方法来处理此选择子\n+ (BOOL)resolveClassMethod:(SEL)sel\n+ (BOOL)resolveInstanceMethod:(SEL)sel\n```\n\n### 2. 完整的消息转发机制\n\n第二阶段涉及 ”完整的消息转发机制“（full forwarding mechanism）。\n\n> 如果运行期系统已经把第一阶段执行完了，那么接收者自己就无法再以动态新增方法的手段来响应包含该选择子的消息了。这里的第二阶段又分为下面两小步：\n\n* **1) 备援的接收者**\n\n    首先，请接收者看看有没其他对象能处理这条消息；若有，则运行期系统会把消息转给那个对象，于是消息转发过程结束，一切正常。\n\n```\n- (id)forwardingTargetForSelector:(SEL)aSelector\n```\n\n* **2) 若没有 ”备援的接收者“（replacement receiver），则启动完整的消息转发机制。**\n\n    运行期系统会把与消息有关的全部细节都封装到NSInvocation 对象中，再给接受者最后一次机会，令其设法解决当前还未处理的这条消息。\n\n```\n- (void)forwardInvocation:(NSInvocation *)anInvocation\n```\n\n\n# 2.7 方法调配\n\n**1. 不需要源代码，也不需要通过继承子类来覆写方法就能改变这个类本身的功能，新功能在本类的所有实例都生效，此方案称为 “方法调配”（method swizzling）。**\n\n**2. 每个类有个方法列表（函数指针 IMP），各自映射到自己的方法实现，只要我们能操作这个函数指针的指向，我们就可以动态的增加替换原有的方法。**\n\n**3. 互换两个已经写好的方法实现：**\n\n```\n// 获取方法实现：\nMethod class_getInstanceMethod(Class cls, SEL name)\n\n// 调换方法实现\nvoid method_exchangeImplementations(Method m1, Method m2) \n```\n\n**4. 为已有方法增加新功能：**\n\n```\n    Method originalMethod = class_getInstanceMethod(class, originalSelector);\n    Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);\n    \n    BOOL didAddMethod =\n    class_addMethod(class,\n                    originalSelector,\n                    method_getImplementation(swizzledMethod),\n                    method_getTypeEncoding(swizzledMethod));\n    \n    if (didAddMethod) {\n        class_replaceMethod(class,\n                            swizzledSelector,\n                            method_getImplementation(originalMethod),\n                            method_getTypeEncoding(originalMethod));\n    } else {\n       method_exchangeImplementations(originalMethod, swizzledMethod);\n    }\n```\n\n\n\n# 2.8 理解 “类对象” 的用意\n\n**1. 每个Objective-C 对象实例都是指向某块内存数据的指针。**\n\n**2. Objective-C 对象所用的数据结构**\n\n```\nstruct objc_object {\n    Class isa;\n};\n/// A pointer to an instance of a class.\ntypedef struct objc_object *id;\n```\n\n每个对象结构体首个成员是Class 类的变量，定义了对象所属的类，通常称为 “is a” 指针。\n\n\n**3. Class 对象的数据结构定义**\n\n```\nstruct objc_class {\n    Class isa  OBJC_ISA_AVAILABILITY;\n#if !__OBJC2__\n    Class super_class                                        OBJC2_UNAVAILABLE;\n    const char *name                                         OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;\n    struct objc_method_list **methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache *cache                                 OBJC2_UNAVAILABLE;\n    struct objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;\n#endif\n} OBJC2_UNAVAILABLE;\n```\n\nClass 首个变量也是isa 指针，说明Class 本身也是Objective-C 对象，指向 “元类”（meta class）。\n\n\n\n**4. 在类继承体系中查询类型信息**\n\n```\n// 判断对象是否为某个特定类的实例，不能判定 super 类\nisMemberOfClass\n\n// 判断出对象是否为某类或其派生类的实例\nisKindOfClass\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/iOS-book-EffectiveObjective-C2.0-chap2.md","raw":"---\ntitle: EffectiveObjective-C2.0 笔记 - 第二部分\ndate: 2018-06-18 11:22:23\ncategories: iOS\ntags: [iOS,Effective Objective-C 2.0]\n---\n\n**EffectiveObjective-C2.0 笔记 - 第二部分**\n\n\n# 2.1 属性\n\n**1. \"对象\"（object）就是 \"基本构造单元\"（building block），开发者可以通过对象来存储并传递数据。**\n\n> 在对象直接传递数据并执行任务的过程就叫做 \"消息传递\"（Messaging）。\n\n**2. 程序运行起来后，为其提供相关支持的代码叫做\"运行期环境\"(runtime)，它提供一些使得对象之间能够传递消息的重要函数。**\n\n> 理解运行期环境，可以帮你写出高效且易维护的代码。 \n\n**3. Oc编译采用“应用程序二进制接口”（Application Binary Interface，ABI）**\n\n> 把实例变量当作一种存储偏移量所用的 “特殊变量”（speacial variable），交由 “类对象”（class object）保管。偏移量会在运行期查找，这样子总能找到正确的偏移量，这是稳固。\n\n> 如果对象布局在编译器就固定了，访问变量时，编译器会使用 “偏移量”（offset）来计算，这个偏移量是 “硬编码”（hardcode），表示该变量距离存放对象的内存区域的起始地址有多远。 存在一个问题：如果代码使用了编译期计算出来的偏移量，那么修改类定义之后必须重新编译，否则就会出错。\n\n### @property\n\n**1. 用于声明属性，自动添加实例变量，以下划线开头，自动实现属性的读写方法。**\n\n**2. 在实现文件中可以通过@synthesize 语法来指定实例变量的名字**\n\n```\n@implementation EOCPerson\n@synthesize name = _myName;\n@end\n```\n\n**3. @dynamic 关键字会告诉编译器：不要自动创建实现属性所用的实例变量，也不要为其创建存取方法**\n\n## 属性特质\n\n原子性、读写权限、内存管理语义、方法名、其他。\n\n### 1、原子性\n\n- **atomic -默认**\n\n    - 原子性，会生成读写锁，读写安全（线程不一定安全），占用资源、效率一般。\n\n- **nonatomic** \n\n    - 非原子、效率高、读写不安全\n\n### 2、读写权限\n\n- **readwrite -默认**\n\n    - 读写\n\n- **readonly** \n\n    - 只读\n\n### 3、内存管理\n\nMRC时，有assign、retain、copy，ARC加入了strong、weak\n\n- **assign -值类型默认**\n\n    - 简单赋值、用于值类型，如CGFloat、NSInteger等\n\n- **strong (同retain -MRC) -引用类型默认**\n\n    - 强引用、用于引用类型\n    \n    - 赋值时，保留新值，新值引用计数+1，释放旧值（引用计数-1）。\n    \n    - 用于所有的实例变量和局部变量、其他常规对象引用。\n    \n    - 注意：可变对象应该使用strong，如NSMultiString，NSMultiArray\n\n- **copy** \n\n    - 复制、用于引用类型\n\n    - 赋值时，拷贝新值（新对象引用计数为1），释放旧值（引用计数-1），不改变新值（引用计数不变）。\n    \n    - copy的本质为复制该内存所存储的内容，重新创建一个对象赋给其相同的内容，对于实现了NSCopying协议的对象有效。\n    \n    - 用于不可变对象：NSString、block、NSArray、NSDictionary等\n    \n    - 注意：用于可变对象时，设置值后，变为不可变对象\n    \n- **weak** \n\n    - 弱引用、用于引用类型\n    \n    - 赋值时、单纯的引用新对象地址，不改变新对象（引用计数不变），不改变旧对象（引用计数不变）\n\n    - 当引用对象释放后，其值置为nil\n\n- **__unsafe_unretained** \n\n    - 类似assign、适用于引用类型、不安全的弱引用\n    \n    - 功能类似于weak、对象摧毁后，不置nil、不安全，可用weak代替\n\n### 4、方法名\n\n- **getter = methodname**\n \n    ```\n    @property (nonatomic, getter = isOn) BOOL on;\n    ```\n\n- **setter = methodname**\n\n    ```\n    @property (nonatomic, setter = setOnState) BOOL on;\n    ```\n\n### 5、其他\n\nnonnull, null_resettable, nullable\n\n\n# 2.2 对象访问\n\n**1. 对象访问有两种、一种是实例访问、一种是属性的读写方法访问。**\n\n* 一般可以这样做：读取时，通过实例读取、写入时，通过属性方法写入。初始化时，都用实例。\n\n* 一般外部访问时，通过属性访问。\n\n* 内部访问时、无特殊情况，通过实例访问。\n\n**2. 具体情况应该根据他们的特点来定：**\n\n* 实例访问不通过属性方法派发、效率高。\n\n* 实例访问、不触发“键值观测”，无法满足某些场景。\n\n* 初始化方法中，尽量实例访问，避免子类重写设置方法，导致出错。\n\n* 如果待初始化的实例声明在超类中，而我们又无法在子类直接访问此实例变量的话，那么就需要调用 “设置方法” 了。\n\n* 在 “惰性初始化”（lazy initialization），必须通过 “获取方法” 来访问属性，不然实例变量永远不会初始化。\n\n```\n-(EOCBrain *)brain{\n    if(!_brain){\n        _brain = [EOCBrain new];\n    }\n    \n    return _brain;\n}\n```\n\n# 2.3 对象同等性\n\n**1. == 与 isEqual**\n\n- **==**\n\n    - == 用于值对象时，可以直接判断值是否相等。\n\n    - == 用于引用对象时，是判断两个对象的指针是否相等（为同一个对象），不能判断其内容等同。\n\n- **isEqual** \n\n    - 用于引用类型、判断内容是否等同、常需要ovewrite该方法。\n\n**2. NSObject 协议中有两个用于判断等同性的关键方法：**\n\n```\n- (BOOL)isEqual:(id)object;\n- (NSUInteger)hash;\n```\n\n- 如果 “isEqual” 方法判定两个对象相等，那么其hash 方法也必须返回同一个值。\n\n- 但是，如果两个对象的hash 方法返回同一个值，那么 “isEqual” 方法未必会认为两者相等。\n\n**hash方法实现的一些情况：**\n\n```\n// 1-固定值\n- (NSUInteger)hash {\n    return 12312312;\n}\n// 这种会对collection使用这个对象产生性能问题。因为在collection 在检索哈希表的时，会用对象的哈希码来做索引，在set 集合中，会根据哈希码把对象分装到不同的数组里面，在添加新对象的时候，要根据其哈希码找对与之对应的数组，依次检查其中各个元素，看数组已有的对象是否和将要添加的新对象相等，如果相等，就说明添加的对象已经在set 集合中了，是添加失败的。（如果所有对象的hash 值对一样，这样子set 集合只会有一个数组，所有数据都在一起了，每次插入数据都会遍历这个数组，这样子就会出现性能问题）\n\n// 2-组合值\n- (NSUInteger)hash {\n    NSString *stringToHash = [NSString stringWithFormat@\"%@:%@\",_firstName,_lastNmae];\n    return [stringToHash hash];\n}\n//这样子能在一定情况下保证返回不同的哈希码，但是这里会存在创建字符串的开销，会比返回单一值要慢\n\n// 3-位运算\n- (NSUInteger)hash {\n    return [self.firstName hash] ^ [self.lastNmae hash];\n}\n\n// ^为逐位逻辑运算符，它表示逐位非或（如果只有一个位为1，那么结果为1；否则为0。）。\n//这样子可以保存较高的效率，又不会过于频繁的重复\n```\n\n**3. 特定类所具有的等同性判定方法**\n\n```\nisEqualToString、isEqualToArray、isEqualToDictionary\n```\n\n**4. 容器中可变类的等同性**\n\n- 如果要把某个对象放入colloection ，其 hash 方法的生成策略就应该保证在放入colloection 后，hash 值不再改变。不然会出现问题。\n\n\n\n# 2.4 类族模式\n\n**1. “类族” （class cluster）是一种很有用的模式（pattern），可以隐藏 “抽象基类” （abstract base class）背后的实现细节。**\n\n**2. 用户无须自己创建子类实例，只需要调用基类方法来创建即可。**\n\n**3. 如何创建类族**\n\n- 每个 “实体子类” 都从基类继承而来，“工厂模式” 是创建类族的办法之一，调用基类方法返回子类实例。\n\n- 如果对象所属的类位于某个类族中，那么查询其类型信息要注意，你可能觉得自己创建了某个类的实例，然后实际上创建的却是其子类的实例。\n\n```\n-(BOOL) isKindOfClass: classObj; //判断是否是这个类或者这个类的子类的实例\n-(BOOL) isMemberOfClass: classObj; //判断是否是这个类的实例\n```\n\n\n# 2.5 关联对象存放自定义数据\n\n**1. 关联对象** \n\n可以给某个对象关联许多其他对象，这些对象通过“键”来区分。存储对象值的时候，可以指明“存储策略”，用以维护相应的“内存管理语义”。\n\n```\nOBJC_ASSOCIATION_ASSIGN --- assign\nOBJC_ASSOCIATION_RETAIN_NONATOMIC --- nonatomic, retain\nOBJC_ASSOCIATION_COPY_NONATOMIC --- nonatomic, copy\nOBJC_ASSOCIATION_RETAIN --- retain\nOBJC_ASSOCIATION_COPY --- copy\n```\n\n下列方法可以管理关联对象：\n\n```\nvoid objc_setAssociatedObject (id object, void *key, id value, objc_AssociationPolicy policy)\n// 此方法以给定的键和策略为某对象设置关联对象值\n\nid objc_getAssociatedObject(id object, void *key) \n// 此方法根据给定的键从某个对象中获取相应的关联对象值\n\nvoid objc_removeAssociatedObject(id object) \n// 此方法移除指定对象的全部关联对象\n```\n\n若想令两个健匹配到相同的一个值，则二者必须是完全相同的指针才行。所以，在设置关联对象值时：**通常使用静态全局变量做键**。\n\n\n\n# 2.6 消息\n\n##  一. 消息传递（objc_msgSend）\n\n**1. 调用对象方法，在Objective-C 中叫做 “传递消息”（pass a message），消息有 “名称”（name）或“选择子”（selector），可以接受参数，而且可能还有返回值。**\n\nobjc_megSend 的原型：\n\n```\n// 方法原型\n// messageName 叫做 selector（选择子），选择子和参数合起来称为\"消息\"。\nid returnValue = [receiveObject messageName:parameter];\n\n// 所有方法都是普通的 C 语言函数，方法转为标准的 C 语言函数如下：\n// 是一个 “参数个数可变的函数”，能够接受两个或两个以上的参数,\n// 第一个参数代表接收者，第二个参数代表选择子，后续参数就是参数。\nvoid objc_msgSend(id self,SEL cmd,...)\n```\n\n**2. objc_megSend 函数会依据接收者和选择子来调用适当的方法：**\n\n* 在接收者所属的类搜寻其 “方法列表”\n* 找不到的话，就沿着继承体系继续向上查找\n* 最终还是找不到相符的方法就执行 “消息转发”\n\n**3. 每个类里都有一张函数表，选择子的名称则是表的 “键”，对应的值都是指向函数的指针。objc_msgSend 等函数就是通过这个函数表来寻找应该执行的方法并执行跳转的。**\n\n**4. objc_msgSend 会将匹配结果缓存在 “快速映射表”（fast map）里面，每个类都有这样子的一块缓存，接下来还向该类发送一样的消息，那么执行起来就很快了。**\n\n**5. 这里有些特殊情况，需要由Objective-C 运行环境的另外一些函数来处理：**\n\n* objc_msgSend_stret ：如果待发送的消息要返回结构体，那么可以交由此函数处理。只有当CPU 寄存器能够容纳得下消息返回类型时，这个函数才能处理此消息。若是返回值无法容纳于CPU 寄存器（比如说返回的结构体太大了），那么就由另外一个函数执行派发。此时，那个函数会通过分配在栈上的某个变量来处理消息所返回的结构体。\n* objc_msgSend_fpret：如果消息返回的是浮点数，可以交由此函数处理。这个函数是为了处理x86 等架构CPU 中某些令人惊讶的奇怪状况。\n* objc_msgSendSuper：如果要给超类发消息，那么就交由此函数处理。\n\n**6. 如果某函数的最后一项操作是调用另外一个函数，那么就可以运用 “尾调用优化” 技术。编译器会生成跳转至另外一个函数所需的指令码，而且不会向调用栈推入新的 “栈帧”。**\n\n\n## 二、 消息转发\n\n当对象接收到无法解读的消息后，就会启动 “消息转发”（message forwarding）机制，程序员可经由此过程告诉对象应该如何处理未知消息。\n\n**消息转发分为两大阶段：**\n\n### 1. 动态方法解析\n\n第一阶段选征询接收者，所属的类，看其是否能动态添加方法，以处理当前这个 “未知的选择子“（unknown seletor），这叫做 ”动态方法解析“（dynamic method resolution）。\n\n```\n//表示这个类是否能新增一个方法来处理此选择子\n+ (BOOL)resolveClassMethod:(SEL)sel\n+ (BOOL)resolveInstanceMethod:(SEL)sel\n```\n\n### 2. 完整的消息转发机制\n\n第二阶段涉及 ”完整的消息转发机制“（full forwarding mechanism）。\n\n> 如果运行期系统已经把第一阶段执行完了，那么接收者自己就无法再以动态新增方法的手段来响应包含该选择子的消息了。这里的第二阶段又分为下面两小步：\n\n* **1) 备援的接收者**\n\n    首先，请接收者看看有没其他对象能处理这条消息；若有，则运行期系统会把消息转给那个对象，于是消息转发过程结束，一切正常。\n\n```\n- (id)forwardingTargetForSelector:(SEL)aSelector\n```\n\n* **2) 若没有 ”备援的接收者“（replacement receiver），则启动完整的消息转发机制。**\n\n    运行期系统会把与消息有关的全部细节都封装到NSInvocation 对象中，再给接受者最后一次机会，令其设法解决当前还未处理的这条消息。\n\n```\n- (void)forwardInvocation:(NSInvocation *)anInvocation\n```\n\n\n# 2.7 方法调配\n\n**1. 不需要源代码，也不需要通过继承子类来覆写方法就能改变这个类本身的功能，新功能在本类的所有实例都生效，此方案称为 “方法调配”（method swizzling）。**\n\n**2. 每个类有个方法列表（函数指针 IMP），各自映射到自己的方法实现，只要我们能操作这个函数指针的指向，我们就可以动态的增加替换原有的方法。**\n\n**3. 互换两个已经写好的方法实现：**\n\n```\n// 获取方法实现：\nMethod class_getInstanceMethod(Class cls, SEL name)\n\n// 调换方法实现\nvoid method_exchangeImplementations(Method m1, Method m2) \n```\n\n**4. 为已有方法增加新功能：**\n\n```\n    Method originalMethod = class_getInstanceMethod(class, originalSelector);\n    Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);\n    \n    BOOL didAddMethod =\n    class_addMethod(class,\n                    originalSelector,\n                    method_getImplementation(swizzledMethod),\n                    method_getTypeEncoding(swizzledMethod));\n    \n    if (didAddMethod) {\n        class_replaceMethod(class,\n                            swizzledSelector,\n                            method_getImplementation(originalMethod),\n                            method_getTypeEncoding(originalMethod));\n    } else {\n       method_exchangeImplementations(originalMethod, swizzledMethod);\n    }\n```\n\n\n\n# 2.8 理解 “类对象” 的用意\n\n**1. 每个Objective-C 对象实例都是指向某块内存数据的指针。**\n\n**2. Objective-C 对象所用的数据结构**\n\n```\nstruct objc_object {\n    Class isa;\n};\n/// A pointer to an instance of a class.\ntypedef struct objc_object *id;\n```\n\n每个对象结构体首个成员是Class 类的变量，定义了对象所属的类，通常称为 “is a” 指针。\n\n\n**3. Class 对象的数据结构定义**\n\n```\nstruct objc_class {\n    Class isa  OBJC_ISA_AVAILABILITY;\n#if !__OBJC2__\n    Class super_class                                        OBJC2_UNAVAILABLE;\n    const char *name                                         OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;\n    struct objc_method_list **methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache *cache                                 OBJC2_UNAVAILABLE;\n    struct objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;\n#endif\n} OBJC2_UNAVAILABLE;\n```\n\nClass 首个变量也是isa 指针，说明Class 本身也是Objective-C 对象，指向 “元类”（meta class）。\n\n\n\n**4. 在类继承体系中查询类型信息**\n\n```\n// 判断对象是否为某个特定类的实例，不能判定 super 类\nisMemberOfClass\n\n// 判断出对象是否为某类或其派生类的实例\nisKindOfClass\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"iOS-book-EffectiveObjective-C2.0-chap2","published":1,"updated":"2018-10-10T09:00:46.000Z","_id":"cjn2x9ahi000qpb6zgbsat14g","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>EffectiveObjective-C2.0 笔记 - 第二部分</strong></p>\n<h1 id=\"2-1-属性\"><a href=\"#2-1-属性\" class=\"headerlink\" title=\"2.1 属性\"></a>2.1 属性</h1><p><strong>1. “对象”（object）就是 “基本构造单元”（building block），开发者可以通过对象来存储并传递数据。</strong></p>\n<blockquote>\n<p>在对象直接传递数据并执行任务的过程就叫做 “消息传递”（Messaging）。</p>\n</blockquote>\n<p><strong>2. 程序运行起来后，为其提供相关支持的代码叫做”运行期环境”(runtime)，它提供一些使得对象之间能够传递消息的重要函数。</strong></p>\n<blockquote>\n<p>理解运行期环境，可以帮你写出高效且易维护的代码。 </p>\n</blockquote>\n<p><strong>3. Oc编译采用“应用程序二进制接口”（Application Binary Interface，ABI）</strong></p>\n<blockquote>\n<p>把实例变量当作一种存储偏移量所用的 “特殊变量”（speacial variable），交由 “类对象”（class object）保管。偏移量会在运行期查找，这样子总能找到正确的偏移量，这是稳固。</p>\n</blockquote>\n<blockquote>\n<p>如果对象布局在编译器就固定了，访问变量时，编译器会使用 “偏移量”（offset）来计算，这个偏移量是 “硬编码”（hardcode），表示该变量距离存放对象的内存区域的起始地址有多远。 存在一个问题：如果代码使用了编译期计算出来的偏移量，那么修改类定义之后必须重新编译，否则就会出错。</p>\n</blockquote>\n<h3 id=\"property\"><a href=\"#property\" class=\"headerlink\" title=\"@property\"></a>@property</h3><p><strong>1. 用于声明属性，自动添加实例变量，以下划线开头，自动实现属性的读写方法。</strong></p>\n<p><strong>2. 在实现文件中可以通过@synthesize 语法来指定实例变量的名字</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation EOCPerson</span><br><span class=\"line\">@synthesize name = _myName;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p><strong>3. @dynamic 关键字会告诉编译器：不要自动创建实现属性所用的实例变量，也不要为其创建存取方法</strong></p>\n<h2 id=\"属性特质\"><a href=\"#属性特质\" class=\"headerlink\" title=\"属性特质\"></a>属性特质</h2><p>原子性、读写权限、内存管理语义、方法名、其他。</p>\n<h3 id=\"1、原子性\"><a href=\"#1、原子性\" class=\"headerlink\" title=\"1、原子性\"></a>1、原子性</h3><ul>\n<li><p><strong>atomic -默认</strong></p>\n<ul>\n<li>原子性，会生成读写锁，读写安全（线程不一定安全），占用资源、效率一般。</li>\n</ul>\n</li>\n<li><p><strong>nonatomic</strong> </p>\n<ul>\n<li>非原子、效率高、读写不安全</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2、读写权限\"><a href=\"#2、读写权限\" class=\"headerlink\" title=\"2、读写权限\"></a>2、读写权限</h3><ul>\n<li><p><strong>readwrite -默认</strong></p>\n<ul>\n<li>读写</li>\n</ul>\n</li>\n<li><p><strong>readonly</strong> </p>\n<ul>\n<li>只读</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3、内存管理\"><a href=\"#3、内存管理\" class=\"headerlink\" title=\"3、内存管理\"></a>3、内存管理</h3><p>MRC时，有assign、retain、copy，ARC加入了strong、weak</p>\n<ul>\n<li><p><strong>assign -值类型默认</strong></p>\n<ul>\n<li>简单赋值、用于值类型，如CGFloat、NSInteger等</li>\n</ul>\n</li>\n<li><p><strong>strong (同retain -MRC) -引用类型默认</strong></p>\n<ul>\n<li><p>强引用、用于引用类型</p>\n</li>\n<li><p>赋值时，保留新值，新值引用计数+1，释放旧值（引用计数-1）。</p>\n</li>\n<li><p>用于所有的实例变量和局部变量、其他常规对象引用。</p>\n</li>\n<li><p>注意：可变对象应该使用strong，如NSMultiString，NSMultiArray</p>\n</li>\n</ul>\n</li>\n<li><p><strong>copy</strong> </p>\n<ul>\n<li><p>复制、用于引用类型</p>\n</li>\n<li><p>赋值时，拷贝新值（新对象引用计数为1），释放旧值（引用计数-1），不改变新值（引用计数不变）。</p>\n</li>\n<li><p>copy的本质为复制该内存所存储的内容，重新创建一个对象赋给其相同的内容，对于实现了NSCopying协议的对象有效。</p>\n</li>\n<li><p>用于不可变对象：NSString、block、NSArray、NSDictionary等</p>\n</li>\n<li><p>注意：用于可变对象时，设置值后，变为不可变对象</p>\n</li>\n</ul>\n</li>\n<li><p><strong>weak</strong> </p>\n<ul>\n<li><p>弱引用、用于引用类型</p>\n</li>\n<li><p>赋值时、单纯的引用新对象地址，不改变新对象（引用计数不变），不改变旧对象（引用计数不变）</p>\n</li>\n<li><p>当引用对象释放后，其值置为nil</p>\n</li>\n</ul>\n</li>\n<li><p><strong>__unsafe_unretained</strong> </p>\n<ul>\n<li><p>类似assign、适用于引用类型、不安全的弱引用</p>\n</li>\n<li><p>功能类似于weak、对象摧毁后，不置nil、不安全，可用weak代替</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4、方法名\"><a href=\"#4、方法名\" class=\"headerlink\" title=\"4、方法名\"></a>4、方法名</h3><ul>\n<li><p><strong>getter = methodname</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, getter = isOn) BOOL on;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>setter = methodname</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, setter = setOnState) BOOL on;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5、其他\"><a href=\"#5、其他\" class=\"headerlink\" title=\"5、其他\"></a>5、其他</h3><p>nonnull, null_resettable, nullable</p>\n<h1 id=\"2-2-对象访问\"><a href=\"#2-2-对象访问\" class=\"headerlink\" title=\"2.2 对象访问\"></a>2.2 对象访问</h1><p><strong>1. 对象访问有两种、一种是实例访问、一种是属性的读写方法访问。</strong></p>\n<ul>\n<li><p>一般可以这样做：读取时，通过实例读取、写入时，通过属性方法写入。初始化时，都用实例。</p>\n</li>\n<li><p>一般外部访问时，通过属性访问。</p>\n</li>\n<li><p>内部访问时、无特殊情况，通过实例访问。</p>\n</li>\n</ul>\n<p><strong>2. 具体情况应该根据他们的特点来定：</strong></p>\n<ul>\n<li><p>实例访问不通过属性方法派发、效率高。</p>\n</li>\n<li><p>实例访问、不触发“键值观测”，无法满足某些场景。</p>\n</li>\n<li><p>初始化方法中，尽量实例访问，避免子类重写设置方法，导致出错。</p>\n</li>\n<li><p>如果待初始化的实例声明在超类中，而我们又无法在子类直接访问此实例变量的话，那么就需要调用 “设置方法” 了。</p>\n</li>\n<li><p>在 “惰性初始化”（lazy initialization），必须通过 “获取方法” 来访问属性，不然实例变量永远不会初始化。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(EOCBrain *)brain&#123;</span><br><span class=\"line\">    if(!_brain)&#123;</span><br><span class=\"line\">        _brain = [EOCBrain new];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return _brain;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-3-对象同等性\"><a href=\"#2-3-对象同等性\" class=\"headerlink\" title=\"2.3 对象同等性\"></a>2.3 对象同等性</h1><p><strong>1. == 与 isEqual</strong></p>\n<ul>\n<li><p><strong>==</strong></p>\n<ul>\n<li><p>== 用于值对象时，可以直接判断值是否相等。</p>\n</li>\n<li><p>== 用于引用对象时，是判断两个对象的指针是否相等（为同一个对象），不能判断其内容等同。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>isEqual</strong> </p>\n<ul>\n<li>用于引用类型、判断内容是否等同、常需要ovewrite该方法。</li>\n</ul>\n</li>\n</ul>\n<p><strong>2. NSObject 协议中有两个用于判断等同性的关键方法：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (BOOL)isEqual:(id)object;</span><br><span class=\"line\">- (NSUInteger)hash;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>如果 “isEqual” 方法判定两个对象相等，那么其hash 方法也必须返回同一个值。</p>\n</li>\n<li><p>但是，如果两个对象的hash 方法返回同一个值，那么 “isEqual” 方法未必会认为两者相等。</p>\n</li>\n</ul>\n<p><strong>hash方法实现的一些情况：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1-固定值</span><br><span class=\"line\">- (NSUInteger)hash &#123;</span><br><span class=\"line\">    return 12312312;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 这种会对collection使用这个对象产生性能问题。因为在collection 在检索哈希表的时，会用对象的哈希码来做索引，在set 集合中，会根据哈希码把对象分装到不同的数组里面，在添加新对象的时候，要根据其哈希码找对与之对应的数组，依次检查其中各个元素，看数组已有的对象是否和将要添加的新对象相等，如果相等，就说明添加的对象已经在set 集合中了，是添加失败的。（如果所有对象的hash 值对一样，这样子set 集合只会有一个数组，所有数据都在一起了，每次插入数据都会遍历这个数组，这样子就会出现性能问题）</span><br><span class=\"line\"></span><br><span class=\"line\">// 2-组合值</span><br><span class=\"line\">- (NSUInteger)hash &#123;</span><br><span class=\"line\">    NSString *stringToHash = [NSString stringWithFormat@&quot;%@:%@&quot;,_firstName,_lastNmae];</span><br><span class=\"line\">    return [stringToHash hash];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//这样子能在一定情况下保证返回不同的哈希码，但是这里会存在创建字符串的开销，会比返回单一值要慢</span><br><span class=\"line\"></span><br><span class=\"line\">// 3-位运算</span><br><span class=\"line\">- (NSUInteger)hash &#123;</span><br><span class=\"line\">    return [self.firstName hash] ^ [self.lastNmae hash];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// ^为逐位逻辑运算符，它表示逐位非或（如果只有一个位为1，那么结果为1；否则为0。）。</span><br><span class=\"line\">//这样子可以保存较高的效率，又不会过于频繁的重复</span><br></pre></td></tr></table></figure>\n<p><strong>3. 特定类所具有的等同性判定方法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isEqualToString、isEqualToArray、isEqualToDictionary</span><br></pre></td></tr></table></figure>\n<p><strong>4. 容器中可变类的等同性</strong></p>\n<ul>\n<li>如果要把某个对象放入colloection ，其 hash 方法的生成策略就应该保证在放入colloection 后，hash 值不再改变。不然会出现问题。</li>\n</ul>\n<h1 id=\"2-4-类族模式\"><a href=\"#2-4-类族模式\" class=\"headerlink\" title=\"2.4 类族模式\"></a>2.4 类族模式</h1><p><strong>1. “类族” （class cluster）是一种很有用的模式（pattern），可以隐藏 “抽象基类” （abstract base class）背后的实现细节。</strong></p>\n<p><strong>2. 用户无须自己创建子类实例，只需要调用基类方法来创建即可。</strong></p>\n<p><strong>3. 如何创建类族</strong></p>\n<ul>\n<li><p>每个 “实体子类” 都从基类继承而来，“工厂模式” 是创建类族的办法之一，调用基类方法返回子类实例。</p>\n</li>\n<li><p>如果对象所属的类位于某个类族中，那么查询其类型信息要注意，你可能觉得自己创建了某个类的实例，然后实际上创建的却是其子类的实例。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(BOOL) isKindOfClass: classObj; //判断是否是这个类或者这个类的子类的实例</span><br><span class=\"line\">-(BOOL) isMemberOfClass: classObj; //判断是否是这个类的实例</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-5-关联对象存放自定义数据\"><a href=\"#2-5-关联对象存放自定义数据\" class=\"headerlink\" title=\"2.5 关联对象存放自定义数据\"></a>2.5 关联对象存放自定义数据</h1><p><strong>1. 关联对象</strong> </p>\n<p>可以给某个对象关联许多其他对象，这些对象通过“键”来区分。存储对象值的时候，可以指明“存储策略”，用以维护相应的“内存管理语义”。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OBJC_ASSOCIATION_ASSIGN --- assign</span><br><span class=\"line\">OBJC_ASSOCIATION_RETAIN_NONATOMIC --- nonatomic, retain</span><br><span class=\"line\">OBJC_ASSOCIATION_COPY_NONATOMIC --- nonatomic, copy</span><br><span class=\"line\">OBJC_ASSOCIATION_RETAIN --- retain</span><br><span class=\"line\">OBJC_ASSOCIATION_COPY --- copy</span><br></pre></td></tr></table></figure>\n<p>下列方法可以管理关联对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void objc_setAssociatedObject (id object, void *key, id value, objc_AssociationPolicy policy)</span><br><span class=\"line\">// 此方法以给定的键和策略为某对象设置关联对象值</span><br><span class=\"line\"></span><br><span class=\"line\">id objc_getAssociatedObject(id object, void *key) </span><br><span class=\"line\">// 此方法根据给定的键从某个对象中获取相应的关联对象值</span><br><span class=\"line\"></span><br><span class=\"line\">void objc_removeAssociatedObject(id object) </span><br><span class=\"line\">// 此方法移除指定对象的全部关联对象</span><br></pre></td></tr></table></figure>\n<p>若想令两个健匹配到相同的一个值，则二者必须是完全相同的指针才行。所以，在设置关联对象值时：<strong>通常使用静态全局变量做键</strong>。</p>\n<h1 id=\"2-6-消息\"><a href=\"#2-6-消息\" class=\"headerlink\" title=\"2.6 消息\"></a>2.6 消息</h1><h2 id=\"一-消息传递（objc-msgSend）\"><a href=\"#一-消息传递（objc-msgSend）\" class=\"headerlink\" title=\"一. 消息传递（objc_msgSend）\"></a>一. 消息传递（objc_msgSend）</h2><p><strong>1. 调用对象方法，在Objective-C 中叫做 “传递消息”（pass a message），消息有 “名称”（name）或“选择子”（selector），可以接受参数，而且可能还有返回值。</strong></p>\n<p>objc_megSend 的原型：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 方法原型</span><br><span class=\"line\">// messageName 叫做 selector（选择子），选择子和参数合起来称为&quot;消息&quot;。</span><br><span class=\"line\">id returnValue = [receiveObject messageName:parameter];</span><br><span class=\"line\"></span><br><span class=\"line\">// 所有方法都是普通的 C 语言函数，方法转为标准的 C 语言函数如下：</span><br><span class=\"line\">// 是一个 “参数个数可变的函数”，能够接受两个或两个以上的参数,</span><br><span class=\"line\">// 第一个参数代表接收者，第二个参数代表选择子，后续参数就是参数。</span><br><span class=\"line\">void objc_msgSend(id self,SEL cmd,...)</span><br></pre></td></tr></table></figure>\n<p><strong>2. objc_megSend 函数会依据接收者和选择子来调用适当的方法：</strong></p>\n<ul>\n<li>在接收者所属的类搜寻其 “方法列表”</li>\n<li>找不到的话，就沿着继承体系继续向上查找</li>\n<li>最终还是找不到相符的方法就执行 “消息转发”</li>\n</ul>\n<p><strong>3. 每个类里都有一张函数表，选择子的名称则是表的 “键”，对应的值都是指向函数的指针。objc_msgSend 等函数就是通过这个函数表来寻找应该执行的方法并执行跳转的。</strong></p>\n<p><strong>4. objc_msgSend 会将匹配结果缓存在 “快速映射表”（fast map）里面，每个类都有这样子的一块缓存，接下来还向该类发送一样的消息，那么执行起来就很快了。</strong></p>\n<p><strong>5. 这里有些特殊情况，需要由Objective-C 运行环境的另外一些函数来处理：</strong></p>\n<ul>\n<li>objc_msgSend_stret ：如果待发送的消息要返回结构体，那么可以交由此函数处理。只有当CPU 寄存器能够容纳得下消息返回类型时，这个函数才能处理此消息。若是返回值无法容纳于CPU 寄存器（比如说返回的结构体太大了），那么就由另外一个函数执行派发。此时，那个函数会通过分配在栈上的某个变量来处理消息所返回的结构体。</li>\n<li>objc_msgSend_fpret：如果消息返回的是浮点数，可以交由此函数处理。这个函数是为了处理x86 等架构CPU 中某些令人惊讶的奇怪状况。</li>\n<li>objc_msgSendSuper：如果要给超类发消息，那么就交由此函数处理。</li>\n</ul>\n<p><strong>6. 如果某函数的最后一项操作是调用另外一个函数，那么就可以运用 “尾调用优化” 技术。编译器会生成跳转至另外一个函数所需的指令码，而且不会向调用栈推入新的 “栈帧”。</strong></p>\n<h2 id=\"二、-消息转发\"><a href=\"#二、-消息转发\" class=\"headerlink\" title=\"二、 消息转发\"></a>二、 消息转发</h2><p>当对象接收到无法解读的消息后，就会启动 “消息转发”（message forwarding）机制，程序员可经由此过程告诉对象应该如何处理未知消息。</p>\n<p><strong>消息转发分为两大阶段：</strong></p>\n<h3 id=\"1-动态方法解析\"><a href=\"#1-动态方法解析\" class=\"headerlink\" title=\"1. 动态方法解析\"></a>1. 动态方法解析</h3><p>第一阶段选征询接收者，所属的类，看其是否能动态添加方法，以处理当前这个 “未知的选择子“（unknown seletor），这叫做 ”动态方法解析“（dynamic method resolution）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//表示这个类是否能新增一个方法来处理此选择子</span><br><span class=\"line\">+ (BOOL)resolveClassMethod:(SEL)sel</span><br><span class=\"line\">+ (BOOL)resolveInstanceMethod:(SEL)sel</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-完整的消息转发机制\"><a href=\"#2-完整的消息转发机制\" class=\"headerlink\" title=\"2. 完整的消息转发机制\"></a>2. 完整的消息转发机制</h3><p>第二阶段涉及 ”完整的消息转发机制“（full forwarding mechanism）。</p>\n<blockquote>\n<p>如果运行期系统已经把第一阶段执行完了，那么接收者自己就无法再以动态新增方法的手段来响应包含该选择子的消息了。这里的第二阶段又分为下面两小步：</p>\n</blockquote>\n<ul>\n<li><p><strong>1) 备援的接收者</strong></p>\n<p>  首先，请接收者看看有没其他对象能处理这条消息；若有，则运行期系统会把消息转给那个对象，于是消息转发过程结束，一切正常。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (id)forwardingTargetForSelector:(SEL)aSelector</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>2) 若没有 ”备援的接收者“（replacement receiver），则启动完整的消息转发机制。</strong></p>\n<p>  运行期系统会把与消息有关的全部细节都封装到NSInvocation 对象中，再给接受者最后一次机会，令其设法解决当前还未处理的这条消息。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)forwardInvocation:(NSInvocation *)anInvocation</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-7-方法调配\"><a href=\"#2-7-方法调配\" class=\"headerlink\" title=\"2.7 方法调配\"></a>2.7 方法调配</h1><p><strong>1. 不需要源代码，也不需要通过继承子类来覆写方法就能改变这个类本身的功能，新功能在本类的所有实例都生效，此方案称为 “方法调配”（method swizzling）。</strong></p>\n<p><strong>2. 每个类有个方法列表（函数指针 IMP），各自映射到自己的方法实现，只要我们能操作这个函数指针的指向，我们就可以动态的增加替换原有的方法。</strong></p>\n<p><strong>3. 互换两个已经写好的方法实现：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取方法实现：</span><br><span class=\"line\">Method class_getInstanceMethod(Class cls, SEL name)</span><br><span class=\"line\"></span><br><span class=\"line\">// 调换方法实现</span><br><span class=\"line\">void method_exchangeImplementations(Method m1, Method m2)</span><br></pre></td></tr></table></figure>\n<p><strong>4. 为已有方法增加新功能：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Method originalMethod = class_getInstanceMethod(class, originalSelector);</span><br><span class=\"line\">Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL didAddMethod =</span><br><span class=\"line\">class_addMethod(class,</span><br><span class=\"line\">                originalSelector,</span><br><span class=\"line\">                method_getImplementation(swizzledMethod),</span><br><span class=\"line\">                method_getTypeEncoding(swizzledMethod));</span><br><span class=\"line\"></span><br><span class=\"line\">if (didAddMethod) &#123;</span><br><span class=\"line\">    class_replaceMethod(class,</span><br><span class=\"line\">                        swizzledSelector,</span><br><span class=\"line\">                        method_getImplementation(originalMethod),</span><br><span class=\"line\">                        method_getTypeEncoding(originalMethod));</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">   method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-8-理解-“类对象”-的用意\"><a href=\"#2-8-理解-“类对象”-的用意\" class=\"headerlink\" title=\"2.8 理解 “类对象” 的用意\"></a>2.8 理解 “类对象” 的用意</h1><p><strong>1. 每个Objective-C 对象实例都是指向某块内存数据的指针。</strong></p>\n<p><strong>2. Objective-C 对象所用的数据结构</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_object &#123;</span><br><span class=\"line\">    Class isa;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">/// A pointer to an instance of a class.</span><br><span class=\"line\">typedef struct objc_object *id;</span><br></pre></td></tr></table></figure>\n<p>每个对象结构体首个成员是Class 类的变量，定义了对象所属的类，通常称为 “is a” 指针。</p>\n<p><strong>3. Class 对象的数据结构定义</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_class &#123;</span><br><span class=\"line\">    Class isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\">#if !__OBJC2__</span><br><span class=\"line\">    Class super_class                                        OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    const char *name                                         OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    long version                                             OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    long info                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    long instance_size                                       OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_method_list **methodLists                    OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_cache *cache                                 OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">&#125; OBJC2_UNAVAILABLE;</span><br></pre></td></tr></table></figure>\n<p>Class 首个变量也是isa 指针，说明Class 本身也是Objective-C 对象，指向 “元类”（meta class）。</p>\n<p><strong>4. 在类继承体系中查询类型信息</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 判断对象是否为某个特定类的实例，不能判定 super 类</span><br><span class=\"line\">isMemberOfClass</span><br><span class=\"line\"></span><br><span class=\"line\">// 判断出对象是否为某类或其派生类的实例</span><br><span class=\"line\">isKindOfClass</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>EffectiveObjective-C2.0 笔记 - 第二部分</strong></p>\n<h1 id=\"2-1-属性\"><a href=\"#2-1-属性\" class=\"headerlink\" title=\"2.1 属性\"></a>2.1 属性</h1><p><strong>1. “对象”（object）就是 “基本构造单元”（building block），开发者可以通过对象来存储并传递数据。</strong></p>\n<blockquote>\n<p>在对象直接传递数据并执行任务的过程就叫做 “消息传递”（Messaging）。</p>\n</blockquote>\n<p><strong>2. 程序运行起来后，为其提供相关支持的代码叫做”运行期环境”(runtime)，它提供一些使得对象之间能够传递消息的重要函数。</strong></p>\n<blockquote>\n<p>理解运行期环境，可以帮你写出高效且易维护的代码。 </p>\n</blockquote>\n<p><strong>3. Oc编译采用“应用程序二进制接口”（Application Binary Interface，ABI）</strong></p>\n<blockquote>\n<p>把实例变量当作一种存储偏移量所用的 “特殊变量”（speacial variable），交由 “类对象”（class object）保管。偏移量会在运行期查找，这样子总能找到正确的偏移量，这是稳固。</p>\n</blockquote>\n<blockquote>\n<p>如果对象布局在编译器就固定了，访问变量时，编译器会使用 “偏移量”（offset）来计算，这个偏移量是 “硬编码”（hardcode），表示该变量距离存放对象的内存区域的起始地址有多远。 存在一个问题：如果代码使用了编译期计算出来的偏移量，那么修改类定义之后必须重新编译，否则就会出错。</p>\n</blockquote>\n<h3 id=\"property\"><a href=\"#property\" class=\"headerlink\" title=\"@property\"></a>@property</h3><p><strong>1. 用于声明属性，自动添加实例变量，以下划线开头，自动实现属性的读写方法。</strong></p>\n<p><strong>2. 在实现文件中可以通过@synthesize 语法来指定实例变量的名字</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation EOCPerson</span><br><span class=\"line\">@synthesize name = _myName;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p><strong>3. @dynamic 关键字会告诉编译器：不要自动创建实现属性所用的实例变量，也不要为其创建存取方法</strong></p>\n<h2 id=\"属性特质\"><a href=\"#属性特质\" class=\"headerlink\" title=\"属性特质\"></a>属性特质</h2><p>原子性、读写权限、内存管理语义、方法名、其他。</p>\n<h3 id=\"1、原子性\"><a href=\"#1、原子性\" class=\"headerlink\" title=\"1、原子性\"></a>1、原子性</h3><ul>\n<li><p><strong>atomic -默认</strong></p>\n<ul>\n<li>原子性，会生成读写锁，读写安全（线程不一定安全），占用资源、效率一般。</li>\n</ul>\n</li>\n<li><p><strong>nonatomic</strong> </p>\n<ul>\n<li>非原子、效率高、读写不安全</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2、读写权限\"><a href=\"#2、读写权限\" class=\"headerlink\" title=\"2、读写权限\"></a>2、读写权限</h3><ul>\n<li><p><strong>readwrite -默认</strong></p>\n<ul>\n<li>读写</li>\n</ul>\n</li>\n<li><p><strong>readonly</strong> </p>\n<ul>\n<li>只读</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3、内存管理\"><a href=\"#3、内存管理\" class=\"headerlink\" title=\"3、内存管理\"></a>3、内存管理</h3><p>MRC时，有assign、retain、copy，ARC加入了strong、weak</p>\n<ul>\n<li><p><strong>assign -值类型默认</strong></p>\n<ul>\n<li>简单赋值、用于值类型，如CGFloat、NSInteger等</li>\n</ul>\n</li>\n<li><p><strong>strong (同retain -MRC) -引用类型默认</strong></p>\n<ul>\n<li><p>强引用、用于引用类型</p>\n</li>\n<li><p>赋值时，保留新值，新值引用计数+1，释放旧值（引用计数-1）。</p>\n</li>\n<li><p>用于所有的实例变量和局部变量、其他常规对象引用。</p>\n</li>\n<li><p>注意：可变对象应该使用strong，如NSMultiString，NSMultiArray</p>\n</li>\n</ul>\n</li>\n<li><p><strong>copy</strong> </p>\n<ul>\n<li><p>复制、用于引用类型</p>\n</li>\n<li><p>赋值时，拷贝新值（新对象引用计数为1），释放旧值（引用计数-1），不改变新值（引用计数不变）。</p>\n</li>\n<li><p>copy的本质为复制该内存所存储的内容，重新创建一个对象赋给其相同的内容，对于实现了NSCopying协议的对象有效。</p>\n</li>\n<li><p>用于不可变对象：NSString、block、NSArray、NSDictionary等</p>\n</li>\n<li><p>注意：用于可变对象时，设置值后，变为不可变对象</p>\n</li>\n</ul>\n</li>\n<li><p><strong>weak</strong> </p>\n<ul>\n<li><p>弱引用、用于引用类型</p>\n</li>\n<li><p>赋值时、单纯的引用新对象地址，不改变新对象（引用计数不变），不改变旧对象（引用计数不变）</p>\n</li>\n<li><p>当引用对象释放后，其值置为nil</p>\n</li>\n</ul>\n</li>\n<li><p><strong>__unsafe_unretained</strong> </p>\n<ul>\n<li><p>类似assign、适用于引用类型、不安全的弱引用</p>\n</li>\n<li><p>功能类似于weak、对象摧毁后，不置nil、不安全，可用weak代替</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4、方法名\"><a href=\"#4、方法名\" class=\"headerlink\" title=\"4、方法名\"></a>4、方法名</h3><ul>\n<li><p><strong>getter = methodname</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, getter = isOn) BOOL on;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>setter = methodname</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, setter = setOnState) BOOL on;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5、其他\"><a href=\"#5、其他\" class=\"headerlink\" title=\"5、其他\"></a>5、其他</h3><p>nonnull, null_resettable, nullable</p>\n<h1 id=\"2-2-对象访问\"><a href=\"#2-2-对象访问\" class=\"headerlink\" title=\"2.2 对象访问\"></a>2.2 对象访问</h1><p><strong>1. 对象访问有两种、一种是实例访问、一种是属性的读写方法访问。</strong></p>\n<ul>\n<li><p>一般可以这样做：读取时，通过实例读取、写入时，通过属性方法写入。初始化时，都用实例。</p>\n</li>\n<li><p>一般外部访问时，通过属性访问。</p>\n</li>\n<li><p>内部访问时、无特殊情况，通过实例访问。</p>\n</li>\n</ul>\n<p><strong>2. 具体情况应该根据他们的特点来定：</strong></p>\n<ul>\n<li><p>实例访问不通过属性方法派发、效率高。</p>\n</li>\n<li><p>实例访问、不触发“键值观测”，无法满足某些场景。</p>\n</li>\n<li><p>初始化方法中，尽量实例访问，避免子类重写设置方法，导致出错。</p>\n</li>\n<li><p>如果待初始化的实例声明在超类中，而我们又无法在子类直接访问此实例变量的话，那么就需要调用 “设置方法” 了。</p>\n</li>\n<li><p>在 “惰性初始化”（lazy initialization），必须通过 “获取方法” 来访问属性，不然实例变量永远不会初始化。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(EOCBrain *)brain&#123;</span><br><span class=\"line\">    if(!_brain)&#123;</span><br><span class=\"line\">        _brain = [EOCBrain new];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return _brain;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-3-对象同等性\"><a href=\"#2-3-对象同等性\" class=\"headerlink\" title=\"2.3 对象同等性\"></a>2.3 对象同等性</h1><p><strong>1. == 与 isEqual</strong></p>\n<ul>\n<li><p><strong>==</strong></p>\n<ul>\n<li><p>== 用于值对象时，可以直接判断值是否相等。</p>\n</li>\n<li><p>== 用于引用对象时，是判断两个对象的指针是否相等（为同一个对象），不能判断其内容等同。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>isEqual</strong> </p>\n<ul>\n<li>用于引用类型、判断内容是否等同、常需要ovewrite该方法。</li>\n</ul>\n</li>\n</ul>\n<p><strong>2. NSObject 协议中有两个用于判断等同性的关键方法：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (BOOL)isEqual:(id)object;</span><br><span class=\"line\">- (NSUInteger)hash;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>如果 “isEqual” 方法判定两个对象相等，那么其hash 方法也必须返回同一个值。</p>\n</li>\n<li><p>但是，如果两个对象的hash 方法返回同一个值，那么 “isEqual” 方法未必会认为两者相等。</p>\n</li>\n</ul>\n<p><strong>hash方法实现的一些情况：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1-固定值</span><br><span class=\"line\">- (NSUInteger)hash &#123;</span><br><span class=\"line\">    return 12312312;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 这种会对collection使用这个对象产生性能问题。因为在collection 在检索哈希表的时，会用对象的哈希码来做索引，在set 集合中，会根据哈希码把对象分装到不同的数组里面，在添加新对象的时候，要根据其哈希码找对与之对应的数组，依次检查其中各个元素，看数组已有的对象是否和将要添加的新对象相等，如果相等，就说明添加的对象已经在set 集合中了，是添加失败的。（如果所有对象的hash 值对一样，这样子set 集合只会有一个数组，所有数据都在一起了，每次插入数据都会遍历这个数组，这样子就会出现性能问题）</span><br><span class=\"line\"></span><br><span class=\"line\">// 2-组合值</span><br><span class=\"line\">- (NSUInteger)hash &#123;</span><br><span class=\"line\">    NSString *stringToHash = [NSString stringWithFormat@&quot;%@:%@&quot;,_firstName,_lastNmae];</span><br><span class=\"line\">    return [stringToHash hash];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//这样子能在一定情况下保证返回不同的哈希码，但是这里会存在创建字符串的开销，会比返回单一值要慢</span><br><span class=\"line\"></span><br><span class=\"line\">// 3-位运算</span><br><span class=\"line\">- (NSUInteger)hash &#123;</span><br><span class=\"line\">    return [self.firstName hash] ^ [self.lastNmae hash];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// ^为逐位逻辑运算符，它表示逐位非或（如果只有一个位为1，那么结果为1；否则为0。）。</span><br><span class=\"line\">//这样子可以保存较高的效率，又不会过于频繁的重复</span><br></pre></td></tr></table></figure>\n<p><strong>3. 特定类所具有的等同性判定方法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isEqualToString、isEqualToArray、isEqualToDictionary</span><br></pre></td></tr></table></figure>\n<p><strong>4. 容器中可变类的等同性</strong></p>\n<ul>\n<li>如果要把某个对象放入colloection ，其 hash 方法的生成策略就应该保证在放入colloection 后，hash 值不再改变。不然会出现问题。</li>\n</ul>\n<h1 id=\"2-4-类族模式\"><a href=\"#2-4-类族模式\" class=\"headerlink\" title=\"2.4 类族模式\"></a>2.4 类族模式</h1><p><strong>1. “类族” （class cluster）是一种很有用的模式（pattern），可以隐藏 “抽象基类” （abstract base class）背后的实现细节。</strong></p>\n<p><strong>2. 用户无须自己创建子类实例，只需要调用基类方法来创建即可。</strong></p>\n<p><strong>3. 如何创建类族</strong></p>\n<ul>\n<li><p>每个 “实体子类” 都从基类继承而来，“工厂模式” 是创建类族的办法之一，调用基类方法返回子类实例。</p>\n</li>\n<li><p>如果对象所属的类位于某个类族中，那么查询其类型信息要注意，你可能觉得自己创建了某个类的实例，然后实际上创建的却是其子类的实例。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(BOOL) isKindOfClass: classObj; //判断是否是这个类或者这个类的子类的实例</span><br><span class=\"line\">-(BOOL) isMemberOfClass: classObj; //判断是否是这个类的实例</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-5-关联对象存放自定义数据\"><a href=\"#2-5-关联对象存放自定义数据\" class=\"headerlink\" title=\"2.5 关联对象存放自定义数据\"></a>2.5 关联对象存放自定义数据</h1><p><strong>1. 关联对象</strong> </p>\n<p>可以给某个对象关联许多其他对象，这些对象通过“键”来区分。存储对象值的时候，可以指明“存储策略”，用以维护相应的“内存管理语义”。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OBJC_ASSOCIATION_ASSIGN --- assign</span><br><span class=\"line\">OBJC_ASSOCIATION_RETAIN_NONATOMIC --- nonatomic, retain</span><br><span class=\"line\">OBJC_ASSOCIATION_COPY_NONATOMIC --- nonatomic, copy</span><br><span class=\"line\">OBJC_ASSOCIATION_RETAIN --- retain</span><br><span class=\"line\">OBJC_ASSOCIATION_COPY --- copy</span><br></pre></td></tr></table></figure>\n<p>下列方法可以管理关联对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void objc_setAssociatedObject (id object, void *key, id value, objc_AssociationPolicy policy)</span><br><span class=\"line\">// 此方法以给定的键和策略为某对象设置关联对象值</span><br><span class=\"line\"></span><br><span class=\"line\">id objc_getAssociatedObject(id object, void *key) </span><br><span class=\"line\">// 此方法根据给定的键从某个对象中获取相应的关联对象值</span><br><span class=\"line\"></span><br><span class=\"line\">void objc_removeAssociatedObject(id object) </span><br><span class=\"line\">// 此方法移除指定对象的全部关联对象</span><br></pre></td></tr></table></figure>\n<p>若想令两个健匹配到相同的一个值，则二者必须是完全相同的指针才行。所以，在设置关联对象值时：<strong>通常使用静态全局变量做键</strong>。</p>\n<h1 id=\"2-6-消息\"><a href=\"#2-6-消息\" class=\"headerlink\" title=\"2.6 消息\"></a>2.6 消息</h1><h2 id=\"一-消息传递（objc-msgSend）\"><a href=\"#一-消息传递（objc-msgSend）\" class=\"headerlink\" title=\"一. 消息传递（objc_msgSend）\"></a>一. 消息传递（objc_msgSend）</h2><p><strong>1. 调用对象方法，在Objective-C 中叫做 “传递消息”（pass a message），消息有 “名称”（name）或“选择子”（selector），可以接受参数，而且可能还有返回值。</strong></p>\n<p>objc_megSend 的原型：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 方法原型</span><br><span class=\"line\">// messageName 叫做 selector（选择子），选择子和参数合起来称为&quot;消息&quot;。</span><br><span class=\"line\">id returnValue = [receiveObject messageName:parameter];</span><br><span class=\"line\"></span><br><span class=\"line\">// 所有方法都是普通的 C 语言函数，方法转为标准的 C 语言函数如下：</span><br><span class=\"line\">// 是一个 “参数个数可变的函数”，能够接受两个或两个以上的参数,</span><br><span class=\"line\">// 第一个参数代表接收者，第二个参数代表选择子，后续参数就是参数。</span><br><span class=\"line\">void objc_msgSend(id self,SEL cmd,...)</span><br></pre></td></tr></table></figure>\n<p><strong>2. objc_megSend 函数会依据接收者和选择子来调用适当的方法：</strong></p>\n<ul>\n<li>在接收者所属的类搜寻其 “方法列表”</li>\n<li>找不到的话，就沿着继承体系继续向上查找</li>\n<li>最终还是找不到相符的方法就执行 “消息转发”</li>\n</ul>\n<p><strong>3. 每个类里都有一张函数表，选择子的名称则是表的 “键”，对应的值都是指向函数的指针。objc_msgSend 等函数就是通过这个函数表来寻找应该执行的方法并执行跳转的。</strong></p>\n<p><strong>4. objc_msgSend 会将匹配结果缓存在 “快速映射表”（fast map）里面，每个类都有这样子的一块缓存，接下来还向该类发送一样的消息，那么执行起来就很快了。</strong></p>\n<p><strong>5. 这里有些特殊情况，需要由Objective-C 运行环境的另外一些函数来处理：</strong></p>\n<ul>\n<li>objc_msgSend_stret ：如果待发送的消息要返回结构体，那么可以交由此函数处理。只有当CPU 寄存器能够容纳得下消息返回类型时，这个函数才能处理此消息。若是返回值无法容纳于CPU 寄存器（比如说返回的结构体太大了），那么就由另外一个函数执行派发。此时，那个函数会通过分配在栈上的某个变量来处理消息所返回的结构体。</li>\n<li>objc_msgSend_fpret：如果消息返回的是浮点数，可以交由此函数处理。这个函数是为了处理x86 等架构CPU 中某些令人惊讶的奇怪状况。</li>\n<li>objc_msgSendSuper：如果要给超类发消息，那么就交由此函数处理。</li>\n</ul>\n<p><strong>6. 如果某函数的最后一项操作是调用另外一个函数，那么就可以运用 “尾调用优化” 技术。编译器会生成跳转至另外一个函数所需的指令码，而且不会向调用栈推入新的 “栈帧”。</strong></p>\n<h2 id=\"二、-消息转发\"><a href=\"#二、-消息转发\" class=\"headerlink\" title=\"二、 消息转发\"></a>二、 消息转发</h2><p>当对象接收到无法解读的消息后，就会启动 “消息转发”（message forwarding）机制，程序员可经由此过程告诉对象应该如何处理未知消息。</p>\n<p><strong>消息转发分为两大阶段：</strong></p>\n<h3 id=\"1-动态方法解析\"><a href=\"#1-动态方法解析\" class=\"headerlink\" title=\"1. 动态方法解析\"></a>1. 动态方法解析</h3><p>第一阶段选征询接收者，所属的类，看其是否能动态添加方法，以处理当前这个 “未知的选择子“（unknown seletor），这叫做 ”动态方法解析“（dynamic method resolution）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//表示这个类是否能新增一个方法来处理此选择子</span><br><span class=\"line\">+ (BOOL)resolveClassMethod:(SEL)sel</span><br><span class=\"line\">+ (BOOL)resolveInstanceMethod:(SEL)sel</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-完整的消息转发机制\"><a href=\"#2-完整的消息转发机制\" class=\"headerlink\" title=\"2. 完整的消息转发机制\"></a>2. 完整的消息转发机制</h3><p>第二阶段涉及 ”完整的消息转发机制“（full forwarding mechanism）。</p>\n<blockquote>\n<p>如果运行期系统已经把第一阶段执行完了，那么接收者自己就无法再以动态新增方法的手段来响应包含该选择子的消息了。这里的第二阶段又分为下面两小步：</p>\n</blockquote>\n<ul>\n<li><p><strong>1) 备援的接收者</strong></p>\n<p>  首先，请接收者看看有没其他对象能处理这条消息；若有，则运行期系统会把消息转给那个对象，于是消息转发过程结束，一切正常。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (id)forwardingTargetForSelector:(SEL)aSelector</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>2) 若没有 ”备援的接收者“（replacement receiver），则启动完整的消息转发机制。</strong></p>\n<p>  运行期系统会把与消息有关的全部细节都封装到NSInvocation 对象中，再给接受者最后一次机会，令其设法解决当前还未处理的这条消息。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)forwardInvocation:(NSInvocation *)anInvocation</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-7-方法调配\"><a href=\"#2-7-方法调配\" class=\"headerlink\" title=\"2.7 方法调配\"></a>2.7 方法调配</h1><p><strong>1. 不需要源代码，也不需要通过继承子类来覆写方法就能改变这个类本身的功能，新功能在本类的所有实例都生效，此方案称为 “方法调配”（method swizzling）。</strong></p>\n<p><strong>2. 每个类有个方法列表（函数指针 IMP），各自映射到自己的方法实现，只要我们能操作这个函数指针的指向，我们就可以动态的增加替换原有的方法。</strong></p>\n<p><strong>3. 互换两个已经写好的方法实现：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取方法实现：</span><br><span class=\"line\">Method class_getInstanceMethod(Class cls, SEL name)</span><br><span class=\"line\"></span><br><span class=\"line\">// 调换方法实现</span><br><span class=\"line\">void method_exchangeImplementations(Method m1, Method m2)</span><br></pre></td></tr></table></figure>\n<p><strong>4. 为已有方法增加新功能：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Method originalMethod = class_getInstanceMethod(class, originalSelector);</span><br><span class=\"line\">Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL didAddMethod =</span><br><span class=\"line\">class_addMethod(class,</span><br><span class=\"line\">                originalSelector,</span><br><span class=\"line\">                method_getImplementation(swizzledMethod),</span><br><span class=\"line\">                method_getTypeEncoding(swizzledMethod));</span><br><span class=\"line\"></span><br><span class=\"line\">if (didAddMethod) &#123;</span><br><span class=\"line\">    class_replaceMethod(class,</span><br><span class=\"line\">                        swizzledSelector,</span><br><span class=\"line\">                        method_getImplementation(originalMethod),</span><br><span class=\"line\">                        method_getTypeEncoding(originalMethod));</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">   method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-8-理解-“类对象”-的用意\"><a href=\"#2-8-理解-“类对象”-的用意\" class=\"headerlink\" title=\"2.8 理解 “类对象” 的用意\"></a>2.8 理解 “类对象” 的用意</h1><p><strong>1. 每个Objective-C 对象实例都是指向某块内存数据的指针。</strong></p>\n<p><strong>2. Objective-C 对象所用的数据结构</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_object &#123;</span><br><span class=\"line\">    Class isa;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">/// A pointer to an instance of a class.</span><br><span class=\"line\">typedef struct objc_object *id;</span><br></pre></td></tr></table></figure>\n<p>每个对象结构体首个成员是Class 类的变量，定义了对象所属的类，通常称为 “is a” 指针。</p>\n<p><strong>3. Class 对象的数据结构定义</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_class &#123;</span><br><span class=\"line\">    Class isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\">#if !__OBJC2__</span><br><span class=\"line\">    Class super_class                                        OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    const char *name                                         OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    long version                                             OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    long info                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    long instance_size                                       OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_method_list **methodLists                    OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_cache *cache                                 OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">&#125; OBJC2_UNAVAILABLE;</span><br></pre></td></tr></table></figure>\n<p>Class 首个变量也是isa 指针，说明Class 本身也是Objective-C 对象，指向 “元类”（meta class）。</p>\n<p><strong>4. 在类继承体系中查询类型信息</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 判断对象是否为某个特定类的实例，不能判定 super 类</span><br><span class=\"line\">isMemberOfClass</span><br><span class=\"line\"></span><br><span class=\"line\">// 判断出对象是否为某类或其派生类的实例</span><br><span class=\"line\">isKindOfClass</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjn2x9aha0007pb6zsp5reo3i","category_id":"cjn2x9ah80004pb6z8xovlozq","_id":"cjn2x9ahe000dpb6z3rtly59j"},{"post_id":"cjn2x9ah30000pb6z6zojubzs","category_id":"cjn2x9ah80004pb6z8xovlozq","_id":"cjn2x9ahg000hpb6z0bdem08k"},{"post_id":"cjn2x9ahb0008pb6zngvcv3sz","category_id":"cjn2x9ah80004pb6z8xovlozq","_id":"cjn2x9ahh000jpb6zb2n4ut0h"},{"post_id":"cjn2x9ahc000bpb6z1pk2ifv8","category_id":"cjn2x9ah80004pb6z8xovlozq","_id":"cjn2x9ahi000npb6z3sk04sip"},{"post_id":"cjn2x9ah60002pb6z65kugxhk","category_id":"cjn2x9ahb0009pb6zqruxlgaq","_id":"cjn2x9ahj000rpb6zyfc4pfyl"},{"post_id":"cjn2x9ahd000cpb6zmtzy3kyc","category_id":"cjn2x9ah80004pb6z8xovlozq","_id":"cjn2x9ahj000upb6zsf8tc6ua"},{"post_id":"cjn2x9ahf000gpb6zg1kimnyq","category_id":"cjn2x9ah80004pb6z8xovlozq","_id":"cjn2x9ahk000xpb6zxiux2p0p"},{"post_id":"cjn2x9ah90006pb6zg1w87n7s","category_id":"cjn2x9ah80004pb6z8xovlozq","_id":"cjn2x9ahk000zpb6z32ger7c4"},{"post_id":"cjn2x9ahi000qpb6zgbsat14g","category_id":"cjn2x9ah80004pb6z8xovlozq","_id":"cjn2x9ahl0012pb6z6jq2bg89"},{"post_id":"cjn2x9ahg000ipb6zj6yecvgh","category_id":"cjn2x9ahi000opb6z6ddchez6","_id":"cjn2x9ahl0014pb6zkt0udrd0"},{"post_id":"cjn2x9ahi000mpb6zxmbl37jb","category_id":"cjn2x9ahk000wpb6zh3etclsd","_id":"cjn2x9ahl0016pb6zxoonceh5"}],"PostTag":[{"post_id":"cjn2x9ahf000gpb6zg1kimnyq","tag_id":"cjn2x9ah90005pb6z8x10gl45","_id":"cjn2x9ahh000lpb6zuy6uv5g5"},{"post_id":"cjn2x9ahf000gpb6zg1kimnyq","tag_id":"cjn2x9ahb000apb6zhfit7p6r","_id":"cjn2x9ahi000ppb6z7txftwaj"},{"post_id":"cjn2x9ah30000pb6z6zojubzs","tag_id":"cjn2x9ah90005pb6z8x10gl45","_id":"cjn2x9ahj000spb6z5aho1qo0"},{"post_id":"cjn2x9ah30000pb6z6zojubzs","tag_id":"cjn2x9ahb000apb6zhfit7p6r","_id":"cjn2x9ahk000vpb6zdx58mim4"},{"post_id":"cjn2x9ah30000pb6z6zojubzs","tag_id":"cjn2x9ahe000fpb6zzwci125j","_id":"cjn2x9ahk000ypb6zt4s3kwd3"},{"post_id":"cjn2x9ah60002pb6z65kugxhk","tag_id":"cjn2x9ahh000kpb6zojv55avu","_id":"cjn2x9ahl0011pb6zi5oww49k"},{"post_id":"cjn2x9ah60002pb6z65kugxhk","tag_id":"cjn2x9ahj000tpb6z2jxoy6mo","_id":"cjn2x9ahl0013pb6zp9wyn8p9"},{"post_id":"cjn2x9ah90006pb6zg1w87n7s","tag_id":"cjn2x9ah90005pb6z8x10gl45","_id":"cjn2x9ahm0018pb6zs1c6t6zu"},{"post_id":"cjn2x9ah90006pb6zg1w87n7s","tag_id":"cjn2x9ahb000apb6zhfit7p6r","_id":"cjn2x9ahm0019pb6zmhcy83bn"},{"post_id":"cjn2x9aha0007pb6zsp5reo3i","tag_id":"cjn2x9ah90005pb6z8x10gl45","_id":"cjn2x9ahn001cpb6zcp355tq3"},{"post_id":"cjn2x9aha0007pb6zsp5reo3i","tag_id":"cjn2x9ahb000apb6zhfit7p6r","_id":"cjn2x9ahn001dpb6zufna859x"},{"post_id":"cjn2x9aha0007pb6zsp5reo3i","tag_id":"cjn2x9ahe000fpb6zzwci125j","_id":"cjn2x9ahn001fpb6zyru6twf6"},{"post_id":"cjn2x9ahb0008pb6zngvcv3sz","tag_id":"cjn2x9ah90005pb6z8x10gl45","_id":"cjn2x9ahn001gpb6z3pnuivll"},{"post_id":"cjn2x9ahb0008pb6zngvcv3sz","tag_id":"cjn2x9ahn001bpb6zn4e8zbyr","_id":"cjn2x9aho001ipb6zb5jceezq"},{"post_id":"cjn2x9ahc000bpb6z1pk2ifv8","tag_id":"cjn2x9ah90005pb6z8x10gl45","_id":"cjn2x9aho001jpb6z6oy3tca6"},{"post_id":"cjn2x9ahc000bpb6z1pk2ifv8","tag_id":"cjn2x9ahb000apb6zhfit7p6r","_id":"cjn2x9aho001lpb6za8c9l11f"},{"post_id":"cjn2x9ahc000bpb6z1pk2ifv8","tag_id":"cjn2x9ahn001epb6ztnhsihu3","_id":"cjn2x9aho001mpb6zrz511khl"},{"post_id":"cjn2x9ahd000cpb6zmtzy3kyc","tag_id":"cjn2x9ah90005pb6z8x10gl45","_id":"cjn2x9ahp001npb6z712860s6"},{"post_id":"cjn2x9ahd000cpb6zmtzy3kyc","tag_id":"cjn2x9aho001hpb6zbz642hnr","_id":"cjn2x9ahp001ppb6z8kdy9phy"},{"post_id":"cjn2x9ahg000ipb6zj6yecvgh","tag_id":"cjn2x9aho001kpb6z4c7jv6qu","_id":"cjn2x9ahp001rpb6zcwqz2nzq"},{"post_id":"cjn2x9ahg000ipb6zj6yecvgh","tag_id":"cjn2x9ahp001opb6zrtewmvuo","_id":"cjn2x9ahq001spb6z4xvo8hgp"},{"post_id":"cjn2x9ahi000mpb6zxmbl37jb","tag_id":"cjn2x9ahp001qpb6zoagayjn3","_id":"cjn2x9ahr001wpb6zqlvoma75"},{"post_id":"cjn2x9ahi000mpb6zxmbl37jb","tag_id":"cjn2x9ahq001tpb6zq5esvzlm","_id":"cjn2x9ahr001xpb6zqdep6jle"},{"post_id":"cjn2x9ahi000mpb6zxmbl37jb","tag_id":"cjn2x9ahq001upb6zs64yjgr3","_id":"cjn2x9ahr001ypb6zjoe09bza"},{"post_id":"cjn2x9ahi000qpb6zgbsat14g","tag_id":"cjn2x9ah90005pb6z8x10gl45","_id":"cjn2x9ahr001zpb6zu2fz61nr"},{"post_id":"cjn2x9ahi000qpb6zgbsat14g","tag_id":"cjn2x9ahn001bpb6zn4e8zbyr","_id":"cjn2x9ahr0020pb6zjgp9q79v"}],"Tag":[{"name":"iOS","_id":"cjn2x9ah90005pb6z8x10gl45"},{"name":"Objective-C","_id":"cjn2x9ahb000apb6zhfit7p6r"},{"name":"总结","_id":"cjn2x9ahe000fpb6zzwci125j"},{"name":"Hackintosh","_id":"cjn2x9ahh000kpb6zojv55avu"},{"name":"黑苹果","_id":"cjn2x9ahj000tpb6z2jxoy6mo"},{"name":"Effective Objective-C 2.0","_id":"cjn2x9ahn001bpb6zn4e8zbyr"},{"name":"异常","_id":"cjn2x9ahn001epb6ztnhsihu3"},{"name":"UIKit","_id":"cjn2x9aho001hpb6zbz642hnr"},{"name":"Mac","_id":"cjn2x9aho001kpb6z4c7jv6qu"},{"name":"shell","_id":"cjn2x9ahp001opb6zrtewmvuo"},{"name":"Tool","_id":"cjn2x9ahp001qpb6zoagayjn3"},{"name":"Alfred","_id":"cjn2x9ahq001tpb6zq5esvzlm"},{"name":"QiNiu","_id":"cjn2x9ahq001upb6zs64yjgr3"}]}}